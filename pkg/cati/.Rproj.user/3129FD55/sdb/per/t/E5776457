{
    "contents" : "\\documentclass[12pt]{article}\n\\usepackage[utf8]{inputenc}\n\\usepackage{graphicx}\n\\usepackage{color}\n\\definecolor{blue1}{RGB}{0,102,204}\n\\usepackage[colorlinks=true,linkcolor=blue,citecolor=blue,urlcolor=blue]{hyperref}\n\\usepackage{array}\n\\usepackage[english]{babel}\n\\usepackage{amsfonts}\n\\usepackage{url}\n\\usepackage{bm}\n\\usepackage[margin=1.5cm]{geometry}\n\\usepackage[affil-it]{authblk}\n\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\code}[1]{{{\\tt #1}}}\n\n\n\\title{Illustrating package cati (Community Assembly by Traits: Individuals and beyond) using Darwin finches data}\n\\author{Adrien Taudiere and Cyrille Violle\n\\thanks{\\texttt{adrien.taudiere@cefe.cnrs.fr}}\n}\n\n\\affil{{\\footnotesize CEFE - Centre d'Ecologie Fonctionnelle et Evolutive, Montpellier: France}}\n\n\\date{\\today}\n\n\\sloppy\n\\hyphenpenalty 10000\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\begin{document}\n\n\\selectlanguage{english}\n\n<<include=FALSE>>=\nlibrary(knitr)\nopts_chunk$set(fig.keep='high', dev='pdf', fig.width=7, fig.height=7, tidy=FALSE, warning=FALSE, fig.show=\"asis\")\n@\n\n\\maketitle\n\n\\begin{abstract}\n  This vignette present the \\textit(cati) package for R (Community Assembly by Traits: Individuals and beyond) using Darwin finches data.\n\\end{abstract}\n\n\\newpage\n\\tableofcontents\n\n\\newpage\n\n\n%%%%%%%%%%%%%%%%\n\\section{Introduction}\n%%%%%%%%%%%%%%%%\nThis vignette present the \\textit(cati) package for R (Community Assembly by Traits: Individuals and beyond) using Darwin finches data.\n\n\\section{Getting started}\n\\subsection{Installing the package \\textit(cati)}\n\nBefore going further, we shall make sure that \\textit{cati} is well installed\non the computer.\nThe current version of the package is \\Sexpr{packageDescription(\"cati\", fields = \"Version\")}.\nMake sure you have a recent version of R ($\\geq 3.0.2$) by typing:\n\n<<>>=\nR.version.string\n@\n\nThen, install \\textit{cati} with dependencies using:\n<<results='hide'>>=\n#install.packages(\"cati\", dep=TRUE)\ninstall.packages(\"C:/Users/taudiere/Desktop/cati/pkg/cati_0.91.zip\", repos=NULL)\nlibrary(\"cati\")\n@\n\nWe can now load the package alongside other useful packages:\n<<results=\"hide\">>=\nlibrary(\"mice\")\nlibrary(\"hypervolume\")\n@\n\n\\noindent You can make sure that the right version of the package is installed using:\n<<>>=\npackageDescription(\"cati\", fields = \"Version\")\n@\n\\textit{cati} version should read \\Sexpr{packageDescription(\"cati\", fields = \"Version\")}.\n\n\\subsection{Getting help}\n\nTo get help for a given function, use \\texttt{?foo} where \\texttt{foo} is the\nfunction of interest.\nFor instance:\n\n <<eval=FALSE>>=\n?Tstats\n@\n\nwill open up the manpage of T-statistics function (\\textit{Tstats}).\nAn `example' section will shows how to use a function at the end of the manpage. \n\nNote that you can also browse help pages as html pages, using:\n<<eval=FALSE>>=\nhelp.start()\n@\nTo go to the \\textit{cati} page, click `packages', `cati', and\n`cati-package'.\n\n\\subsection{Data presentation: Darwin finches in Galapagos Island}\n\nFirst we need to load the data.\n<<results='hide', message=FALSE, warning=FALSE>>= \ndata(finch.ind)\n\n#Save default parameters\nold.par<-par(no.readonly = TRUE)\n@\n\nNow we can see 3 objects: a traits matrix \n<<results='hide', message=FALSE, warning=FALSE>>= \ndim(traits.finch) #the trait matrix contains 2513 individuals values for 4 traits\n\ntable(sp.finch) #the species names vector contains 2513 individuals belonging to 12 species\ntable(ind.plot.finch) #the sites names vector contains 2513 individuals belonging to 6 sites (Island)\n@\n\nThe four traits correspond to three beak traits and one wing trait.\n\n\\begin{center}\n\\includegraphics[width=\\textwidth]{figs/darwinfinch.pdf}\n\\end{center}\n\n\\newpage\n\n\n%%%%%%%%%%%%%%%%\n\\section{Description of traits distributions}\n%%%%%%%%%%%%%%%%\n\n\\subsection{Plot the kernel density of traits}\n\nPlot the distribution of traits values for populations, species, sites and regional scales. First, let try the distribution for all populations of Darwin finches.\n\n<<dev='pdf'>>=\npar(mfrow=c(4,4), cex=0.5)\nplotDistri(traits.finch, sp.finch, ind.plot.finch, \n          ylim.cex=3, plot.ask=F, multipanel=F, leg=F)\n@\n\n\\newpage\n\nThen we can inverse the second and the third arguments to plot the distribution for all finches species. \n\n<<dev='pdf'>>=\npar(mfrow=c(4,4), cex=0.5)\nplotDistri(traits.finch, ind.plot.finch, sp.finch, \n           ylim.cex=8, plot.ask=F, multipanel=F, leg=F)\n@\n\nOnly one trait to plot using leg=T to plot the legend.\n\n <<dev='pdf',  fig.height=5>>=\npar(mfrow=c(2,3))\nplotDistri(as.matrix(traits.finch[,1]), ind.plot.finch, sp.finch, \n           ylim.cex=8, plot.ask=F, multipanel=F, leg=T, cex.leg=0.5)\n \n@\n\nIf we want to plot all the sites (regional distribution) or all the species: we can use the folowing code:\n<<dev='pdf'>>=\npar(mfrow=c(4,4), cex=0.5)\nplotDistri(traits.finch, rep(\"region\", times=dim(traits.finch)[1]), \n          sp.finch, ylim.cex=6, plot.ask=F, leg=F)\n@\n\n<<dev='pdf'>>=\nplotDistri(traits.finch, rep(\"toutes_sp\", times=dim(traits.finch)[1]),\n          ind.plot.finch, ylim.cex=3, plot.ask=F, cex.leg=0.5)\n@\n\nReset the default parameter\n<<dev='pdf'>>=\npar(old.par)\n@\n\\newpage\n\n%%%%%%%%%%%%%%%%\n\\section{Decomposition of variances}\n%%%%%%%%%%%%%%%%\n\n\\subsection{Decomposition of within/among species variances using rao diversity}\n\nThe Rao function computes α, γ and β -components for taxonomic, functional and/or phylogenetic diversity with:\n\n\\begin{center}\n$\\gamma = mean \\alpha + \\beta$\n\\end{center}\n\nWhere: \\gamma is the diversity of the regional pool, \\alpha is the diversity of the local community and \\beta is the turn over between local communities; diversity is estimated using the Rao quadratic entropy indices.\n\\\\\n\n\\textbf{Reference}: de Bello, F., Lavorel, S., Albert, C.H., Thuiller, W., Grigulis, K., Dolezal, J., Janecek, S. and Leps, J. (2011) Quantifying the relevance of intraspecific trait variability for functional diversity. Methods in Ecology and Evolution, 2, 163-174.\n\n\n\\subsubsection{Multitraits analysis}\nFirst, rao diversity can be calculated on the functionnal space (i.e. considering all traits together).\n\n<<>>=\n#create individuals community matrix\ncomm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))\n#create species community matrix\ncomm.sp<-table(sp.finch, ind.plot.finch)\nclass(comm.sp)<-\"matrix\"\n\ntraits.finch.sp<-apply( apply(traits.finch, 2, scale ), 2, \n                        function(x) tapply(x, sp.finch, mean, na.rm=T))\n\nmat.dist<-as.matrix(dist(traits.finch.sp))^2\n\nres.rao<-RaoRel(sample=as.matrix(comm.sp), \n                dfunc=mat.dist, dphyl=NULL, \n                weight=F, Jost=F, structure=NULL)\n\nwitRao<-res.rao$FD$Mean_Alpha  #overall within species variance\nbetRao<-res.rao$FD$Beta_add    #between species variance\ntotRao<-res.rao$FD$Gamma       #the total variance\n\nwitRao+betRao\ntotRao\n@\n\nNow let's take the abundance to calculate Rao diversity.\n\n<<>>=\nres.rao.w<-RaoRel(sample=as.matrix(comm.sp), \n                  dfunc=mat.dist, dphyl=NULL, \n                  weight=T, Jost=F, structure=NULL)\n\nwitRao.w<-res.rao.w$FD$Mean_Alpha  #overall within species variance\nbetRao.w<-res.rao.w$FD$Beta_add    #between species variance\ntotRao.w<-res.rao.w$FD$Gamma       #the total variance\n\nwitRao.w\nbetRao.w\n@\n\nPlot the results\n\n<<dev='pdf', fig.width=5, fig.height=5, fig.align='center'>>=\nbarplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)), \n        names.arg =c(\"abundance\" ,\"presence\"), \n        legend.text=c(\"within species\", \"between species\"), \n        ylab=\"Rao\", ylim=c(0,10))\n@\n\n\n\\subsubsection{Unitraits analysis}\nWe can also do this analysis for each trait separately. We need to replace (or exclude) NA values. For this example, we use the package mice to complete the data.\n\n<<results='hide'>>=\ncomm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))\n\nrequire(mice)\ntraits=traits.finch\nmice<-mice(traits.finch)\ntraits.finch.mice<-complete(mice)\n@\n\n\n<<>>=\n#Calculate the mean traits value by population using the mice dataset\ntraits.finch.mice.sp<-apply(apply(traits.finch.mice, 2, scale ), 2, \n                            function(x) tapply(x, sp.finch, mean, na.rm=T))\n\ntrait.rao.w<-list()\nwitRao.w.bytrait<-c()\nbetRao.w.bytrait<-c()\nfor(t in 1 : 4){\n  trait.rao.w[[t]]<-RaoRel(sample=as.matrix(comm.sp), \n                           dfunc=dist(traits.finch.mice.sp[,t]), \n                           dphyl=NULL, weight=T, Jost=F, structure=NULL)\n  witRao.w.bytrait<-c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)\n  betRao.w.bytrait<-c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)\n}\n\n@\n\nPlot the results by traits.\n\n<<dev='pdf', fig.width=5, fig.height=5>>=\nbarplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)), \n        names.arg = colnames(traits.finch),\n        legend.text=c(\"within species\", \"between species\"), \n        ylab=\"Rao\", ylim=c(0,1.5))\n@\n\n\n\\subsection{Decomposition of community trait response to environment into intraspecific trait variability, variability due to species turnover and their covariation.}\n\n\\textbf{Reference}: Leps, J., de Bello, F., Smilauer, P. and Dolezal, J. (2011) Community trait response to environment: disentangling species turnover vs intraspecific trait variability effects. Ecography, 34, 856-863.\n\n<<dev='pdf', fig.width=6, fig.height=6, fig.align='center'>>=\nres.decomp<-decompCTRE(traits=traits.finch, sp=sp.finch, \n                           ind.plot=ind.plot.finch, print=FALSE)\n\nbarplot(res.decomp)\n\npar(mfrow=c(2,2))\nbarplot(res.decomp, resume=F)\npar(mfrow=c(1,1))\n@\n\n\\newpage\n\n\\subsection{Decomposition of traits variances using nested factors}\n\nVariance partitioning across nested scales using the decomposition of variance on restricted maximum likelihood (REML) method (lme function).\n\\\\\n\n\\textbf{Reference}: Messier, J., McGill, B. and Lechowicz, M. (2010) How do traits vary across ecological scales? A case for trait-based ecology. Ecology Letters, 13, 838-848.\n\n<<results='hide'>>=\nvec<- seq(1,length(sp.finch)*2, by=2)\ngenus<-as.vector(unlist(strsplit(as.vector(sp.finch),\"_\"))[vec])\nfact<-cbind(genus=as.factor(genus),  \n            species=as.factor(as.vector(sp.finch)),\n            sites=as.factor(as.vector(ind.plot.finch)))\n\nres.partvar.finch<-partvar(traits=traits.finch, factors=fact)\n \nres.partvar.finch\n@\n\n\n<<dev='pdf', fig.width=4, fig.height=4, fig.align='center'>>=\npar(mfrow=c(2,2), mai=c(0.2,0.2,0.2,0.2))\ncolors<-c(rgb(102,167,0,  maxColorValue = 255), \n          rgb(185,210,0,  maxColorValue = 255), \n          rgb(98,174,255,  maxColorValue = 255),\n          rgb(158,30,240,  maxColorValue = 255))\n \npiePartvar(res.partvar.finch, col=colors)\n \npar(old.par)\nbarPartvar(res.partvar.finch, col=colors,\n            leg=TRUE)\n@\n\n\n\n\\newpage\n\n\\subsection{Plot the relation between populational trait means and sites traits means.}\n\nFor an example of utilisation see: Cornwell, W.K. and Ackerly, D.D., 2009. Community assembly and shifts in plant trait distributions across an environmental gradient in coastal California. Ecological Monographs 79, 109-126.\n\n<<dev='pdf'>>=\nplotSpPop(traits.finch, ind.plot.finch, sp.finch, silent=TRUE)\n@\n\nIf we change the value of the threshold (alpha=10\\% instead of 5\\% and the minimum individual to represent singificativity fixed to 3 instead of 10 by default) we can see some significant relationships.\n\n\\newpage\n\n<<dev='pdf'>>=\nplotSpPop(traits.finch, ind.plot.finch, sp.finch, \n           p.val=0.1,  min.ind.signif=3, silent=TRUE)\n@\n\n\\newpage\n\nFor a more simple figure, add the option resume=TRUE. Again if we change the value of the threshold (alpha=10\\% instead of 5\\% and the minimum individual to represent singificativity fixed to 3 instead of 10 by default) we can see some significant relationships.\n\n<<dev='pdf'>>=\nplotSpPop(traits.finch, ind.plot.finch, sp.finch,\n           silent=TRUE, resume=TRUE, col.pop=\"grey\")\nplotSpPop(traits.finch, ind.plot.finch, sp.finch, \n           silent=TRUE, resume=TRUE, col.pop=\"grey\", col.sp=\"black\")\nplotSpPop(traits.finch, ind.plot.finch, sp.finch, \n           silent=TRUE, resume=TRUE, col.pop=\"grey\", col.sp=\"black\", \n           p.val=0.1,  min.ind.signif=3)\n@\n\n\n\n\\newpage\n\n%%%%%%%%%%%%%%%%\n\\section{Test of community assembly}\n%%%%%%%%%%%%%%%%\n\n\\subsection{Ratio of variances: T-statistics}\n\nThe funcion Tstats computes observed T-statistics (T for Traits; Violle et al (2012)) as three ratios of variance, namely $T_IP/IC$, $T_IC/IR$ and $T_PC/PR$. This function can also return the distribution of these three statistics under null models.\n\\\\\n\n\\textbf{Reference}: Violle, C., Enquist, B.J., McGill, B.J., Jiang, L., Albert, C., Hulshof, C., Jung, V. and Messier, J. (2012) The return of the variance: intraspecific variability in community ecology. Trends in Ecology and Evolution, 27, 244-252.\n\n<<>>=\nres.finch<-Tstats(traits.finch, ind.plot=ind.plot.finch, sp=sp.finch,\n                  nperm=9, print=FALSE)\nres.finch\nattributes(res.finch)\nstr(res.finch)\n@\n\n\n\\subsubsection{S3 methods for class Tstats}\nTstats class is associated to S3 methods plot, barplot, print and summary\n\n<<dev='pdf', fig.width=6, fig.height=6, fig.align='center'>>=\nplot(res.finch)\nabline(v=0)\n@\n\nThere is multiple kind of representation avaible\n <<dev='pdf', fig.width=7.5, fig.height=7.5, fig.align='center'>>=\npar(mfrow=c(2,2))\nplot(res.finch, type=\"color_cond\")\nplot(res.finch, type=\"simple\")\nplot(res.finch, type=\"simple_sd\")\nplot(res.finch, type=\"barplot\")\npar(old.par)\n@\n\n\\newpage\n\n<<dev='pdf', fig.width=5, fig.height=5, fig.align='center'>>=\nbarplot(res.finch, ylim=c(0,3.5))\n@\n\n<<dev='pdf'>>=\nsummary(res.finch) #S3 summary method for class Tstats\n \nattributes(sum_Tstats(res.finch)) #An other mean to summarize Tstatistics\nhead(sum_Tstats(res.finch)$p.value, 10)\n@\n\n\\newpage\n\n\\subsubsection{Plot T-statistics correlations}\n\nWe can also see T-statistics correlations and theirs correlation with others variables (e.g. a gradient variable, or the species richness).\n\n<<dev='pdf'>>=\npar(mfrow=c(2,3))\nplotCorTstats(res.finch, plot.ask=FALSE, multipanel=F)\n@\n\nHere we plot T-statistics (in the standardized effect size SES form) in function of species richness by sites.\n\n<<dev='pdf'>>=\npar(mfrow=c(2,2))\nspecies.richness<-table(ind.plot.finch)\nplotSESvar(as.listofindex(list(res.finch)), species.richness, \n             multipanel=F)\n@\n\nSame plot with \\tt{resume=TRUE}.\n\n<<dev='pdf'>>=\npar(mfrow=c(2,2))\nplotSESvar(as.listofindex(list(res.finch)), species.richness, \n             resume=T, multipanel=F)\npar(mfrow=c(1,1))\n@\n\n\n\\newpage\n\\subsection{Others univariates metrics: function \\tt{ComIndex} and \\tt{ComIndexMulti}}\n\nThe function \\tt{ComIndex} allow to choose your own function (like mean, range, variance...) to calculate customize metrics. Here CVNND refers to the Coefficient of Variation of the Nearest Neighborhood Distance. ComIndexMulti do the same things for multivariate metrics. \n\n<<>>=\n#Define the funcions to calculate\nfunct<-c(\"mean(x, na.rm=T)\", \"kurtosis(x, na.rm=T)\",\n         \"max(x, na.rm=T) - min(x, na.rm=T)\", \"CVNND(x)\"  )\n\n#Test against the null model 2\nres.finch.sp_mn2<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch, \n                           nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,\n                           nperm=9, print=FALSE)\n \n#Test against the null model 2sp\nres.finch.sp_mn2sp<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch,\n                             nullmodels=rep(\"2sp\",4), ind.plot=ind.plot.finch, \n                             nperm=9, print=FALSE)\n@\n\nThese two functions allows to calcul index by sites for example using \\code{\"tapply(x, sites, mean)\"}.\n\n<<>>=\nfunct<-c(\"tapply(x, ind.plot.finch, function(x) mean(x, na.rm=T))\",\n         \"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=T))\",\n         \"tapply(x, ind.plot.finch, function(x) max(x, na.rm=T)-min(x, na.rm=T))\", \n         \"tapply(x, ind.plot.finch, function(x) CVNND(x))\"  )\n\n##Null model 1 is trivial for this function\n##because randomisation is within community only\n \nres.finch.ind_mn1<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch,\n                             nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,\n                             nperm=9, print=FALSE)\nres.finch.ind_mn2<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch, \n                             nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,\n                             nperm=9, print=FALSE)\n@\n\n\nWe can calcul index with or without intraspecific variance.\n\n<<>>=\n#Calcul of means by population (name_sp_site is a name of a population) \n#like in the function ComIndex and determine the site for each population (sites_bypop)\n \nname_sp_sites=paste(sp.finch, ind.plot.finch,sep=\"_\")\ntraits.by.pop<-apply(traits.finch, 2 , \n                     function (x) tapply(x, name_sp_sites, mean , na.rm=T))\n\nsites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep=\"_\"), split=\"_\"), \n                    function(x) x[3])\n\n#We use the precedent list of function \"funct\"\nfunct.withIV<-funct\n\nfact<-unlist(sites_bypop)\nfunct.withoutIV<-c(\"tapply(x, fact, function(x) mean(x, na.rm=T))\",\n                   \"tapply(x, fact, function(x) kurtosis(x, na.rm=T))\",\n                   \"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))\", \n                   \"tapply(x, fact, function(x) CVNND(x))\")\n\n\nres.finch.withIV<-ComIndex(traits=traits.finch, index=funct.withIV,\n                             sp=sp.finch, nullmodels=c(2,2,2,2),\n                             ind.plot=ind.plot.finch, nperm=9, print=FALSE)\n\nres.finch.withoutIV<-ComIndex(traits=traits.finch, index=funct.withoutIV, \n                             sp=sp.finch, nullmodels=rep(\"2sp\",4), \n                             ind.plot=ind.plot.finch, nperm=9, print=FALSE)\n@\n\n\n\n\\subsubsection{S3 methods for class ComIndex and ComIndexMulti}\nTstats class is associated to S3 methods plot, print and summary\n\n<<fig.width=5, fig.height=5>>=\nres.finch.withIV\nsummary(res.finch.withIV)\nsummary(res.finch.withoutIV)\nplot(res.finch.withIV)\nplot(res.finch.withoutIV)\n@\n\n\n\\subsubsection{Plot Tstats and other uni/multivariates metrics together}\nThe class listofindex permit to stock differents metrics computed using Tstats, ComIndex and ComIndexMulti and compared to different null model. To do that we can use the Standardized Effect Size (ses) define as : \n\n\\begin{center}\n$SES = (I_obs – I_sim) / \\delta_{sim}$\n\\end{center}\n\nwhere $I_obs$ is the observed value, $I_sim$ the mean of values calculated from the null model and $\\delta_{sim}$ the standard deviation of these simulated values.\n\n\n<<dev='pdf', eval=FALSE>>=\nlist.ind1<-list(res.finch.withIV, res.finch.withoutIV)\nindex.list1<-as.listofindex(list.ind1)\n\nplot(index.list1)\n@\n\n<<>>=\nlist.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)\nnamesindex.i.l1=c(\"mean\", \"kurtosis\", \"range\", \"CVNND\",\n                  \"mean.pop\", \"kurtosis.pop\", \"range.pop\", \"CVNND.pop\", \n                  \"T_IP.IC\", \"T_IC.IR\", \"T_PC.PR\")\n\ni.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)                                 \n\nclass(i.l1)\n@\n\nThe plot type \\tt{bytraits} allows to plot all SES traits values for all sites or all traits\n<<dev='pdf'>>=\npar(mfrow=c(2,3))\nplot(i.l1,type=\"bytraits\", bysite=TRUE)\n\npar(mfrow=c(2,2))\nplot(i.l1,type=\"bytraits\")\npar(mfrow=c(1,1))\n@\n\nThe other plot type are the same as plot.Tstats\n\n<<dev='pdf'>>=\npar(mfrow=c(2,2))\nplot(i.l1)\nplot(i.l1,type=\"simple_range\")\nplot(i.l1,type=\"normal\")\nplot(i.l1,type=\"barplot\")\npar(mfrow=c(1,1))\n@\n\n\n\n\\newpage\n\n\\subsection{Multivariates index}\n\nFor most multivariate functions we need to replace (or exclude) NA values. For this example, we use the package mice to complete the data.\n\n<<results='hide', eval=FALSE>>=\ncomm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))\n\nrequire(mice)\ntraits=traits.finch\nmice<-mice(traits.finch)\ntraits.finch.mice<-complete(mice)\n@\n\nA simple example to illustrate the concept of the function \\tt{ComIndexMulti}\n\n<<>>=\nn_sp_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep=\"_\")) \nres.sum.1<-ComIndexMulti(traits.finch, \n                           index=c(\"sum(scale(x), na.rm=T)\", \"sum(x, na.rm=T)\"), \n                           by.factor=n_sp_plot, nullmodels=c(2,2), \n                           ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)\n\nattributes(ses.listofindex(as.listofindex(list(res.sum.1))))\n@\n\n\\newpage\nA more interesting example using the function \\tt{hypervolume} from the package ... hypervolume.  We show here several results which differe in there factor that delimit the group to calculate different hypervolume (argument \"byfactor\"). \n\nFirst, let's try the hypervolume function one finch data.\n<<dev='pdf'>>=\nhv<-hypervolume(traits.finch.mice, \n                reps=100,bandwidth=0.2, \n                verbose=F, warnings=F)\nplot(hv)\n@\n\nNow, we can do the same analysis for each species.\n\n<<dev='pdf'>>=\nhv.list<-new(\"HypervolumeList\")\nhv.list2<-list()\n\nfor(i in 1: length(table(sp.finch))) {\n  hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ], \n                reps=1000,bandwidth=0.2, \n                verbose=F, warnings=F)\n}\n\nhv.list@HVList<-hv.list2\nrequire(adegenet)\ncolorhv<-transp(funky(nlevels(sp.finch)), alpha=0.8)\n\nplot(hv.list, colors=colorhv, darkfactor=0.8)\nplot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 200, cex.random =1)\n \nsummary(hv.list)\n \n@\n\nThe standard example of the hypervolume package also use finch data but at the species level.\n\n<<dev='pdf'>>=\ndemo('finch', package='hypervolume')\n@\n\n\\tt{ComIndexMulti} takes the same arguments as \\tt{ComIndex} and an argument by factor to apply the index on different factors.\n\n<<result='hide'>>=\n#all individual are put in the same group: calcul the hypervolume without by.factor\nhv.1<-ComIndexMulti(traits.finch.mice, \n                          index=c(\"as.numeric(try(hypervolume(na.omit(x), reps=100, \n                                  bandwidth=0.2, verbose=F, warnings=F)@Volume))\"),\n                          by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),\n                          ind.plot=ind.plot.finch, nperm=9, sp=sp.finch) \n\nhv.2<-ComIndexMulti(traits.finch.mice, \n                          index=c(\"as.numeric(try(hypervolume(na.omit(x), reps=100, \n                                  bandwidth=0.2, verbose=F, warnings=F)@Volume))\"), \n                          by.factor=n_sp_plot, nullmodels=c(2,2), \n                          ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)\n\nhv.3<-ComIndexMulti(traits.finch.mice, \n                          index=c(\"as.numeric(try(hypervolume(na.omit(x), reps=100,\n                                  bandwidth=0.2, verbose=F, warnings=F)@Volume))\"), \n                          by.factor=ind.plot.finch, nullmodels=c(2,2), \n                          ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)\n\nhv.4<-ComIndexMulti(traits.finch.mice, \n                          index=c(\"as.numeric(try(hypervolume(na.omit(x), reps=100, \n                                  bandwidth=0.2, verbose=F, warnings=F)@Volume))\"), \n                          by.factor=sp.finch, nullmodels=c(2,2), \n                          ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)\n\nlist.ind.multi<-as.listofindex(list(hv.2, hv.3, hv.4))\n\nses.list.multi<-ses.listofindex(list.ind.multi)\n@\n\n<<dev='pdf', fig.width=4, fig.height=4>>=\nplot(list.ind.multi)\nplot(list.ind.multi, xlim=c(-200,20))\n@\n\nCompare hypervolume to Villéger metrics convex hull.\n\n<<>>=\nrequire(\"geometry\")\n \nFA<-as.character(\"FA\")\nfunct<-c(\"round(convhulln(x,FA)$vol,6)\")\n\n##Null model 1 is trivial for this function\n##because randomisation is within community only\nFdis.finch<-ComIndexMulti(traits.finch.mice, \n                          index=funct,\n                          by.factor=ind.plot.finch, nullmodels=c(2,2),\n                          ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)\n\nlist.ind.multi2<-as.listofindex(list(hv.3, Fdis.finch))\n\nses.list.multi2<-ses.listofindex(list.ind.multi2)\n@\n\n<<dev='pdf', fig.width=4, fig.height=4>>=\nplot(list.ind.multi2)\n@\n\n\\section{Others graphics functions}\n\nUsing rasterVis to obtain more color schemes. \n<<echo=FALSE>>=\nrequire(rasterVis)\n# Custom theme (from rasterVis package)\nmy.theme <- BuRdTheme()\n# Customize the colorkey\nmy.ckey <- list(col=my.theme$regions$col)\n@\n\nPlot the p-value or the ses values using the function \\tt{levelplot}.\n\n<<dev='pdf'>>=\nlevelplot(t(sum_Tstats(res.finch)$p.value), \n          colorkey=my.ckey, par.settings=my.theme,border=\"black\")\n@\n\n\n<<dev='pdf'>>=\nlevelplot(t(ses(res.finch$Tstats$T_IP.IC, res.finch$Tstats$T_IP.IC_nm)$ses), \n          colorkey=my.ckey, par.settings=my.theme,border=\"black\")\n\nlevelplot(cbind(t(ses(res.finch$Tstats$T_IP.IC, res.finch$Tstats$T_IP.IC_nm)$ses), \n                t(ses(res.finch$Tstats$T_IC.IR, res.finch$Tstats$T_IP.IC_nm)$ses),\n                t(ses(res.finch$Tstats$T_PC.PR, res.finch$Tstats$T_IP.IC_nm)$ses))\n          , colorkey=my.ckey, par.settings=my.theme,border=\"black\")\n@\n\nAn other example using \\tt{ses.listofindex}. The first plot represent \"ses\" values and the second one the result of a test with H0: observed index value are greater than what we can expect using the null model (alpha=2.5\\%).\n\n<<dev='pdf'>>=\n\nses.list<-ses.listofindex(i.l1)\n\nlevelplot(t(rbind(ses.list[[1]]$ses, ses.list[[2]]$ses, \n                  ses.list[[3]]$ses,  ses.list[[4]]$ses)),\n          colorkey=my.ckey, par.settings=my.theme,border=\"black\")\n\nlevelplot(t(rbind(ses.list[[1]]$ses>ses.list[[1]]$ses.sup, \n                  ses.list[[2]]$ses>ses.list[[2]]$ses.sup,\n                  ses.list[[3]]$ses>ses.list[[3]]$ses.sup,\n                  ses.list[[4]]$ses>ses.list[[4]]$ses.sup)),\n          colorkey=my.ckey, par.settings=my.theme,border=\"black\")\n \n\n@\n\nCompare metrics calculate on individual against metrics calculate after populationnal meaning\n<<dev='pdf'>>=\nses.ind<-t(rbind(ses.list[[1]]$ses, \n           ses.list[[2]]$ses,\n           ses.list[[3]]$ses,\n           ses.list[[4]]$ses))\n\nses.sp<-t(rbind(ses.list[[5]]$ses, \n          ses.list[[6]]$ses,\n          ses.list[[7]]$ses,\n          ses.list[[8]]$ses))\n\nlevelplot(ses.ind, colorkey=my.ckey, \n          par.settings=my.theme,border=\"black\")\nlevelplot(ses.sp, colorkey=my.ckey, \n          par.settings=my.theme,border=\"black\")\n@\n\n\\section{Conclusion}\nTo finish, we can do a multivariate analysis of the metrics obtain during this tutorial. Analysis dudi 1 put together all traits by meaning the SES values for each metrics in each sites whereas analysis dudi 2 analyse all combination of traits / sites / metrics\n\n<<dev='pdf'>>=\nlibrary(ade4)\n \n matfordudi<-matrix(nrow=length(colMeans(ses.list[[1]]$ses)), ncol=length(names(ses.list)))\n for(i in 1: length(names(ses.list))){\n   matfordudi[,i]<-colMeans(ses.list[[i]]$ses)\n }\n colnames(matfordudi)<-names(ses.list)\n rownames(matfordudi)<-colnames(traits.finch)\n \n matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))\n for(i in 1: length(names(ses.list))){\n   matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)\n }\n colnames(matfordudi2)<-names(ses.list)\n \n#Use mice for the purpose of this example\nmatfordudi<-complete(mice(matfordudi))\nmatfordudi2<-complete(mice(matfordudi2))\n  \nres.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2) \ns.corcircle(res.dudi$co)\ns.label(res.dudi$li, add.plot=T, clabel = 0, pch=16)\ns.label(res.dudi$li+0.05, add.plot=T, boxes=F)\n \nres.dudi2<-dudi.pca(matfordudi2, scan=F, nf=2) \nscatter(res.dudi2)\ns.corcircle(res.dudi2$co)\ns.class(res.dudi2$li, as.factor(c(rep(\"WingL\",6), rep(\"BeakH\",6), rep(\"UBeakL\",6), rep(\"N.UBkL\",6))), col=funky(4))\ns.class(res.dudi2$li, as.factor(rep(c(\"DMaj\",\"EspHd\",\"FlorChrl\",\"GnovTwr\",\"MrchBndl\",\"SCruInde\"),4 )), col=funky(6))\n@\n\n\\section{Conclusion}\n\\section{Acknowledgment}\n\n\\end{document}\n\n\n\n\n\n\n\n<<>>=\ncomm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))\n \nfunct<-c(\"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist\",\n         \"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst\"  )\nres.finch.sp_mn2<-ComIndex(traits=traits.finch.mice, index=funct, sp=sp.finch, \n                            nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,\n                            nperm=9, print=FALSE)\n\nres.finch.sp_mn3<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch,\n                            nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, \n                            nperm=9, print=FALSE)\n@\n\n\\newpage\nWe can represent Standardized Effect Size (ses) using the function \\tt{plot(as.listofindex(list1, list2, list3))}\n<<dev='pdf'>>=\nlist.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)\nindex.list2<-as.listofindex(list.ind2)\n\nplot(index.list2)\n@\n\n\n",
    "created" : 1409147582210.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1090857425",
    "id" : "E5776457",
    "lastKnownWriteTime" : 1409148141,
    "path" : "C:/Users/taudiere/Desktop/cati/pkg/cati/vignettes/vignette.Rnw",
    "project_path" : "vignettes/vignette.Rnw",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "sweave"
}