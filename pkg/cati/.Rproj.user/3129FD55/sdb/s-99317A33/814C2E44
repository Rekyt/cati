{
    "contents" : "\\documentclass[12pt]{article}\n\\usepackage[utf8]{inputenc}\n\\usepackage{graphicx}\n\\usepackage{color, colortbl}\n\\definecolor{blue1}{RGB}{0,102,204}\n\\usepackage[colorlinks = true,linkcolor = blue, citecolor = blue, urlcolor = blue]{hyperref}\n\\usepackage{array}\n\\usepackage[english]{babel}\n\\usepackage{amsfonts}\n\\usepackage{url}\n\\usepackage{pdflscape}\n\\usepackage{bm}\n\\usepackage[margin = 1.5cm]{geometry}\n\\usepackage[affil-it]{authblk}\n\\usepackage{hyperref}\n\\usepackage{multirow}\n\\usepackage[labelfont = bf]{caption}\n\n\\setlength{\\doublerulesep}{0pt}\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\code}[1]{{{\\tt #1}}}\n\n\\let\\oldtabular=\\tabular\n\\def\\tabular{\\small\\oldtabular}\n\n\\title{Appendix: Test the T-statistics using simulations: robustness and lack of bias in the function}\n\\author{Adrien Taudiere\\thanks{\\texttt{adrien.taudiere@cefe.cnrs.fr}} and Cyrille Violle}\n\n\\affil{{\\footnotesize CEFE - Centre d'Ecologie Fonctionnelle et Evolutive, Montpellier: France}}\n\n\\date{\\today}\n\n\\sloppy\n\\hyphenpenalty 10000\n\n\n\n%%%%%%% Allow a subsubsub section  %%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\setcounter{secnumdepth}{4}\n\\setcounter{tocdepth}{4}\n\\makeatletter\n\\newcounter {subsubsubsection}[subsubsection]\n\\renewcommand\\thesubsubsubsection{\\thesubsubsection .\\@arabic\\c@subsubsubsection}\n\\newcommand\\subsubsubsection{\\@startsection{subsubsubsection}{4}{\\z@}%\n          {-3.25ex\\@plus -1ex \\@minus -.2ex}%\n          {1.5ex \\@plus .2ex}%\n          {\\normalfont\\normalsize\\bfseries}}\n\\renewcommand\\paragraph{\\@startsection{paragraph}{5}{\\z@}%\n         {3.25ex \\@plus1ex \\@minus.2ex}%\n         {-1em}%\n         {\\normalfont\\normalsize\\bfseries}}\n\\renewcommand\\subparagraph{\\@startsection{subparagraph}{6}{\\parindent}%\n          {3.25ex \\@plus1ex \\@minus .2ex}%\n          {-1em}%\n          {\\normalfont\\normalsize\\bfseries}}\n\\newcommand*\\l@subsubsubsection{\\@dottedtocline{4}{10.0em}{4.1em}}\n\\renewcommand*\\l@paragraph{\\@dottedtocline{5}{10em}{5em}}\n\\renewcommand*\\l@subparagraph{\\@dottedtocline{6}{12em}{6em}}\n\\newcommand*{\\subsubsubsectionmark}[1]{}\n\\makeatother\n\n\\usepackage{hyperref}\n\n\\makeatletter\n\\def\\toclevel@subsubsubsection{4}\n\\def\\toclevel@paragraph{5}\n\\def\\toclevel@subparagraph{6}\n\\makeatother\n\n\n\\definecolor{ligthgray}{RGB}{218, 218, 218}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\begin{document}\n\\selectlanguage{english}\n<<knitr_parameters, include = FALSE>>= \nlibrary(knitr)\nopts_chunk$set(fig.keep = 'high', dev = 'pdf', fig.width = 7, fig.height = 7, \n               fig.align = 'center', tidy = FALSE, warning = FALSE, size = \"small\", \n               fig.show = \"hold\", cache =  TRUE)\noptions(digit = 2)\na <- Sys.time()\n@\n\n<<crop-hook, include = FALSE>>=\nknit_hooks$set(crop=hook_pdfcrop)\n@\n\n\\maketitle\n\n\\begin{abstract}\n\n\\end{abstract}\n\n\n\\textbf{Key words:}\nFunctional space, functional structure, community assembly, ecological niche, environmental filter,\nindividual differences, intraspecific variation, null model, trait, variance decomposition\n\n\n\\vfill\n\\begin{center}\n\\textbf{To read a summary of this appendix, see directly section Summary \\ref{sect:summary}.}\n\\textbf{An up to date version of the cati tutorial is available \\href{https://github.com/adrientaudiere/cati/blob/Package-cati/tutorials/vignette_Darwin_finches/vignette.pdf}{here}.}\n\\end{center}\n\n\\newpage\n\\tableofcontents\n\\newpage\n\n\n\\section{Introduction}\n This document shows the lack of bias in the functions \\texttt{Tstats}, \\texttt{partvar}, \\texttt{decompCTRE} and a test of robustness for the T-statistics.\nThis report was created on \\Sexpr{a}. Start directly by the summary section if you want condensate results of this document.\n\n\\subsection{R requirements}\n\nFirst we need to install and load the package. \n<<R_requirement, results = 'hide', message = FALSE>>= \n# install.packages(\"cati\", repos = \"http://cran.us.r-project.org\", dependencies = TRUE)\nlibrary(\"cati\")\nlibrary(\"xtable\")\n\n# Save the graphical parameter\noldpar <- par(no.readonly = TRUE)\n@\n\n  \\subsection{System and session informations}\n  This document was created with \\Sexpr{sessionInfo()[[1]]$version.string} on \\Sexpr{Sys.info()[1]}. See below for more information. The speed computations of \\texttt{cati} main functions are develop  in the \\href{https://github.com/adrientaudiere/cati/blob/Package-cati/tutorials/vignette_Darwin_finches/vignette.pdf}{cati tutorial}.\n  \n<<sessionInfo>>=\nsessionInfo()\n@\n\n  \\subsection {T-statistics and associated null models}\n  \n  \n\\begin{landscape}\n\\begin{table}[h]\n\\caption[T-statistics and associated null models]{The four types of null models implemented in cati, their related null and alternative hypotheses, randomization design and associated T-statistics}\n\\begin{tabular}{m{2.7cm} m{5.3cm} m{6.3cm} m{6.2cm} m{2.5cm}}\n\n& Null hypothesis & Randomization procedure & Unilateral alternative hypothesis & T-statistics  \\tabularnewline\n\\hline \\hline \\hline\n\nlocal & There is no internal filtering: the distribution of trait values of all individuals within a given community does not depend on species identity & Randomization of individual trait values within the community& Internal filtering significantly impacts the distribution of trait values within a given community: two individuals belonging to a population have more similar trait values than two individuals randomly-drawn in the community & $T_{IP/IC}$   \\tabularnewline\n\n\\hline\n\nregional.ind  & There is no external filtering: the distribution of trait values of individuals within a given community is a random drawing from the regional pool & Draw without replacement of individual trait values belonging to the regional pool (keeping the actual number of individuals in each community) & Two individuals belonging to a community have more similar trait values than two individuals randomly-drawn in the regional pool & $T_{IC/IR}$\\tabularnewline\n\n\\hline\n\nregional.pop \\& regional.pop.prab & There is no species-based external filtering: the distribution of mean trait values of species within a given community is a random draw from the regional pool & (i) Assignment of a population-level value to each individual and (ii) Draw without replacement of population-level trait values belonging to the regional pool (keeping the actual number of individuals in each community (regional.pop) or not (regional.pop .prab). & Two individuals belonging to a community have more similar population-based trait values than two individuals randomly-drawn in the regional pool with (regional.pop) or without (regional.pop .prab) taking abundance into account. & $T_{PC/PR}$  (regional.pop) \\tabularnewline\n\n\n\\end{tabular}\n\\end{table}\n\\end{landscape}\n\n\n  \n  \n  \n  \n  \n  \n  \\subsection{Simulations parameters}\n\nHere we define the number of permutations for the entire analysis. \n\n<<Simul_parameter_1>>= \n#Number of permutations for the analysis with no filter\nnpermut <- 3\n\n#Number of permutations for each parameters values in the analysis with filter(s)\nN_repet_Param <- 2\n\n#Number of values for each parameters\nnb_param_val <- 3\n@\n\n<<Simul_parameter_2>>= \n#Total number of individuals\nNind <- 1000\n\n#Ten communities named A, B, C ... J\ncom <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\") \nNcom <- length(com)\n\n#Number of species (if Nsp > 676 you need to defined additional name)\nNsp <- 200\nsp <- paste(\"sp\", paste(sort(rep(LETTERS, 26)), rep(LETTERS, 26),  sep=\"\")\n                  [seq(1:Nsp)], sep =\"_\")\nNsp <- length(sp)\n\n#Parameter of the log normal distribution for species abundances \n#distribution within communities\nsdlog = 1.5\n@\n\nWe use toys models of \\Sexpr{Nind} individuals belonging to \\Sexpr{Nsp} species occuring in \\Sexpr{Ncom} communities (sites). Each community contains \\Sexpr{Nind / Ncom} individuals and species abundances in each community are defined following a lognormal distribution of mean 0 and standard deviation \\texttt{sdlog} of \\Sexpr{sdlog}.\nFigure \\ref{fig:General_outline} depicts the general outline of the next fourth sections dealing with the statistical test of T-statistics from Violle \\textit{et al.} (2012).\n\n\\begin{figure}[h]\n\\centering\n\\hspace*{-0.8cm}\n\\vspace*{-0.5cm}\n    \\makebox[\\linewidth]{\n        \\includegraphics[width=0.9\\linewidth]{general_outline.pdf}\n    }\n\\caption[General outline of the simulation concerning the Tstatistics]{General outline of the simulation concerning the Tstatistics. (Continue on next page) }\n\\label{fig:General_outline}\n\\end{figure}\n\n\\clearpage\n\\textbf{Figure 1 (continue):} The \\textbf{absence of filtering} is used to test the type I error (alpha-error) of the three Tstatistics. In the absence of filtering the expected pattern is a random distribution of individual traits values into species and communities. \\textbf{Internal filter} includes all of the assembly processes internal to the community. The alternative hypothesis (thus the expected pattern) of habitat filtering is the non-overlap between species traits distributions measured by the ratio $T_{IP/IC}$. We modulate the strength of filter in the simulation using the variance of species traits distributions and the distance between species traits means. \\textbf{External filter} includes all of the assembly processes external to the community. In this document we specifically treat the case of an environnemental gradient influencing the individual traits values. Thus the expected pattern a non-overlap between communities traits distributions measured by the ratio $T_{IC/IR}$ and its populationnal counterparts. We modulate the strength of external filter in the simulation using the variance of communities traits distributions and the range of communities traits means (the \"extent\" of the environnemental gradient). Finally, we add external filter to internal filter by adding to each individual values of the internal filter simulation a number depending on the community distribution.\n\\vspace*{1cm}\n\n\n\n\n\\cleardoublepage\n\n\\section{No filter: calculation of error}\n \\subsection {Randomization outline}\n\nTo calculate the \\textbf{alpha error} (\\textit{i.e.} the probability of rejected the null hypothesis H0 while H0 is true), we draw \\Sexpr{npermut} random traits matrix irrespective of the species and community attributes of each individuals.\n\n<<No_filter, results = 'hide'>>= \n#Start simulation \nres.simu1 <- list() ; res.simu1.pval <- list()\n\nfor(n in 1:npermut){#for each permutation\n\n ex.traits1 <- array(NA, dim = c(Nind, 2))\n colnames(ex.traits1) <- paste(\"trait\", c(\"a\", \"b\"), sep = \" \")\n\n #trait a: normal distribution\n ex.traits1[, 1] <- rnorm(Nind, rlnorm(Nind, 0, 1), rlnorm(Nind, 0, 1))\n\n #trait b: uniform distribution\n ex.traits1[, 2] <- runif(Nind)\n\n # Draw communities using lognormal distribution of abundances \n ex.sp1 <- c()\n ex.com1 <- matrix(0, nrow = Ncom, ncol = Nsp)\n for(c in 1: Ncom){\n  ex.com.interm <- table(sample(sp, size = Nind / Ncom, prob = rlnorm(Nsp, 0, sdlog), \n                                replace = T))\n \n  ex.com1[c, sp %in% names(ex.com.interm)] <- ex.com.interm\n \n  ex.sp1 <- c(ex.sp1, rep(sp, times = ex.com1[c,]))\n }\n ex.indplot1 <- sort(as.factor(rep(com, 100)))\n\n #Stock the results\n res.simu1[[n]] <- Tstats(ex.traits1, ex.indplot1, ex.sp1)\n res.simu1.pval[[n]] <- sum_Tstats(res.simu1[[n]], type = \"p.value\")\n print(paste(\"---\", round(n/npermut, 2) * 100, \"%\", sep = \" \"))\n}#End of simulations\n@\n\n  \\subsection {Results for simulations with no filtering}\nLet's see the result for one typical randomization. We can plot the distribution of traits within species and/or communities thanks to the function \\texttt{plotDistri} (Fig. \\ref{fig:No_Filter_plots}). We can also plot the result of the T-statistics for one of the \\Sexpr{npermut} permutations (Fig. \\ref{fig:No_Filter_plots_Tstats}).\n\n<<No_Filter_plots, fig.cap = \"Distribution of traits for one randomization without filter: (a) Communities trait distributions for the trait a (normal distribution); (b) Communities trait distributions for the trait b (uniform distribution); (c) Species trait distributions for the trait a; (d) Species trait distributions for the trait b\", crop = TRUE>>= \npar(mfrow=c(2, 2))\nplotDistri(ex.traits1, rep(\"all_sp\", times = dim(ex.traits1)[1]), ex.indplot1, \n           plot.ask = F, multipanel = F, leg =c(T, F), main = c(\"a\", \"b\"))\nplotDistri(ex.traits1, rep(\"region\", times = dim(ex.traits1)[1]), ex.sp1, \n           plot.ask = F, multipanel = F, leg =c(T, F), main = c(\"c\", \"d\"))\npar(mfrow=c(1, 1))\n@\n\n<<No_Filter_plots_Tstats, fig.height = 4, fig.cap = \"Results of T-statistics for one randomization without filter: $T_{IP/IC}$ in red, $T_{IC/IR}$ in purple and $T_{PC/PR}$ in green.\", crop = TRUE>>= \nplot(res.simu1[[1]])\n@\n\n \\subsection {Assess the statistical type I error of local T-statistics}\n \nHere we call local p-values the p-values corresponding to one indice for one trait in one community \\footnote{In contrast with global statistics which aggregate the communities values metrics.}. Now lets plot the results as the ordered p.value for each T-statistics and each traits (Fig. \\ref{fig:No_Filter_results})). In that case we have \\Sexpr{Ncom*2} p-values \\footnote{\\Sexpr{Ncom} p-value, corresponding to \\Sexpr{Ncom} communities, multiply by 2 because we are doing a bilateral test} by T-statistics by traits for each permutation. Using the defined parameters, we plot \\Sexpr{Ncom*2*npermut} points by T-statistic by trait (\\Sexpr{Ncom*2} p.value multiply by \\Sexpr{npermut} permutation). \n\nThe alpha error on the figure are the proportion of p.value which are inferior to 0.025 (because we are doing a bilateral test).\n\n<<No_Filter_results, fig.cap = \"Local alpha errors: local p.values are log-transformed and ordered before plotting. The black line represent the value of 0.025. Consequently, p-values under this line are false-positive cases. Alpha-error is the proportion of this false-positive cases. Norm: normal distribution, Uni: uniforme distribution.\", crop = TRUE>>= \npar(mfrow = c(3, 2))\npar(mar = c(3, 3.5, 2, 0.2))\n\nxx <- log10(sort(unlist(lapply(res.simu1.pval, function(x) x[1:20, 1]))))\nplot(xx, type = \"l\", main = \"T_IP.IC norm\", ylab = NA , xlab = NA)\nabline(h = log10(0.025)) \nnbre_alpha_error_norm_loc_Tipic <- round((sum(xx < log10(0.025)) +1 ) / (length(xx)+1), 5)\ntext(0, -0.3, labels = paste(\"alpha error\", nbre_alpha_error_norm_loc_Tipic, sep = \" = \"), \n     pos = 4)\nmtext(\"log10 pvalue\", 2, line = 2)\n\nxx <- log10(sort(unlist(lapply(res.simu1.pval, function(x) x[1:20, 2]))))\nplot(xx, type = \"l\", main = \"T_IP.IC Uni\", ylab = NA, xlab = NA)\nabline(h = log10(0.025))\nnbre_alpha_error_uni_loc_Tipic <- round((sum(xx < log10(0.025)) +1 ) / (length(xx)+1), 5)\ntext(0, -0.3, labels = paste(\"alpha error\", nbre_alpha_error_uni_loc_Tipic, sep = \" = \"), \n     pos = 4)\n\nxx <- log10(sort(unlist(lapply(res.simu1.pval, function(x) x[21:40, 1]))))\nplot(xx, type = \"l\", main = \"T_IC.IR norm\", ylab = NA, xlab = NA)\nabline(h = log10(0.025)) \nnbre_alpha_error_norm_loc_Ticir <- round((sum(xx < log10(0.025)) +1 ) / (length(xx)+1), 5)\ntext(0, -0.3, labels = paste(\"alpha error\", nbre_alpha_error_norm_loc_Ticir, sep = \" = \"),\n     pos = 4)\nmtext(\"log10 pvalue\", 2, line = 2)\n\nxx <- log10(sort(unlist(lapply(res.simu1.pval, function(x) x[21:40, 2]))))\nplot(xx, type = \"l\", main = \"T_IC.IR Uni\", ylab = NA, xlab = NA)\nabline(h = log10(0.025)) \nnbre_alpha_error_uni_loc_Ticir <- round((sum(xx < log10(0.025)) +1 ) / (length(xx)+1), 5)\ntext(0, -0.3, labels = paste(\"alpha error\", nbre_alpha_error_uni_loc_Ticir, sep = \" = \"),\n     pos = 4)\n\nxx <- log10(sort(unlist(lapply(res.simu1.pval, function(x) x[41:60, 1]))))\nplot(xx, type = \"l\", main = \"T_PC.PR norm\", ylab = NA, xlab = NA)\nabline(h = log10(0.025)) \nnbre_alpha_error_norm_loc_Tpcpr <- round((sum(xx < log10(0.025)) +1 ) / (length(xx)+1), 5)\ntext(0, -0.3, labels = paste(\"alpha error\", nbre_alpha_error_norm_loc_Tpcpr, sep = \" = \"),\n     pos = 4)\nmtext(\"log10 pvalue\", 2, line = 2)\nmtext(\"rank\", 1, line = 2)\n\nxx <- log10(sort(unlist(lapply(res.simu1.pval, function(x) x[41:60, 2]))))\nplot(xx, type = \"l\", main = \"T_PC.PR Uni\", ylab = NA, xlab = NA)\nabline(h = log10(0.025)) \nnbre_alpha_error_uni_loc_Tpcpr <- round((sum(xx < log10(0.025)) +1 ) / (length(xx)+1), 5)\ntext(0, -0.3, labels = paste(\"alpha error\", nbre_alpha_error_uni_loc_Tpcpr, sep = \" = \"),\n     pos = 4)\nmtext(\"rank\", 1, line = 2)\n\npar(oldpar)\n@\n\n \\subsection {Assess the statistical type I error of global T-statistics}\n\nIn contrast with local p-values, we call global p-values the p-values corresponding to one indice for one trait across all the communities. \n\nWe test for the \\textbf{alpha error} of global p-values in the same way as local p-values. We plot the ordered mean \\footnote{mean of the ten communities values} standardized effect size (SES)\\foonote{compute as $(the observed value - the mean value among simulation) / the standard error among simulations$} and the 95\\% confidence interval in grey. \n\nIn that case we have one p-value by T-statistics by traits for each of the \\Sexpr{npermut} permutations.\n\n<<No_filter_summary>>= \nmeanSES.1.T_IP.IC.distriNorm <- lapply(res.simu1, function(x) \n          mean(ses.listofindex(as.listofindex(x))\n           $index_1_1$ses[,1], na.rm = T))\n\nmeanSES.1.T_IC.IR.distriNorm <- lapply(res.simu1, function(x) \n          mean(ses.listofindex(as.listofindex(x))\n           $index_1_2$ses[,1], na.rm = T))\n\nmeanSES.1.T_PC.PR.distriNorm <- lapply(res.simu1, function(x) \n          mean(ses.listofindex(as.listofindex(x))\n           $index_1_3$ses[,1], na.rm = T))\n\nmeanSES.1.T_IP.IC.distriUni <- lapply(res.simu1, function(x) \n          mean(ses.listofindex(as.listofindex(x))\n           $index_1_1$ses[,2], na.rm = T))\n\nmeanSES.1.T_IC.IR.distriUni <- lapply(res.simu1, function(x) \n          mean(ses.listofindex(as.listofindex(x))$\n            index_1_2$ses[,2], na.rm = T))\n\nmeanSES.1.T_PC.PR.distriUni <- lapply(res.simu1, function(x) \n          mean(ses.listofindex(as.listofindex(x))\n           $index_1_3$ses[,2], na.rm = T))\n@\n\nNow, plot the result as ordered SES values (Fig. \\ref{fig:No_filter_summary_plot}). Horizontal lines represent the confidence area at 95\\%.\n \n<<No_filter_summary_plot, fig.cap = \"Global alpha errors: global Standardized Effect Size are ordered before plotting. The grey area represent the confidence interval at 2.5 percent on each side. Consequently, p-values outside this area are false-positive cases. Alpha-error is the proportion of this false-positive cases. Norm: normal distribution, Uni: uniforme distribution.\", crop = TRUE>>= \npar(mfrow = c(3, 2))\npar(mar = c(3, 3.5, 2, 0.2))\n\n####   T_IP.IC\n#T_IP.IC.distriNorm\nxx <- sort(unlist(meanSES.1.T_IP.IC.distriNorm))\nxx_lim.inf <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_1$ses.inf[,1], na.rm = T)))\nxx_lim.sup <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_1$ses.sup[,1], na.rm = T)))\nalpha1 <- round((sum(xx<xx_lim.inf | xx>xx_lim.sup)+1) / (length(xx)+1), 3)\n\nplot(xx, type = \"l\", main = \"T_IP.IC norm\", ylim = c(-3, 3),\n     ylab = NA, xlab = NA)\nrect(-100, mean(xx_lim.inf), npermut*1.2, mean(xx_lim.sup), col = rgb(0, 0, 0, 0.2))\ntext(3, 0.8, labels = paste(\"alpha error\", alpha1, sep = \" = \"), cex = 0.7, pos = 4)\nmtext(\"Standardized Effect Size\", 2, line = 2)\n\n#T_IP.IC.distriUni\nxx <- sort(unlist(meanSES.1.T_IP.IC.distriUni))\nxx_lim.inf <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_1$ses.inf[,2], na.rm = T)))\nxx_lim.sup <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_1$ses.sup[,2], na.rm = T)))\nalpha2 <- round((sum(xx<xx_lim.inf | xx>xx_lim.sup)+1) / (length(xx)+1), 3)\n\nplot(xx, type = \"l\", main = \"T_IP.IC uni\", ylim = c(-3, 3),\n     ylab = NA, xlab = NA)\nrect(-100, mean(xx_lim.inf), npermut*1.2, mean(xx_lim.sup), col = rgb(0, 0, 0, 0.2))\ntext(3, 0.8, labels = paste(\"alpha error\", alpha2, sep = \" = \"), cex = 0.7, pos = 4)\n\n#__________\n####   T_IC.IR\n#T_IC.IR.distriNorm\nxx <- sort(unlist(meanSES.1.T_IC.IR.distriNorm))\n\nxx_lim.inf <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_2$ses.inf[,1], na.rm = T)))\nxx_lim.sup <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_2$ses.sup[,1], na.rm = T)))\nalpha3 <- round((sum(xx<xx_lim.inf | xx>xx_lim.sup)+1) / (length(xx)+1), 3)\n\nplot(xx, type = \"l\", main = \"T_IC.IR norm\", ylim = c(-3, 3),\n     ylab = NA, xlab = NA)\nrect(-100, mean(xx_lim.inf), npermut*1.2, mean(xx_lim.sup), col = rgb(0, 0, 0, 0.2))\ntext(3, 0.8, labels = paste(\"alpha error\", alpha3, sep = \" = \"), cex = 0.7, pos = 4)\nmtext(\"Standardized Effect Size\", 2, line = 2)\n\n#T_IC.IR.distriUni\nxx <- sort(unlist(meanSES.1.T_IC.IR.distriUni))\n\nxx_lim.inf <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_2$ses.inf[,2], na.rm = T)))\nxx_lim.sup <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_2$ses.sup[,2], na.rm = T)))\nalpha4 <- round((sum(xx<xx_lim.inf | xx>xx_lim.sup)+1) / (length(xx)+1), 3)\n\nplot(xx, type = \"l\", main = \"T_IC.IR uni\", ylim = c(-3, 3),\n     ylab = NA, xlab = NA)\nrect(-100, mean(xx_lim.inf), npermut*1.2, mean(xx_lim.sup), col = rgb(0, 0, 0, 0.2))\ntext(3, 0.8, labels = paste(\"alpha error\", alpha4, sep = \" = \"), cex = 0.7, pos = 4)\n\n#__________\n####   T_PC.PR\n#T_PC.PR.distriNorm\nxx <- sort(unlist(meanSES.1.T_PC.PR.distriNorm))\n\nxx_lim.inf <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_3$ses.inf[,1], na.rm = T)))\nxx_lim.sup <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_3$ses.sup[,1], na.rm = T)))\nalpha5 <- round((sum(xx<xx_lim.inf | xx>xx_lim.sup)+1) / (length(xx)+1), 3)\n\nplot(xx, type = \"l\", main = \"T_PC.PR norm\", ylim = c(-3, 3),\n     ylab = NA, xlab = NA)\nrect(-100, mean(xx_lim.inf), npermut*1.2, mean(xx_lim.sup), col = rgb(0, 0, 0, 0.2))\ntext(3, 0.8, labels = paste(\"alpha error\", alpha5, sep = \" = \"), cex = 0.7, pos = 4)\nmtext(\"Standardized Effect Size\", 2, line = 2)\nmtext(\"rank\", 1, line = 2)\n\n#T_PC.PR.distriUni\nxx <- sort(unlist(meanSES.1.T_PC.PR.distriUni))\nxx_lim.inf <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_3$ses.inf[,2], na.rm = T)))\nxx_lim.sup <- unlist(lapply(res.simu1, function(x) mean(ses.listofindex(as.listofindex(x))\n              $index_1_3$ses.sup[,2], na.rm = T)))\nalpha6 <- round((sum(xx<xx_lim.inf | xx>xx_lim.sup)+1) / (length(xx)+1), 3)\n\nplot(xx, type = \"l\", main = \"T_PC.PR uni\", ylim = c(-3, 3),\n     ylab = NA, xlab = NA)\nrect(-100, mean(xx_lim.inf), npermut*1.2, mean(xx_lim.sup), col = rgb(0, 0, 0, 0.2))\ntext(3, 0.8, labels = paste(\"alpha error\", alpha6, sep = \" = \"), cex = 0.7, pos = 4)\nmtext(\"rank\", 1, line = 2)\n\npar(oldpar)\n@\n\n  \\subsection {Conclusion on the type I error of T-statistics}\n\nThe \\Sexpr{npermut} permutations allow the calculation of alpha error for two traits (the first normally distributed and the second uniformally distributed), three indices (the three T-statistics) and using local indices (one by community) or global indices (averaged between communities).\n\n\\begin{table}[h!]\n\\begin{center}\n\\caption{Alpha-errors for T-statistics}\n\\label{tab:Alpha-errors_for_T-stats}\n\\begin{tabular}{|c|c|c|c|c|}\n\\hline\nTraits & Indices & Average between communities? & alpha-error \\tabularnewline\n\\hline \\hline \\hline\n\\multirow{6}{*}{Trait normally distributed} & \\multirow{2}{*}{$T_{IP/IC}$} & no (local) & \\Sexpr{round(nbre_alpha_error_norm_loc_Tipic, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global) & \\Sexpr{round(alpha1, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{IC/IR}$} & no (local) & \\Sexpr{round(nbre_alpha_error_norm_loc_Ticir, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global) & \\Sexpr{round(alpha3, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{PC/PR}$} & no (local) & \\Sexpr{round(nbre_alpha_error_norm_loc_Tpcpr, 3)} \\tabularnewline\n\\cline{3-4}\n & & yes (global)& \\Sexpr{round(alpha5, 3)} \\tabularnewline\n\n\\hline \\hline \\hline\n\n\\multirow{6}{*}{Trait uniformally distributed} & \\multirow{2}{*}{$T_{IP/IC}$} & no (local) & \\Sexpr{round(nbre_alpha_error_uni_loc_Tipic, 3)} \\tabularnewline\n\\cline{3-4}\n & & yes (global) &  \\Sexpr{round(alpha2, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{IC/IR}$} & no (local) & \\Sexpr{round(nbre_alpha_error_uni_loc_Ticir, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global) &  \\Sexpr{round(alpha4, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{PC/PR}$} & no (local) & \\Sexpr{round(nbre_alpha_error_uni_loc_Tpcpr, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global)&  \\Sexpr{round(alpha6, 3)} \\tabularnewline\n\\hline \n\\end{tabular}\n\\end{center}\n\\end{table}\n\n\n\nThe results of table \\ref{tab:Alpha-errors_for_T-stats} attest of a good behavior of the T-statistics regardless of the distributions of the traits. Alpha-error of the local indices are always near the wanted alpha-error of 2.5\\%. Logically the global indices which averaged local indices are far more robust. Note that the higher alpha-error is obtained using $T_{PC/PR}$ on the trait normally distributed (\\Sexpr{round(nbre_alpha_error_norm_loc_Tpcpr, 3)}).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\cleardoublepage\n\n\\section{Internal filter: assess the statistical power of $T_{IP/IC}$}\n  \\subsection {Randomization outline}\n \nWe decide to modulate the strength of the internal filter thanks to two parameters:\nwe define (i) a gradient of distance between species means traits distributions and (ii) a gradient of the mean variance in species traits distributions. It is strongly linked to the definition of limiting similarity by May and Mac Arthur (1972) who defined a coefficient of competition as $$a = exp (-d^2/4w^2)$$ with \\texttt{d} correspond to the distance between the species trait means and \\texttt{w} correspond to the mean variance of species trait distribution. \n\n<<Internal_filter>>= \n# Number of values for each parameters: param_DIST_between_MEAN.init and param_SD\nnb_param_val\n\n# Number of permutations is the product of the number of values for each parameter\n#(nb_param_val) and the number of permutations by parameter (N_repet_Param)\nnperm <- nb_param_val * N_repet_Param\n\n# Maximum mean value for traits\nmax.value_traits <- 250\n\n# Parameter for the distance between species mean trait values\nparam_DIST_between_MEAN.init <- round(sort(seq(10, 200, length.out = nb_param_val)), 2)\nparam_DIST_between_MEAN <- rep(param_DIST_between_MEAN.init, N_repet_Param)\nmean_sd.param <- rep(10, nperm)\n\n# Parameter for the variance in species mean trait values\nparam_SD <- seq(10, 100,length.out = nb_param_val)\nsd_mean.param <- sample (rep(param_SD, N_repet_Param), \n       size = length(rep(param_SD, N_repet_Param)), replace = F)\nsd_sd.param <- rep(10, nperm)\n@\n\n\n Practically, we defined \\Sexpr{nb_param_val} values for two parameters:\n\\\\\n\n (i) \\texttt{param\\_{}DIST\\_{}between\\_{}MEAN.init} is a vector of length \\Sexpr{nb_param_val} which defined the minimum values for the mean traits values (the maximum values are defined to \\Sexpr{250}). In decreasing the range of traits values while keeping the same number of species, there is a decrease of mean distance between species means of traits values. Thus the mean for each species is drawn from a normal distribution with standard deviation of \\Sexpr{mean_sd.param[1]} (parameter \\texttt{mean\\_{}sd.param}) and means evenly distributed between \\texttt{max.value\\_{}traits - param\\_{}DIST\\_{}between\\_{}MEAN} and \\texttt{max.value\\_{}traits}.\n\\\\\n\n(ii) \\texttt{param\\_{}SD} is a vector of length \\Sexpr{nb_param_val} which defined the standard deviation of traits distributions for each species. In order to decorrelate the mean and standard deviation of species traits distributions, \\texttt{param\\_{}SD} is permuted before the analysis. \n\\\\\n\nFor the trait \"a\" the trait value for each individual is drawn from a normal distribution with the mean depending on it species attribute. For the trait \"b\" the trait value for each individual is drawn from a uniform distribution with the range depending on it species attribute. The range is defined as: \\textit{species mean value} - \\textit{species sd value} for the minimum and \\textit{species mean value} + \\textit{species sd value} for the maximum.\n\nNow we can start the simulation with \\Sexpr{nb_param_val} parameters values and \\Sexpr{N_repet_Param*length(param_SD)} permutations. \n\n<<Internal_filter_simu, results = 'hide'>>= \nmean.sp_stock2 <- list() ; sd.sp_stock2 <- list() ; res.simu2 <- list()\nres.simu2.pval <- list() ; res.simu.traits2 <- list() ;  mean_dist_sp <- list()\n\nfor(n in 1:nperm){#for each permutation\n \n # Draw communities using lognormal distribution of abundances \n # 100 individuals by populations\n ex.sp2 <- c()\n ex.com2 <- matrix(0, nrow = Ncom, ncol = Nsp)\n for(i in 1: Ncom){\n  ex.com.interm <- table(sample(sp, size = Nind/Ncom, prob = rlnorm(Nsp, 0, sdlog), \n                                replace = T))\n  ex.com2[i, sp%in% names(ex.com.interm)] <- ex.com.interm\n  ex.sp2 <- c(ex.sp2, rep(sp, times = ex.com2[i,]))\n }\n\n ex.indplot2 <- sort(as.factor(rep(com, Nind/Ncom)))\n\n # Defining traits mean and sd by species \n mean_mean.param.interm <- seq(max.value_traits - param_DIST_between_MEAN[n], \n                               max.value_traits, length.out = \n                               length(unique(param_DIST_between_MEAN)))\n\n mean_mean.param <- rep(round(sort(mean_mean.param.interm), 2), N_repet_Param)\n\n mean.sp <- rnorm(length(unique(sp)), mean = mean_mean.param, sd = mean_sd.param[n])\n sd.sp <- rnorm(length(unique(sp)), mean = sd_mean.param[n], sd = sd_sd.param[n]) \n\n ex.traits2 <- array(NA, dim = c(Nind, 2))\n colnames(ex.traits2) <- paste(\"trait\", c(\"a\", \"b\"), sep = \" \")\n\n # Draw the individual traits depending on species attributes\n  for(s in unique(ex.sp2)){\n   #trait a : normal distribution\n   ex.traits2[ex.sp2 == s, 1] <- \n   rnorm(5*Nind/Ncom, rep(mean.sp[unique(ex.sp2) == s], 5*Nind/Ncom),\n         rep(sd.sp[unique(ex.sp2) == s], 5*Nind/Ncom))[1:sum(ex.sp2 == s)]\n \n   #trait b : uniform distribution\n   ex.traits2[ex.sp2 == s, 2] <- \n   runif(5*Nind/Ncom, min = rep(mean.sp[unique(ex.sp2) == s], 5*Nind/Ncom) - \n         rep(sd.sp[unique(ex.sp2) == s], 5*Nind/Ncom), \n         max = rep(mean.sp[unique(ex.sp2) == s], 5*Nind/Ncom) + \n         rep(sd.sp[unique(ex.sp2) == s], 5*Nind/Ncom))[1:sum(ex.sp2 == s)]\n  }\n\n #stock results\n mean.sp_stock2[[n]] <- mean.sp \n sd.sp_stock2[[n]] <- sd.sp\n\n mean_dist_sp[[n]] <- c(mean(tapply(ex.traits2[, 1], ex.indplot2, function(x)\n                                    mean(dist(x), na.rm=T)), na.rm=T),\n                        mean(tapply(ex.traits2[, 2], ex.indplot2, function(x)\n                                    mean(dist(x), na.rm=T)), na.rm=T))\n  \n res.simu.traits2[[n]] <- ex.traits2\n res.simu2[[n]] <- Tstats(ex.traits2, ex.indplot2, ex.sp2, printprogress = FALSE)\n res.simu2.pval[[n]] <- sum_Tstats(res.simu2[[n]], type = \"p.value\")\n print(paste(round(n/nperm, 2) * Nind/Ncom, \"%\", sep = \" \"))\n}#End of simulations\n@\n\n\n \\subsection {Results for simulations of internal filtering}\n\nLet's see the result for one typical randomization. We can plot the distribution of traits within species and/or communities thanks to the function \\texttt{plotDistri} (Fig. \\ref{fig:typical_result_internal_filtering1}). \n\n<<typical_result_internal_filtering1, fig.cap = \"Distribution of traits for one randomization with internal filtering: (a) Communities trait distributions for the trait a (normal distribution); (b) Communities trait distributions for the trait b (uniform distribution); (c) Species trait distributions for the trait a; (d) Species trait distributions for the trait b\", crop = TRUE>>= \npar(mfrow=c(2, 2))\nplotDistri(ex.traits2, rep(\"all_sp\", times = dim(ex.traits2)[1]), ex.indplot2, \n           plot.ask = F, multipanel = F, cex.leg = 0.6, main= c(\"a\", \"b\"))\nplotDistri(ex.traits2, rep(\"region\", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F, \n           multipanel = F, ylim = c(0,0.04), cex.leg = 0.6, main= c(\"c\", \"d\"))\npar(mfrow=c(1, 1))\n@\n\nWe can also plot the result of the T-statistics for two contrasting cases (Fig. \\ref{fig:typical_result_internal_filtering2}).\n\n<<typical_result_internal_filtering2, fig.height = 8, fig.cap = \"Results of T-statistics for two randomization with contrasted strength of internal filtering: $T_{IP/IC}$ in red, $T_{IC/IR}$ in purple and $T_{PC/PR}$ in green. (a) Lower strength of internal filtering and (b) higher strength of internal filtering.\", crop = TRUE>>= \npar(mfrow=c(2, 1))\nplot(res.simu2[[1]], main=\"a\")\nplot(res.simu2[[n]], main=\"b\")\npar(mfrow=c(1, 1))\n@\n\nFor the power analysis of internal filtering we present the result in two parts: (i) the test of robustness of each T-statistics values using local p-values and (ii) the test of community-aggregated T-statistics using global p-values.\n\n \\subsubsection {Local p-values results}\n\nHere we call local p-values the p-values corresponding to one indice for one trait in one community. First, we can represent the ordered p.value in decimal logarithms and calculate the power of the $T_{IP/IC}$ indice using the beta-error\\footnote{The proportion of case where we do not reject the null hypothesis while this hypothesis is wrong.}. The less the beta-error, the more the indice is powerful. Contrary to the test with no filter, we choose a unilateral test because we only want to test if $T_{IP/IC}$ is smaller than it should be under the associated null hypothesis.\n\nWe can plot the local p-values in different ways. First, we can represent the ordered p.value in decimal logarithms and calculate the power of the $T_{IP/IC}$ indice using the beta-error. The less the beta-error, the more the indice is powerful. Contrary to the test with no filter, we choose a unilateral test because we only want to test if $T_{IP/IC}$ is smaller than it should be under the associated null hypothesis.\n\n  \\subsubsubsection {Calculation of beta-error mixing all strength of filtering}\n \n<<Internal_filter_results_pval_local, fig.height = 3, crop = TRUE, fig.cap = \"Beta-error mixing all strength of internal filtering: Standardized effect size of $T_{IP/IC}$ are ordered and plot. The black line represent the value of 0.05. Consequently, p-values above this line are false-negative cases. Norm: normal distribution, Uni: uniforme distribution. \" >>= \npar(mfrow = c(1, 2))\nxx <- log10(sort(unlist(lapply(res.simu2.pval, function(x) x[1:10, 1]))))\nplot(xx, type = \"l\", main = \"T_IP.IC Norm\", \n     xlab = \"rank\", ylab = \"Standardized Effect Size\")\nabline(h = log10(0.05))\nnbre_beta_error <- round((sum(xx>log10(0.05))+1)/(length(xx)+1), 4)\ntext(0, -0.8, labels = paste(\"beta error\", nbre_beta_error, sep = \" = \"), \n  cex = 0.7, pos = 4)\n\nxx <- log10(sort(unlist(lapply(res.simu2.pval, function(x) x[1:10, 2]))))\nplot(xx, type = \"l\", main = \"T_IP.IC Uni\", \n     xlab = \"rank\", ylab = \"Standardized Effect Size\")\nabline(h = log10(0.05))\nnbre_beta_error <- round((sum(xx>log10(0.05))+1)/(length(xx)+1), 4)\ntext(0, -0.8, labels = paste(\"beta error\", nbre_beta_error, sep = \" = \"), \n  cex = 0.7, pos = 4)\npar(oldpar)\n@\n\nThe beta-error is very high and thus the power of $T_{IP/IC}$ can \\textit{prima facie} seen as problematic (Fig. \\ref{fig:Internal_filter_results_pval_local}). But here we mingle the p-value for several parameters values. Thus it is far more informative to see the power of the test in relation to the initial parameters values. We represent standardized effect sizes values (hereafter called SES) in relation to the strength of internal filter to determine the parameters values which allow a satisfactory power of $T_{IP/IC}$.\n\nAs we add stochasticity around the initial parameters values, we can measure the strength of internal filtering by (i) the initial parameter values or (ii) by calculating the modeled parameter values\\footnote{\\textit{i.e.} the parameter values after adding stochasticity}.\n \n  \\subsubsubsection {Local $T_{IP/IC}$ SES values against initial parameter values}\n\n<<Internal_filter_results_SES>>= \nmeanSES.2loc.norm_Tipic <- unlist(lapply(res.simu2, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[, 1]))\n\nmeanSES.2loc.uni_Tipic <- unlist(lapply(res.simu2, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[, 2]))\n\nSES.inf.MEAN.norm_Tipic <- unlist(lapply(res.simu2, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 1]))\n\nSES.inf.MEAN.uni_Tipic <- unlist(lapply(res.simu2, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 2]))\n@\n\nNow, we can plot SES of $T_{IP/IC}$ (Fig. \\ref{fig:In_filter_results_plot_initparam}). The trait \"a\" normally distributed is in black and the uniform traits \"b\" is in purple. The colored rectangles represent the null model area with alpha = 5\\%. Thus, when a point is outside these area, the modeled parameters are strong enough to detect the internal filter with a high power (beta-error $ < 0.05$).\n\n  \n<<In_filter_results_plot_initparam, fig.height = 4, fig.cap = \"Local $T_{IP/IC}$ SES and initial parameters values: Standardized effect size of $T_{IP/IC}$ in function of the strength of internal filter defined by the ratio of the initial range parameter by the initial standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Local $T_{IP/IC}$ SES and initial parameters values\">>= \ninit_param <- param_DIST_between_MEAN / sd_mean.param\ninit_param.loc <- rep(init_param, each = Ncom)\n\nplot(meanSES.2loc.norm_Tipic, init_param.loc, pch = 16, col = rgb(0, 0, 0, 0.6),\n     xlim = c(min(c(unlist(meanSES.2loc.norm_Tipic), unlist(meanSES.2loc.uni_Tipic)), \n     na.rm = T), 0),\n     main = \"Local T_IP.IC\",\n     xlab = \"standardized effect size of T_IP.IC\",\n     ylab = \"initial parameters: range/sd\")\nabline(v = mean(SES.inf.MEAN.norm_Tipic, na.rm = T))\n\npoints(meanSES.2loc.uni_Tipic, init_param.loc, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(SES.inf.MEAN.uni_Tipic, na.rm = T), col = \"purple\")\nrect(mean(SES.inf.MEAN.norm_Tipic, na.rm = T), -1, 0, max(init_param) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(SES.inf.MEAN.uni_Tipic, na.rm = T), 0, 0, max(init_param), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n \n  \nFor each initial parameters values we can calculate the proportion of case where we do not reject the null hypothesis while this hypothesis is wrong (\\textit{i.e.} the Beta-error). The next chunk only shows the calculation for the $T_{IC/IR}$ metrics on the trait \"a\".\n\n<<In_calculate_local_betaerrors>>= \nbeta_sd_norm_Tipic <- \n (unlist(lapply(by(cbind(meanSES.2loc.norm_Tipic, SES.inf.MEAN.norm_Tipic), \n     rep(sd_mean.param, each = Ncom), function(x) x[,1] > x[,2]),\n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\nbeta_range_norm_Tipic <- \n (unlist(lapply(by(cbind(meanSES.2loc.norm_Tipic, SES.inf.MEAN.norm_Tipic), \n     rep(param_DIST_between_MEAN, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\n   \nbeta_sd_uni_Tipic <- \n (unlist(lapply(by(cbind(meanSES.2loc.uni_Tipic, SES.inf.MEAN.uni_Tipic), \n     rep(sd_mean.param, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\nbeta_range_uni_Tipic <- \n (unlist(lapply(by(cbind(meanSES.2loc.uni_Tipic, SES.inf.MEAN.uni_Tipic), \n     rep(param_DIST_between_MEAN, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\n\nres_beta_Tipic <- rbind(rev(beta_sd_norm_Tipic), rev(beta_sd_uni_Tipic), \n      beta_range_norm_Tipic, beta_range_uni_Tipic)\ncolnames(res_beta_Tipic) <- paste(\"str\", 1:ncol(res_beta_Tipic))\nrownames(res_beta_Tipic) <- c(\"effect of sd (a)\", \"effect of sd (b)\", \n        \"effect of range (a)\", \"effect of range (b)\")\n@\n\n<<In_resultsof_local_betaerrors, results='asis'>>= \nprint(xtable(res_beta_Tipic, caption = 'Local beta-error of $T_{IP/IC}$ in function \n             of the strength of internal filtering. str: strength. Trait a is \n             normally distributed and trait b is uniformally distributed.', \n             label = \"tab:local_beta_error_xtable\"), \n      caption.placement = \"top\", size = \"small\")\n@\n \n\nNow we can see the beta-error for each strength in table \\ref{tab:local_beta_error_xtable}. A high value of range and a low value of standard error defined a high strength of filtering. For example, in the case of a trait normally distributed, the proportion of false negative is \\Sexpr{round(res_beta_Tipic[1, 1]*100, 2)}\\% for the higher value of standard errors and thus for the lower strength of internal filtering. The good behavior of the function \\texttt{Tstats} is ascertained by the decrease of beta-error along increasing strength of filter.\n \n \n  \\subsubsubsection {Local $T_{IP/IC}$ SES values against modeled parameter values}\n  \n  First we need to calculate the modeled parameter values. Here again we calculate the strength of internal filtering by dividing the range of values in communities by their standard error.\n  \n<<In_filter_modeledparam>>= \nmean_dist_sp.interm <- t(matrix(unlist(lapply(mean_dist_sp, function(x) x)), nrow = 2))\nmean_sd_of_com <- unlist(lapply(sd.sp_stock2, function(x) mean(x)))\n\nmodeled_param_norm <- mean_dist_sp.interm[, 1] / mean_sd_of_com \nmodeled_param_uni <- mean_dist_sp.interm[, 2] / mean_sd_of_com \nmodeled_param_norm.loc <- rep(modeled_param_norm, each = Ncom)\nmodeled_param_uni.loc <- rep(modeled_param_uni, each = Ncom)\n@\n\n<<In_filter_results_plot_modeledparam, fig.height = 4, fig.cap = \"Local $T_{IP/IC}$ SES and modeled parameters values: Standardized effect size of $T_{IP/IC}$ in function of the strength of internal filter defined by the ratio of the modeled range parameter by the modeled standard error parameter. The colored rectangles represent the mean confidence interval for SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Local $T_{IP/IC}$ SES and modeled parameters values\">>= \n\nplot(meanSES.2loc.norm_Tipic, modeled_param_norm.loc, pch = 16, col = rgb(0, 0, 0, 0.6),\n     xlim = c(min(c(unlist(meanSES.2loc.norm_Tipic), unlist(meanSES.2loc.uni_Tipic)), \n              na.rm = T), 0),\n     ylim = c(min(c(modeled_param_norm.loc, modeled_param_uni.loc), na.rm = T), \n              max(c(modeled_param_norm.loc, modeled_param_uni.loc), na.rm = T)),\n     main = \"Local T_IP.IC\",\n     xlab = \"standardized effect size of T_IP.IC\",\n     ylab = \"modeled parameters: range/sd\")\nabline(v = mean(SES.inf.MEAN.norm_Tipic, na.rm = T))\n\npoints(meanSES.2loc.uni_Tipic, modeled_param_uni.loc, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(SES.inf.MEAN.uni_Tipic, na.rm = T), col = \"purple\")\nrect(mean(SES.inf.MEAN.norm_Tipic, na.rm = T), -1, 0, max(modeled_param_norm.loc) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(SES.inf.MEAN.uni_Tipic, na.rm = T), 0, 0, max(modeled_param_uni.loc), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\nThere is a very hich correlation coefficient between initial and modeled parameter either for the range (trait a: Pearson correlation = \\Sexpr{round(cor.test(param_DIST_between_MEAN, modeled_param_norm)[[4]], 3)}; trait b: Pearson correlation = \\Sexpr{round(cor.test(param_DIST_between_MEAN, modeled_param_uni)[[4]], 3)}) and for the standard error(trait a and b: Pearson correlation = \\Sexpr{round(cor.test(sd_mean.param, mean_sd_of_com)[[4]], 3)}). Consequently the consistency between the figures \\ref{fig:In_filter_results_plot_initparam} and  \\ref{fig:In_filter_results_plot_modeledparam} is not suprising. \n \n \\subsubsection {Global p-values results for $T_{IP/IC}$}\nIn contrast with local p-values, we call global p-values the p-values corresponding to one indice for one trait across all the communities. \n\n  \\subsubsubsection {Global $T_{IP/IC}$ SES values against initial parameter values}\n  \nAgain, this first results mix different initial parameter values. Now, we can plot the SES values in relation to the strength of the internal filter assessed by the two parameters (either the initial values: \\texttt{mean\\_range\\_between\\_com} and \\texttt{mean\\_sd\\_of\\_com} or the modeled values \\texttt{mean\\_{}range\\_{}com} and \\texttt{sd.com\\_{}stock2} \\footnote{This modeled values are stochastic versions of the initial values.}). \n\nFirst, we need to compute the SES values from simulations.\n<<Internal_filter_Results_SES>>= \nmeanSES.2glob.norm_Tipic <- unlist(lapply(res.simu2, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[,1], na.rm = T)))\nmeanSES.2glob.uni_Tipic <- unlist(lapply(res.simu2, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[,2], na.rm = T)))\n\nmeanSES.INF_glob.norm_Tipic <- unlist(lapply(res.simu2, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 1], na.rm = T)))\nmeanSES.INF_glob.uni_Tipic <- unlist(lapply(res.simu2, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 2], na.rm = T)))\n@\n\nPlot the result against initial parameters (Fig. \\ref{fig:Internal_filter_Results_plots_initial_param}).\n\n\n<<Internal_filter_Results_plots_initial_param, fig.height = 4, fig.cap = \"Global $T_{IP/IC}$ SES and initial parameters values: Standardized effect size of $T_{IP/IC}$ in function of the strength of internal filter defined by the ratio of the inital range parameter by the initial standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Global $T_{IP/IC}$ SES and initial parameters values\">>= \nplot(meanSES.2glob.norm_Tipic, init_param, pch = 16, col = rgb(0, 0, 0, 0.6),\n     main = \"Global T_IP.IC\",\n     xlim = c(min(c(meanSES.2glob.norm_Tipic, meanSES.2glob.uni_Tipic), \n            na.rm = T), 0),\n     xlab = \"standardized effect size of T_IP.IC\",\n     ylab = \"initial parameters: range/sd\")\npoints(meanSES.2glob.uni_Tipic, init_param, pch = 16, col = rgb(0.5, 0, 1, 0.6),)\nabline(v = mean(meanSES.INF_glob.norm_Tipic, na.rm = T))\nabline(v = mean(meanSES.INF_glob.uni_Tipic, na.rm = T), col = \"purple\")\nrect(mean(meanSES.INF_glob.norm_Tipic, na.rm = T), -1, 0, max(modeled_param_norm.loc) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(meanSES.INF_glob.uni_Tipic, na.rm = T), 0, 0, max(modeled_param_uni.loc), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\n\n\n  \\subsubsubsection {Global $T_{IP/IC}$ SES values against modeled parameter values}\n  \nWe can verify the consistency of our results by plotting SES values against the modeled parameters values (Fig. \\ref{fig:Internal_filter_Results_plots_modeled_param} and \\ref{fig:Internal_filter_Results_plots_modeled_param2}). \n\n<<Internal_filter_Results_plots_modeled_param, fig.height = 4, fig.cap = \"Global $T_{IP/IC}$ SES and modeled parameters values: Standardized effect size of $T_{IP/IC}$ in function of the strength of internal filter defined by the ratio of the modeled range parameter by the modeled standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Global $T_{IP/IC}$ SES and modeled parameters values\">>= \nmean_dist_sp.interm <- t(matrix(unlist(lapply(mean_dist_sp, function(x) x)), nrow = 2))\nmean_sd_of_com <- unlist(lapply(sd.sp_stock2, function(x) mean(x)))\n\nmodeled_param_norm <- mean_dist_sp.interm[, 1] / mean_sd_of_com \nmodeled_param_uni <- mean_dist_sp.interm[, 2] / mean_sd_of_com \n\nplot(meanSES.2glob.norm_Tipic, modeled_param_norm, pch = 16,\n     main = \"Global T_IP.IC\",\n     xlim = c(min(c(meanSES.2glob.norm_Tipic, meanSES.2glob.uni_Tipic), \n              na.rm = T), 0),\n     ylim = c(min(c(modeled_param_norm, modeled_param_uni), na.rm = T), \n     max(c(modeled_param_norm, modeled_param_uni), na.rm = T)),\n     xlab = \"standardized effect size of T_IP.IC\",\n     ylab = \"modeled parameters: range/sd\")\npoints(meanSES.2glob.uni_Tipic, modeled_param_uni, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(meanSES.INF_glob.norm_Tipic, na.rm = T))\nabline(v = mean(meanSES.INF_glob.uni_Tipic, na.rm = T), col = \"purple\")\nrect(mean(meanSES.INF_glob.norm_Tipic, na.rm = T), -1, 0, max(modeled_param_norm) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(meanSES.INF_glob.uni_Tipic, na.rm = T), 0, 0, max(modeled_param_uni), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\n  \\subsection {Conclusion on the power of $T_{IP/IC}$ to detect internal filtering}\n\nTo conclude on the power of $T_{IP/IC}$ to detect internal filtering, we compute exponential linear model and identify the strength from which the beta-error is inferior to 0.05. This strength is defined by the two ratio of the initial parameters \\texttt{param\\_DIST\\_between\\_MEAN} and \\texttt{sd\\_mean.param}. \n\n<<In_conc_plot, fig.cap = \"Power of $T_{IP/IC}$ to detect internal filtering: Standardised Effect Size (SES) of $T_{IP/IC}$ in relation to the strength of internal filtering. Trait 'a' normally distributed is shown in black, traits 'b' uniformally distributed in purple. Open circle represent local SES values wheras close one represent global SES values. The exponential linear model is presented with 5 percents confidence interval on both side. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$)\", fig.scap = \"Power of $T_{IP/IC}$ to detect internal filtering\", dev ='png', dpi = 100>>=\nplot(meanSES.2loc.norm_Tipic ~ init_param.loc, col = rgb(0, 0, 0, 0.2), \n     ylim = c(min(c(meanSES.2loc.norm_Tipic , meanSES.2loc.uni_Tipic,\n                  meanSES.2glob.norm_Tipic, meanSES.2glob.uni_Tipic), na.rm = T), 0),\n     main = \"T_IP.IC\",\n     ylab = \"standardized effect size of T_IP.IC\",\n     xlab = \"initial parameters: range/sd\",\n     type = \"n\")\n#points(meanSES.2loc.uni_Tipic ~ init_param.loc, col = rgb(0.5, 0, 1, 0.2))\n\npoints(meanSES.2glob.norm_Tipic ~ init_param, pch = 16, col = rgb(0, 0, 0, 0.5), \n       cex = 1.2)\nlm.norm <- lm(meanSES.2glob.norm_Tipic ~ log(init_param))\nlm.norm_conf <- confint(lm.norm, level = 0.90)\ncurve(lm.norm$coef[1] + log(x) * (lm.norm$coef[2]), add = T, lwd = 3)\ncurve(lm.norm_conf [1, 1] + log(x) * lm.norm_conf [2, 1], add = T, lty = 2)\ncurve(lm.norm_conf [1, 2] + log(x) * lm.norm_conf [2, 2], add = T, lty = 2)\n\npoints(meanSES.2glob.uni_Tipic ~ init_param, pch = 16, col = rgb(0.5, 0, 1, 0.5),\n       cex = 1.2)\nlm.uni <- lm(meanSES.2glob.uni_Tipic ~ log(init_param))\nlm.uni_conf <- confint(lm.uni, level = 0.90)\ncurve(lm.uni$coef[1] + log(x) * (lm.uni$coef[2]), add = T, lwd = 3, \n      col = rgb(0.5, 0, 1, 1))\ncurve(lm.uni_conf [1, 1] + log(x) * lm.uni_conf [2, 1], add = T, lty = 2, \n      col = rgb(0.5, 0, 1, 1))\ncurve(lm.uni_conf [1, 2] + log(x) * lm.uni_conf [2, 2], add = T, lty = 2,\n      col = rgb(0.5, 0, 1, 1))\n\n\nrect(-1, mean(c(SES.inf.MEAN.uni_Tipic, meanSES.INF_glob.uni_Tipic), na.rm = T), \n     max(init_param), 10, col = rgb(0.5, 0, 1, 0.3), border = NA)\n\nrect(-1, mean(c(SES.inf.MEAN.norm_Tipic, meanSES.INF_glob.norm_Tipic), na.rm = T), \n     max(init_param) + 10, 10, col = rgb(0, 0, 0, 0.3), border = NA)\n\n@\n\n<<In_conc_res>>=\nyy.norm <- mean(c(SES.inf.MEAN.norm_Tipic, meanSES.INF_glob.norm_Tipic), na.rm = T)\nyy.uni <- mean(c(SES.inf.MEAN.uni_Tipic, meanSES.INF_glob.uni_Tipic), na.rm = T)\n\nparam_beta0.05_Tipic.norm <- exp((yy.norm - lm.norm_conf [1, 2]) / lm.norm_conf [2, 2])\nparam_beta0.05_Tipic.uni <- exp((yy.uni - lm.uni_conf [1, 2]) / lm.uni_conf [2, 2])\n@\n\n\nFor the trait \"a\" normally distributed, the power of $T_{IP/IC}$ is satisfactory if the ratio of the initial parameter is superior to\n \\Sexpr{round(param_beta0.05_Tipic.norm, 2)}. For the trait \"b\" uniformally distributed, this value is \\Sexpr{round(param_beta0.05_Tipic.uni, 2)}. \n Further investigation on real data with different strength of internal filtering are needed to complete these simulated values.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\cleardoublepage\n\n\\section{External Filter}\n\n \\subsection {Randomization outline}\n \nAs for internal filter we modulate the strength of the external filter thanks to two parameters:\nwe define (i) a gradient of range between communities means traits distributions and (ii) a gradient of the mean variance in communities traits distributions. We expect the external filtering to increase (i) when the range in communities means increase (\\textit{i.e.} the environmental gradient is larger) and (ii) when the variance in the communities traits distributions decrease (\\textit{i.e.} the environmental gradient is stronger).\n\\\\\n\nIn analogy with the internal filtering model, we defined \\Sexpr{nb_param_val} values for two parameters:\n\\\\\n\n (i) \\texttt{param\\_{}RANGE.init} is a vector of length \\Sexpr{nb_param_val} which defined the above range for the mean traits values (the maximum value for the mean is assessed to \\Sexpr{max.value_traits}). In decreasing the range of traits values while keeping the same number of communities, there is a decrease in the overlap of the communities traits distributions and consequently an decrease of the impact of external filtering in shaping traits distributions. Thus the mean for each communities is drawn from a normal distribution with standard deviation of \\Sexpr{mean_sd.param[1]} (parameter \\texttt{mean\\_{}sd.param}) and means evenly\n\\footnote{In fact, we draw this values in a normal distribution with means evenly distributed and with a standard error equal to \\texttt{mean\\_{}sd.param}}\nof \\Sexpr{mean_sd.param[1]} distributed between \\texttt{max.value\\_{}traits - param\\_{}RANGE} and \\texttt{max.value\\_{}traits}.\n\\\\\n\n(ii) \\texttt{param\\_{}SD} is a vector of length \\Sexpr{nb_param_val} which defined the standard deviation of traits distributions for each species. In order to decorrelate the mean and standard deviation of species traits distributions, \\texttt{param\\_{}SD} is permuted before the analysis. \n\\\\\n\n Thus for the trait \"a\" the trait value for each individual is drawn from a normal distribution with the mean depending on it community attribute. For the trait \"b\" the trait value for each individual is drawn from a uniform distribution with the range depending on it community attribute.\n \n<<External_filter_param>>= \n# Parameter for the range of communities traits distributions\nparam_range.init <- round(sort(seq(10, 200, length.out = nb_param_val)), 2)\nparam_range <- rep(param_range.init, N_repet_Param)\nmean_sd.param <- rep(10, nperm)\n\n# Parameter for the variance in species mean trait values\nparam_SD <- seq(10, 100,length.out = nb_param_val)\nsd_mean.param <- sample (rep(param_SD, N_repet_Param), \n       size = length(rep(param_SD, N_repet_Param)), replace = F)\nsd_sd.param <- rep(10, nperm)\n@\n\n\n<<External_filter, results = 'hide'>>= \nnperm <- N_repet_Param*length(param_SD)\n\nmean_range_com <- list() ; sd.com_stock3 <- list() ; res.simu3 <- list()\nres.simu3.pval <- list() ; res.simu.traits3 <- list()\n\nfor(n in 1:nperm){#for each permutation\n\n ex.sp3 <- c()\n ex.com3 <- matrix(0, nrow = 10, ncol = 20)\n for(i in 1: 10){\n  ex.com.interm <- table(sample(sp, size = 100, prob = rlnorm(20, 0, sdlog), replace = T))\n  ex.com3[i, sp%in% names(ex.com.interm)] <- ex.com.interm\n  ex.sp3 <- c(ex.sp3, rep(sp, times = ex.com3[i,]))\n }\n\n ex.indplot3 <- sort(as.factor(rep(com, 100)))\n\n #Defining mean and sd by community\n mean_mean.param.interm <- seq(max.value_traits - param_range[n], max.value_traits, \n                               length.out = length(unique(param_range)))\n\n mean_mean.param <- rep(round(sort(mean_mean.param.interm), 2), N_repet_Param)\n\n mean.com <- rnorm(length(unique(com)), mean = mean_mean.param, sd = mean_sd.param[n])\n sd.com <- rnorm(length(unique(com)), mean = sd_mean.param[n], sd = sd_sd.param[n]) \n\n ex.traits3 <- array(NA, dim = c(1000, 2))\n colnames(ex.traits3) <- paste(\"trait\", c(\"a\", \"b\"), sep = \" \")\n\n\n for(c in unique(ex.indplot3)){\n  #trait a : normal distribution\n  ex.traits3[ex.indplot3 == c, 1] <- \n  rnorm(500, rep(mean.com[unique(ex.indplot3) == c], 500),\n    rep(sd.com[unique(ex.indplot3) == c], 500))[1:sum(ex.indplot3 == c)]\n \n  #trait b : uniform distribution\n  ex.traits3[ex.indplot3 == c, 2] <- \n  runif(500, min = rep(mean.com[unique(ex.indplot3) == c], 500) -\n        rep(sd.com[unique(ex.indplot3) == c], 500),\n        max = rep(mean.com[unique(ex.indplot3) == c], 500) +\n        rep(sd.com[unique(ex.indplot3) == c], 500))[1:sum(ex.indplot3 == c)]\n }\n\n #stock results\n mean_range_com[[n]] <- c(max(ex.traits3[, 1], na.rm = T) - min(ex.traits3[, 1], na.rm = T),\n                          max(ex.traits3[, 2], na.rm = T) - min(ex.traits3[, 2], na.rm = T))\n sd.com_stock3[[n]] <- sd.com\n\n res.simu.traits3[[n]] <- ex.traits3\n res.simu3[[n]] <- Tstats(ex.traits3, ex.indplot3, ex.sp3)\n res.simu3.pval[[n]] <- sum_Tstats(res.simu3[[n]], type = \"p.value\")\n print(paste(\"---\", round(n/nperm, 2) * 100, \"%\", sep = \" \"))\n}#End of simulations\n@\n\n \\subsection {Results for simulations of external filtering}\n\nLet's see the result for one typical randomization. We can plot the distribution of traits within species and/or communities thanks to the function \\texttt{plotDistri} (Fig. \\ref{fig:typical_results_external_filtering1}). \n\n<<typical_results_external_filtering1, fig.cap = \"Distribution of traits for one randomization with external filter: (a) Communities trait distributions for the trait a (normal distribution); (b) Communities trait distributions for the trait b (uniform distribution); (c) Species trait distributions for the trait a; (d) Species trait distributions for the trait b\", crop = TRUE>>= \npar(mfrow=c(2, 2))\nplotDistri(ex.traits3, rep(\"all_sp\", times = dim(ex.traits3)[1]), ex.indplot3, \n           plot.ask = F, multipanel = F, main = c(\"a\", \"b\"), leg = c(T, F))\nplotDistri(ex.traits3, rep(\"region\", times = dim(ex.traits3)[1]), ex.sp3, plot.ask = F, \n           multipanel = F, main = c(\"c\", \"d\"), leg = c(T, F))\npar(mfrow=c(1, 1))\n@\n\nWe can also plot the result of the T-statistics for two contrasting case (Fig. \\ref{fig:typical_results_external_filtering2}).\n\n<<typical_results_external_filtering2, fig.height = 8, fig.cap = \"Results of T-statistics of traits for two randomization with contrasted strength of external filter: $T_{IP/IC}$ in red, $T_{IC/IR}$ in purple and $T_{PC/PR}$ in green. (a) Lower strength of external filtering and (b) higher strength of external filtering.\", crop = TRUE>>= \npar(mfrow=c(2, 1))\nplot(res.simu3[[1]], main = \"a\")\nplot(res.simu3[[n]], main = \"b\")\npar(mfrow=c(1, 1))\n@\n\n \\subsubsection {Local $T_{IC/IR}$ and $T_{PC/PR}$ results}\n\nAs for internal filtering, we mingle the p-value for different parameters values. Consequently we plot the standard effect size (SES) of $T_{IC/IR}$ and $T_{PC/PR}$ in relation to the initial parameters values. \n\n  \\subsubsubsection {Local $T_{IC/IR}$ and $T_{PC/PR}$ SES values against initial parameter values}\n\n<<External_filter_results_SES>>= \n\n#T_IC.IR\nmeanSES.3loc.norm_Ticir <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[, 1]))\n\nmeanSES.3loc.uni_Ticir <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[, 2]))\n\nSES.inf.MEAN.norm_Ticir <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 1]))\n\nSES.inf.MEAN.uni_Ticir <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 2]))\n\n#T_PC.PR\nmeanSES.3loc.norm_Tpcpr <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[, 1]))\n\nmeanSES.3loc.uni_Tpcpr <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[, 2]))\n\nSES.inf.MEAN.norm_Tpcpr <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 1]))\n\nSES.inf.MEAN.uni_Tpcpr <- unlist(lapply(res.simu3, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 2]))\n@\n\nNow, we can plot SES of $T_{IC/IR}$ (Fig. \\ref{fig:Ex_filter_results_plot_initparam1}) and $T_{PC/PR}$ (Fig. \\ref{fig:Ex_filter_results_plot_initparam2}). The trait \"a\" normally distributed is in black and the uniform traits \"b\" is in purple. The colored rectangles represent the null model area with alpha = 5\\%. Thus, when a point is outside these area, the modeled parameters are strong enough to detect the external filter with a high power (beta-error $ < 0.05$).\n\n<<Ex_filter_results_plot_initparam1, fig.height = 4, fig.cap = \"Local $T_{IC/IR}$ SES and initial parameters values: Standardized effect size of $T_{IC/IR}$ in function of the strength of external filter defined by the ratio of the initial range parameter by the initial standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Local $T_{IC/IR}$ SES and initial parameters values\">>= \ninit_param <- param_range / sd_mean.param\n#each value is replicate Ncom times (there is Ncom communities for each parameter values)\ninit_param.loc <- rep(init_param, each = Ncom)\n\nplot(meanSES.3loc.norm_Ticir, init_param.loc, pch = 16, col = rgb(0, 0, 0, 0.6),\n     xlim = c(min(c(unlist(meanSES.3loc.norm_Ticir), unlist(meanSES.3loc.uni_Ticir)), \n     na.rm = T), 0),\n     main = \"Local T_IC.IR\",\n     xlab = \"standardized effect size of T_IC.IR\",\n     ylab = \"initial parameters: range/sd\")\nabline(v = mean(SES.inf.MEAN.norm_Ticir, na.rm = T))\n\npoints(meanSES.3loc.uni_Ticir, init_param.loc, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(SES.inf.MEAN.uni_Ticir, na.rm = T), col = \"purple\")\nrect(mean(SES.inf.MEAN.norm_Ticir, na.rm = T), -1, 0, max(init_param) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(SES.inf.MEAN.uni_Ticir, na.rm = T),0, 0, max(init_param), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n \n  \n<<Ex_filter_results_plot_initparam2, fig.height = 4, fig.cap = \"Local $T_{PC/PR}$ SES and initial parameters values: Standardized effect size of $T_{PC/PR}$ in function of the strength of external filter defined by the ratio of the initial range parameter by the initial standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Local $T_{PC/PR}$ SES and initial parameters values\">>= \nplot(meanSES.3loc.norm_Tpcpr, init_param.loc, pch = 16, col = rgb(0, 0, 0, 0.6),\n     xlim = c(min(c(unlist(meanSES.3loc.norm_Tpcpr), unlist(meanSES.3loc.uni_Tpcpr)), \n     na.rm = T), 0),\n     main = \"Local T_PC.PR\",\n     xlab = \"standardized effect size of T_PC.PR\",\n     ylab = \"initial parameters: range/sd\")\nabline(v = mean(SES.inf.MEAN.norm_Tpcpr, na.rm = T))\n\npoints(meanSES.3loc.uni_Tpcpr, init_param.loc, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(SES.inf.MEAN.uni_Tpcpr, na.rm = T), col = \"purple\")\nrect(mean(SES.inf.MEAN.norm_Tpcpr, na.rm = T), -1, 0, max(init_param) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(SES.inf.MEAN.uni_Tpcpr, na.rm = T), 0, 0, max(init_param), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n \nFor each initial parameters values we can calculate the proportion of case where we do not reject the null hypothesis while this hypothesis is wrong (\\textit{i.e.} the Beta-error). The next chunk only shows the calculation for the $T_{IC/IR}$ metrics on the trait \"a\".\n\n<<Ex_calculate_local_betaerrors, echo = 2>>= \nbeta_sd_norm_Ticir <- \n (unlist(lapply(by(cbind(meanSES.3loc.norm_Ticir, SES.inf.MEAN.norm_Ticir), \n     rep(sd_mean.param, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\nbeta_range_norm_Ticir <- \n (unlist(lapply(by(cbind(meanSES.3loc.norm_Ticir, SES.inf.MEAN.norm_Ticir), \n     rep(param_range, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\n   \nbeta_sd_uni_Ticir <- \n (unlist(lapply(by(cbind(meanSES.3loc.uni_Ticir, SES.inf.MEAN.uni_Ticir),\n     rep(sd_mean.param, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\nbeta_range_uni_Ticir <- \n (unlist(lapply(by(cbind(meanSES.3loc.uni_Ticir, SES.inf.MEAN.uni_Ticir),\n     rep(param_range, each = Ncom), function(x) x[,1] > x[,2]),\n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\n\nbeta_sd_norm_Tpcpr <- \n (unlist(lapply(by(cbind(meanSES.3loc.norm_Tpcpr, SES.inf.MEAN.norm_Tpcpr), \n     rep(sd_mean.param, each = Ncom), function(x) x[,1] > x[,2]),\n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\nbeta_range_norm_Tpcpr <- \n (unlist(lapply(by(cbind(meanSES.3loc.norm_Tpcpr, SES.inf.MEAN.norm_Tpcpr), \n     rep(param_range, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\n   \nbeta_sd_uni_Tpcpr <- \n (unlist(lapply(by(cbind(meanSES.3loc.uni_Tpcpr, SES.inf.MEAN.uni_Tpcpr), \n     rep(sd_mean.param, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\nbeta_range_uni_Tpcpr <- \n (unlist(lapply(by(cbind(meanSES.3loc.uni_Tpcpr, SES.inf.MEAN.uni_Tpcpr), \n     rep(param_range, each = Ncom), function(x) x[,1] > x[,2]), \n     function(x) sum(x, na.rm = T)))+1)/(10 * N_repet_Param + 1)\n\nres_beta_Ticir <- rbind(rev(beta_sd_norm_Ticir), rev(beta_sd_uni_Ticir), \n      beta_range_norm_Ticir, beta_range_uni_Ticir)\ncolnames(res_beta_Ticir) <- paste(\"str\", 1:ncol(res_beta_Ticir))\nrownames(res_beta_Ticir) <- c(\"effect of sd (a)\", \"effect of sd (b)\", \n        \"effect of range (a)\", \"effect of range (b)\")\n\nres_beta_Tpcpr <- rbind(rev(beta_sd_norm_Tpcpr), rev(beta_sd_uni_Tpcpr), \n      beta_range_norm_Tpcpr, beta_range_uni_Tpcpr)\ncolnames(res_beta_Tpcpr) <- paste(\"str\", 1:ncol(res_beta_Tpcpr))\nrownames(res_beta_Tpcpr) <- c(\"effect of sd (a)\", \"effect of sd (b)\", \n        \"effect of range (a)\", \"effect of range (b)\")\n@\n\n<<Ex_resultsof_local_betaerrors1, results='asis'>>= \nprint(xtable(res_beta_Ticir, caption = 'Local beta-error of $T_{IC/IR}$ in function \n             of the strength of external filtering. str: strength. Trait a is \n             normally distributed and trait b is uniformally distributed.', \n             label = \"tab:local_beta_error_xtable_ticir\"), \n      caption.placement = \"top\", size = \"small\")\n@\n\n<<Ex_resultsof_local_betaerrors2, results='asis'>>= \nprint(xtable(res_beta_Ticir, caption = 'Local beta-error of $T_{PC/PR}$ in function \n             of the strength of external filtering. str: strength. Trait a is \n             normally distributed and trait b is uniformally distributed.', \n             label = \"tab:local_beta_error_xtable_tpcpr\"), \n      caption.placement = \"top\", size = \"small\")\n@\n \nNow we can see the beta-error for each strength (table \\ref{tab:local_beta_error_xtable_ticir} and \\ref{tab:local_beta_error_xtable_tpcpr}). A high value of range and a low value of standard error defined a high strength of filtering. For example, in the case of a trait normally distributed, the proportion of false negative is \\Sexpr{round(res_beta_Ticir[1, 1]*100, 2)}\\% for the higher value of standard errors and thus for the lower strength of external filtering.\n \n \n  \\subsubsubsection {Local $T_{IC/IR}$ and $T_{PC/PR}$ SES values against modeled parameter values}\n  \n  First we need to calculate the modeled parameter values. Here again we calculate the strength of external filtering by dividing the range of values in communities by their standard error.\n  \n<<Ex_filter_modeledparam>>= \nmean_range_com.interm <- t(matrix(unlist(lapply(mean_range_com, function(x) x)), nrow = 2))\nmean_sd_of_com <- unlist(lapply(sd.com_stock3, function(x) mean(x)))\n\nmodeled_param_norm <- mean_range_com.interm[, 1] / mean_sd_of_com \nmodeled_param_uni <- mean_range_com.interm[, 2] / mean_sd_of_com \nmodeled_param_norm.loc <- rep(modeled_param_norm, each = Ncom)\nmodeled_param_uni.loc <- rep(modeled_param_uni, each = Ncom)\n@\n\n<<Ex_filter_results_plot_modeledparam1, fig.height = 4, fig.cap = \"Local $T_{IC/IR}$ SES and modeled parameters values: Standardized effect size of $T_{IC/IR}$ in function of the strength of external filter defined by the ratio of the modeled range parameter by the modeled standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Local $T_{IC/IR}$ SES and modeled parameters values\">>= \nplot(meanSES.3loc.norm_Ticir, modeled_param_norm.loc, pch = 16, col = rgb(0, 0, 0, 0.6),\n  xlim = c(min(c(unlist(meanSES.3loc.norm_Ticir), unlist(meanSES.3loc.uni_Ticir)), \n    na.rm = T), 0),\n    ylim = c(0, min(max(c(modeled_param_norm.loc, modeled_param_uni.loc), na.rm = T), \n                    100)),  main = \"Local T_IC.IR\",\n  xlab = \"standardized effect size of T_IC.IR\",\n  ylab = \"modeled parameters: range/sd\")\nabline(v = mean(SES.inf.MEAN.norm_Ticir, na.rm = T))\n\npoints(meanSES.3loc.uni_Ticir, modeled_param_uni.loc, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(SES.inf.MEAN.uni_Ticir, na.rm = T), col = \"purple\")\n\nrect(mean(SES.inf.MEAN.norm_Ticir, na.rm = T), -1, 0, max(modeled_param_norm.loc) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(SES.inf.MEAN.uni_Ticir, na.rm = T),0, 0, max(modeled_param_uni.loc), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\n<<Ex_filter_results_plot_modeledparam2, fig.height = 4, fig.cap = \"Local $T_{PC/PR}$ SES and modeled parameters values: Standardized effect size of $T_{PC/PR}$ in function of the strength of external filter defined by the ratio of the modeled range parameter by the modeled standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Local $T_{PC/PR}$ SES and modeled parameters values\">>= \nplot(meanSES.3loc.norm_Tpcpr, modeled_param_norm.loc, pch = 16, col = rgb(0, 0, 0, 0.6),\n     xlim = c(min(c(unlist(meanSES.3loc.norm_Tpcpr), unlist(meanSES.3loc.uni_Tpcpr)), \n              na.rm = T), 0),\n     ylim = c(0, min(max(c(modeled_param_norm.loc, modeled_param_uni.loc), na.rm = T), \n                     100)),\n     main = \"Local T_PC.PR\",\n     xlab = \"standardized effect size of T_PC.PR\",\n     ylab = \"modeled parameters: range/sd\")\nabline(v = mean(SES.inf.MEAN.norm_Tpcpr, na.rm = T))\n\npoints(meanSES.3loc.uni_Tpcpr, modeled_param_uni.loc, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(SES.inf.MEAN.uni_Tpcpr, na.rm = T), col = \"purple\")\nrect(mean(SES.inf.MEAN.norm_Tpcpr, na.rm = T), -1, 0, max(modeled_param_norm.loc) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(SES.inf.MEAN.uni_Tpcpr, na.rm = T), 0, 0, max(modeled_param_uni.loc), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\nThere is a very hich correlation coefficient between initial and modeled parameter either for the range (trait a: Pearson correlation = \\Sexpr{round(cor.test(param_range, modeled_param_norm)[[4]], 3)}; trait b: Pearson correlation = \\Sexpr{round(cor.test(param_range, modeled_param_uni)[[4]], 3)}) and for the standard error(trait a and b: Pearson correlation = \\Sexpr{round(cor.test(sd_mean.param, mean_sd_of_com)[[4]], 3)}). Consequently the consistency between the figures \\ref{fig:Ex_filter_results_plot_initparam1} - \\ref{fig:Ex_filter_results_plot_initparam2} and \\ref{fig:Ex_filter_results_plot_modeledparam1} - \\ref{fig:Ex_filter_results_plot_modeledparam2} is not suprising. \n \n \\subsubsection {Global $T_{IC/IR}$ and $T_{PC/PR}$ results}\n \nIn contrast with local p-values, we call global p-values the p-values corresponding to one indice for one trait across all the communities. \n \n  \\subsubsubsection {Calculation of beta-error mixing all strength of filtering}\n \nTo illustrate the global power of $T_{IC/IR}$ and $T_{PC/PR}$ you can plot the ordered p-values and calculate a beta-error thanks to the code below. It's just an illustration because we mingle very different strength of external filter with different initial parameter values. Plot results are not shown in this document. \n \n<<External_filter_Results_pval_global, eval = FALSE>>= \npar(mfrow = c(2, 2))\nxx <- log10(sort(unlist(lapply(res.simu3.pval, function(x) x[21:30, 1]))))\nplot(xx, type = \"l\", main = \"T_IC.IR_distriNorm\")\nabline(h = log10(0.05))\nnbre_beta_error <- round((sum(xx>log10(0.05))+1)/(length(xx)+1), 4)\ntext(0, -0.8, labels = paste(\"beta error\", nbre_beta_error, sep = \" = \"), cex = 0.7, pos = 4)\n\nxx <- log10(sort(unlist(lapply(res.simu3.pval, function(x) x[41:50, 1]))))\nplot(xx, type = \"l\", main = \"T_PC.PR_distriNorm\")\nabline(h = log10(0.05))\nnbre_beta_error <- round((sum(xx>log10(0.05))+1)/(length(xx)+1), 4)\ntext(0, -0.8, labels = paste(\"beta error\", nbre_beta_error, sep = \" = \"), cex = 0.7, pos = 4)\n\n\nxx <- log10(sort(unlist(lapply(res.simu3.pval, function(x) x[21:30, 2]))))\nplot(xx, type = \"l\", main = \"T_IC.IR_distriUni\")\nabline(h = log10(0.05))\nnbre_beta_error <- round((sum(xx>log10(0.05))+1)/(length(xx)+1), 4)\ntext(0, -0.8, labels = paste(\"beta error\", nbre_beta_error, sep = \" = \"), cex = 0.7, pos = 4)\n\nxx <- log10(sort(unlist(lapply(res.simu3.pval, function(x) x[41:50, 2]))))\nplot(xx, type = \"l\", main = \"T_PC.PR_distriUni\")\nabline(h = log10(0.05))\nnbre_beta_error <- round((sum(xx>log10(0.05))+1)/(length(xx)+1), 4)\ntext(0, -0.8, labels = paste(\"beta error\", nbre_beta_error, sep = \" = \"), cex = 0.7, pos = 4)\n\npar(mfrow = c(1, 1))\n@\n\n\n  \\subsubsubsection {Global $T_{IC/IR}$ and $T_{PC/PR}$ SES values against initial parameter values}\n  \nAgain, this first results mix different initial parameter values. Now, we can plot the SES values in relation to the strength of the external filter assessed by the two parameters (either the initial values: \\texttt{mean\\_range\\_between\\_com} and \\texttt{mean\\_sd\\_of\\_com} or the modeled values \\texttt{mean\\_{}range\\_{}com} and \\texttt{sd.com\\_{}stock3} \\footnote{This modeled values are stochastic versions of the initial values.}). \n\nFirst, we need to compute the SES values from simulations.\n<<External_filter_Results_SES>>= \nmeanSES.3glob.norm_Ticir <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[,1], na.rm = T)))\nmeanSES.3glob.uni_Ticir <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[,2], na.rm = T)))\nmeanSES.3glob.norm_Tpcpr <- unlist(lapply(res.simu3, function(x)\n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[,1], na.rm = T)))\nmeanSES.3glob.uni_Tpcpr <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[,2], na.rm = T)))\n\nmeanSES.INF_glob.norm_Ticir <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 1], na.rm = T)))\nmeanSES.INF_glob.uni_Ticir <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 2], na.rm = T)))\nmeanSES.INF_glob.norm_Tpcpr <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 1], na.rm = T)))\nmeanSES.INF_glob.uni_Tpcpr <- unlist(lapply(res.simu3, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 2], na.rm = T)))\n@\n\nPlot the result against initial parameters (Fig. \\ref{fig:External_filter_Results_plots_initial_param1} and \\ref{fig:External_filter_Results_plots_initial_param2}).\n<<External_filter_Results_plots_initial_param1, fig.height = 4, fig.cap = \"Global $T_{IC/IR}$ SES and initial parameters values: Standardized effect size of $T_{IC/IR}$ in function of the strength of external filter defined by the ratio of the inital range parameter by the initial standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Global $T_{IC/IR}$ SES and initial parameters values\">>= \ninit_param <- param_range / sd_mean.param\n\nplot(meanSES.3glob.norm_Ticir, init_param, pch = 16, col = rgb(0, 0, 0, 0.6),\n     main = \"Global T_IC.IR\",\n     xlim = c(min(c(meanSES.3glob.norm_Ticir, meanSES.3glob.uni_Ticir), \n             na.rm = T), 0),\n     xlab = \"standardized effect size of T_IC.IR\",\n     ylab = \"initial parameters: range/sd\")\npoints(meanSES.3glob.uni_Ticir, init_param, pch = 16, col = rgb(0.5, 0, 1, 0.6),)\nabline(v = mean(meanSES.INF_glob.norm_Ticir, na.rm = T))\nabline(v = mean(meanSES.INF_glob.uni_Ticir, na.rm = T), col = \"purple\")\nrect(mean(meanSES.INF_glob.norm_Ticir, na.rm = T), -1, 0, max(modeled_param_norm.loc) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(meanSES.INF_glob.uni_Ticir, na.rm = T), 0, 0, max(modeled_param_uni.loc), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\n<<External_filter_Results_plots_initial_param2, fig.height = 4, fig.cap = \"Global $T_{PC/PR}$ SES and initial parameters values: Standardized effect size of $T_{PC/PR}$ in function of the strength of external filter defined by the ratio of the inital range parameter by the initial standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Global $T_{PC/PR}$ SES and initial parameters values\">>= \nplot(meanSES.3glob.norm_Tpcpr, init_param, pch = 16, col = rgb(0, 0, 0, 0.6),\n     main = \"Global T_PC.PR\",\n     xlim = c(min(c(meanSES.3glob.norm_Tpcpr, meanSES.3glob.uni_Tpcpr), \n            na.rm = T), 0),\n     xlab = \"standardized effect size of T_PC.PR\",\n     ylab = \"initial parameters: range/sd\")\npoints(meanSES.3glob.uni_Tpcpr, init_param, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(meanSES.INF_glob.norm_Tpcpr, na.rm = T))\nabline(v = mean(meanSES.INF_glob.uni_Tpcpr, na.rm = T), col = \"purple\")\nrect(mean(meanSES.INF_glob.norm_Tpcpr, na.rm = T), -1, 0, max(modeled_param_norm.loc) + 1, \n     col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(meanSES.INF_glob.uni_Tpcpr, na.rm = T), 0, 0, max(modeled_param_uni.loc), \n     col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n  \n  \\subsubsubsection {Global $T_{IC/IR}$ and $T_{PC/PR}$ SES values against modeled parameter values}\n  \nWe can verify the consistency of our results by plotting SES values against the modeled parameters values (Fig. \\ref{fig:External_filter_Results_plots_modeled_param1} and \\ref{fig:External_filter_Results_plots_modeled_param2}). \n\n<<External_filter_Results_plots_modeled_param1, fig.height = 4, fig.cap = \"Global $T_{IC/IR}$ SES and modeled parameters values: Standardized effect size of $T_{IC/IR}$ in function of the strength of external filter defined by the ratio of the modeled range parameter by the modeled standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Global $T_{IC/IR}$ SES and modeled parameters values\">>= \nmean_range_com.interm <- t(matrix(unlist(lapply(mean_range_com, function(x) x)), nrow = 2))\nmean_sd_of_com <- unlist(lapply(sd.com_stock3, function(x) mean(x)))\n\nmodeled_param_norm <- mean_range_com.interm[, 1] / mean_sd_of_com \nmodeled_param_uni <- mean_range_com.interm[, 2] / mean_sd_of_com \n\nplot(meanSES.3glob.norm_Ticir, modeled_param_norm, pch = 16, \n  main = \"Global T_IC.IR\",\n  xlim = c(min(c(meanSES.3glob.norm_Ticir, meanSES.3glob.uni_Ticir), na.rm = T), 0),\n  ylim = c(0, min(max(c(modeled_param_norm, modeled_param_uni), na.rm = T), 100)),\n  xlab = \"standardized effect size of T_IC.IR\",\n  ylab = \"modeled parameters: range/sd\")\npoints(meanSES.3glob.uni_Ticir, modeled_param_uni, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(meanSES.INF_glob.norm_Ticir, na.rm = T))\nabline(v = mean(meanSES.INF_glob.uni_Ticir, na.rm = T), col = \"purple\")\nrect(mean(meanSES.INF_glob.norm_Ticir, na.rm = T), -1, 0, max(modeled_param_norm) + 1, \n  col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(meanSES.INF_glob.uni_Ticir, na.rm = T), 0, 0, max(modeled_param_uni), \n  col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\n<<External_filter_Results_plots_modeled_param2, fig.height = 4, fig.cap = \"Global $T_{PC/PR}$ SES and modeled parameters values: Standardized effect size of $T_{PC/PR}$ in function of the strength of external filter defined by the ratio of the modeled range parameter by the modeled standard error parameter. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$). Trait a (normal) in black and b (uniform) in purple.\", dev ='png', dpi = 100, fig.scap = \"Global $T_{PC/PR}$ SES and modeled parameters values\">>= \nplot(meanSES.3glob.norm_Tpcpr, modeled_param_norm, pch = 16,\n  main = \"Global T_PC.PR\",\n  xlim = c(min(c(meanSES.3glob.norm_Tpcpr, meanSES.3glob.uni_Tpcpr), \n    na.rm = T), 0),\n  ylim = c(0, min(max(c(modeled_param_norm, modeled_param_uni), na.rm = T), 100)),\n  xlab = \"standardized effect size of T_PC.PR\",\n  ylab = \"modeled parameters: range/sd\")\npoints(meanSES.3glob.uni_Tpcpr, modeled_param_uni, pch = 16, col = rgb(0.5, 0, 1, 0.6))\nabline(v = mean(meanSES.INF_glob.norm_Tpcpr, na.rm = T))\nabline(v = mean(meanSES.INF_glob.uni_Tpcpr, na.rm = T), col = \"purple\")\nrect(mean(meanSES.INF_glob.norm_Tpcpr, na.rm = T), -1, 0, max(modeled_param_norm) + 1, \n  col = rgb(0, 0, 0, 0.3), border = NA)\nrect(mean(meanSES.INF_glob.uni_Tpcpr, na.rm = T), 0, 0, max(modeled_param_uni), \n  col = rgb(0.5, 0, 1, 0.3), border = NA)\n@\n\n\n  \\subsection {Conclusion on the power of $T_{IC/IR}$ to detect external filtering}\n\nTo conclude on the power of $T_{IC/IR}$ to detect external filtering, we compute exponential linear model and identify the strength from which the beta-error is inferior to 0.05. This strength is define by the two ratio of the initial parameters \\texttt{param\\_range} and \\texttt{sd\\_mean.param}. \n\n<<Ex_conc_plot1, fig.cap = \"Power of $T_{IC/IR}$ to detect external filtering: Standardised Effect Size (SES) of $T_{IC/IR}$ in relation to the strength of external filtering. Trait 'a' normally distributed is shown in black, traits 'b' uniformally distributed in purple. Close circles represent global SES values. The exponential linear model is presented with 5 percents confidence interval on both side. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$)\", fig.scap = \"Power of $T_{IC/IR}$ to detect external filtering\", dev ='png', dpi = 100>>=\nplot(meanSES.3loc.norm_Ticir ~ init_param.loc, col = rgb(0, 0, 0, 0.2), \n     ylim = c(min(c(meanSES.3loc.norm_Ticir , meanSES.3loc.uni_Ticir,\n                  meanSES.3glob.norm_Ticir, meanSES.3glob.uni_Ticir), na.rm = T), 0),\n     main = \"Global T_IC.IR\",\n     ylab = \"standardized effect size of T_IC.IR\",\n     xlab = \"initial parameters: range/sd\",\n     type = \"n\")\n#points(meanSES.3loc.uni_Ticir ~ init_param.loc, col = rgb(0.5, 0, 1, 0.2))\n\npoints(meanSES.3glob.norm_Ticir ~ init_param, pch = 16, col = rgb(0, 0, 0, 0.5), cex = 1.2)\nlm.norm <- lm(meanSES.3glob.norm_Ticir ~ log(init_param))\nlm.norm_conf <- confint(lm.norm, level = 0.90)\ncurve(lm.norm$coef[1] + log(x) * (lm.norm$coef[2]), add = T, lwd = 3, col = rgb(0, 0, 0, 1))\ncurve(lm.norm_conf [1, 1] + log(x) * lm.norm_conf [2, 1], add = T, lty = 2, col = rgb(0, 0, 0, 1))\ncurve(lm.norm_conf [1, 2] + log(x) * lm.norm_conf [2, 2], add = T, lty = 2, col = rgb(0, 0, 0, 1))\n\npoints(meanSES.3glob.uni_Ticir ~ init_param, pch = 16, col = rgb(0.5, 0, 1, 0.5), cex = 1.2)\nlm.uni <- lm(meanSES.3glob.uni_Ticir ~ log(init_param))\nlm.uni_conf <- confint(lm.uni, level = 0.90)\ncurve(lm.uni$coef[1] + log(x) * (lm.uni$coef[2]), add = T, lwd = 3,  col = rgb(0.5, 0, 1, 1))\ncurve(lm.uni_conf [1, 1] + log(x) * lm.uni_conf [2, 1], add = T, lty = 2, col = rgb(0.5, 0, 1, 1))\ncurve(lm.uni_conf [1, 2] + log(x) * lm.uni_conf [2, 2], add = T, lty = 2, col = rgb(0.5, 0, 1, 1))\n\n\nrect(-1, mean(c(SES.inf.MEAN.uni_Ticir, meanSES.INF_glob.uni_Ticir), na.rm = T), max(init_param), 10, \n  col = rgb(0.5, 0, 1, 0.3), border = NA)\n\nrect(-1, mean(c(SES.inf.MEAN.norm_Ticir, meanSES.INF_glob.norm_Ticir), na.rm = T), max(init_param) + 10, 10, \n  col = rgb(0, 0, 0, 0.3), border = NA)\n\n@\n\n<<Ex_conc_res1>>=\nyy.norm <- mean(c(SES.inf.MEAN.norm_Ticir, meanSES.INF_glob.norm_Ticir), na.rm = T)\nyy.uni <- mean(c(SES.inf.MEAN.uni_Ticir, meanSES.INF_glob.uni_Ticir), na.rm = T)\n\nparam_beta0.05_Ticir.norm <- exp( (yy.norm - lm.norm_conf [1, 2]) / lm.norm_conf [2, 2] )\nparam_beta0.05_Ticir.uni <- exp( (yy.uni - lm.uni_conf [1, 2]) / lm.uni_conf [2, 2] )\n@\n\n\nFor the trait \"a\" normally distributed, the power of $T_{IC/IR}$ is satisfactory if the ratio of the initial parameter is superior to\n \\Sexpr{round(param_beta0.05_Ticir.norm, 2)}. For the trait \"b\" uniformally distributed, this value is \\Sexpr{round(param_beta0.05_Ticir.uni, 2)}. \n Further investigation on real data with different strength of external filtering are needed to complete these simulated values.\n\n \n\n\n\n\n  \\subsection {Conclusion on the power of $T_{PC/PR}$ to detect external filtering}\n\nTo conclude on the power of $T_{PC/PR}$ to detect external filtering, we compute exponential linear model and identify the strength from which the beta-error is inferior to 0.05. This strength is define by the two ratio of the initial parameters \\texttt{param\\_range} and \\texttt{sd\\_mean.param}. \n\n<<Ex_conc_plot2, fig.cap = \"Power of $T_{PC/PR}$ to detect external filtering: Standardised Effect Size (SES) of $T_{PC/PR}$ in relation to the strength of external filtering. Trait 'a' normally distributed is shown in black, traits 'b' uniformally distributed in purple. Close circles represent global SES values. The exponential linear model is represented with 5 percents confidence interval on both side. Colored area represent the mean confidence interval of SES values ($alpha = 0.95$)\", fig.scap = \"Power of $T_{PC/PR}$ to detect external filtering\", dev ='png', dpi = 100>>=\nplot(meanSES.3loc.norm_Tpcpr ~ init_param.loc, col = rgb(0, 0, 0, 0.2), \n     ylim = c(min(c(meanSES.3loc.norm_Tpcpr , meanSES.3loc.uni_Tpcpr,\n                  meanSES.3glob.norm_Tpcpr, meanSES.3glob.uni_Tpcpr), na.rm = T), 0),\n     main = \"Global T_PC.IR\",\n     ylab = \"standardized effect size of T_PC.IR\",\n     xlab = \"initial parameters: range/sd\",\n     type = \"n\")\n#points(meanSES.3loc.uni_Tpcpr ~ init_param.loc, col = rgb(0.5, 0, 1, 0.2))\n\npoints(meanSES.3glob.norm_Tpcpr ~ init_param, pch = 16, col = rgb(0, 0, 0, 0.5), cex = 1.2)\nlm.norm <- lm(meanSES.3glob.norm_Tpcpr ~ log(init_param))\nlm.norm_conf <- confint(lm.norm, level = 0.90)\ncurve(lm.norm$coef[1] + log(x) * (lm.norm$coef[2]), add = T, lwd = 3, col = rgb(0, 0, 0, 1))\ncurve(lm.norm_conf [1, 1] + log(x) * lm.norm_conf [2, 1], add = T, lty = 2, col = rgb(0, 0, 0, 1))\ncurve(lm.norm_conf [1, 2] + log(x) * lm.norm_conf [2, 2], add = T, lty = 2, col = rgb(0, 0, 0, 1))\n\npoints(meanSES.3glob.uni_Tpcpr ~ init_param, pch = 16, col = rgb(0.5, 0, 1, 0.5), cex = 1.2)\nlm.uni <- lm(meanSES.3glob.uni_Tpcpr ~ log(init_param))\nlm.uni_conf <- confint(lm.uni, level = 0.90)\ncurve(lm.uni$coef[1] + log(x) * (lm.uni$coef[2]), add = T, lwd = 3,  col = rgb(0.5, 0, 1, 1))\ncurve(lm.uni_conf [1, 1] + log(x) * lm.uni_conf [2, 1], add = T, lty = 2, col = rgb(0.5, 0, 1, 1))\ncurve(lm.uni_conf [1, 2] + log(x) * lm.uni_conf [2, 2], add = T, lty = 2, col = rgb(0.5, 0, 1, 1))\n\n\nrect(-1, mean(c(SES.inf.MEAN.uni_Tpcpr, meanSES.INF_glob.uni_Tpcpr), na.rm = T), max(init_param), 10, \n  col = rgb(0.5, 0, 1, 0.3), border = NA)\n\nrect(-1, mean(c(SES.inf.MEAN.norm_Tpcpr, meanSES.INF_glob.norm_Tpcpr), na.rm = T), max(init_param) + 10, 10, \n  col = rgb(0, 0, 0, 0.3), border = NA)\n\n@\n\n<<Ex_conc_res2>>=\nyy.norm <- mean(c(SES.inf.MEAN.norm_Tpcpr, meanSES.INF_glob.norm_Tpcpr), na.rm = T)\nyy.uni <- mean(c(SES.inf.MEAN.uni_Tpcpr, meanSES.INF_glob.uni_Tpcpr), na.rm = T)\n\nparam_beta0.05_Tpcpr.norm <- exp( (yy.norm - lm.norm_conf [1, 2]) / lm.norm_conf [2, 2] )\nparam_beta0.05_Tpcpr.uni <- exp( (yy.uni - lm.uni_conf [1, 2]) / lm.uni_conf [2, 2] )\n@\n\n\nFor the trait \"a\" normally distributed, the power of $T_{PC/PR}$ is satisfactory if the ratio of the initial parameter is superior to\n \\Sexpr{round(param_beta0.05_Tpcpr.norm, 2)}. For the trait \"b\" uniformally distributed, this value is \\Sexpr{round(param_beta0.05_Tpcpr.uni, 2)}. \n Further investigation on real data with different strength of external filtering are needed to complete these simulated values. As expected, $T_{PC/PR}$ is far less powerfull than $T_{IC/IR}$ to detect external filtering either with traits \"a\" (\\Sexpr{round(param_beta0.05_Tpcpr.norm, 2)} \\textit{vs} \\Sexpr{round(param_beta0.05_Ticir.norm, 2)}) and \"b\" (\\Sexpr{round(param_beta0.05_Tpcpr.uni, 2)} \\textit{vs} \\Sexpr{round(param_beta0.05_Ticir.uni, 2)}). This is due to the loss of information in $T_{PC/PR}$ when we compute the mean by population and exclude intra-populationnal variation from the test of external filter. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\cleardoublepage\n\n\\section{Internal and external filtering}\n\n  \\subsection{Randomization outline}\nWe use the same two parameters as for internal and external filtering analysis. The internal filtering is computed as in the section dedicated to internal filter. To add the effect of external filtering, we add a value to each individual belonging to a community, this values differing among communities.\n\n<<Internal_and_external_filter_parameter>>= \n# Parameter for the distance between species mean trait values\nparam_DIST_between_MEAN.init <- round(sort(seq(10, 200, length.out = nb_param_val)), 2)\nparam_DIST_between_MEAN <- rep(param_DIST_between_MEAN.init, N_repet_Param)\nmean_sd.param <- rep(10, nperm)\n\n# Parameter for the variance in species mean trait values\nparam_SD <- seq(10, 100,length.out = nb_param_val)\nsd_mean.param <- sample (rep(param_SD, N_repet_Param), \n       size = length(rep(param_SD, N_repet_Param)), replace = F)\nsd_sd.param <- rep(10, nperm)\n\nnperm <- N_repet_Param*length(param_SD)\n@\n\n<<Internal_and_external_filter, results = 'hide'>>= \n#Start simulation \nmean.sp_stock4 <- list()\nsd.sp_stock4 <- list()\nmean.com_stock4 <- list()\nsd.com_stock4 <- list()\nres.simu4 <- list()\nres.simu4.pval <- list()\nres.simu.traits4 <- list()\n\nfor(n in 1:nperm){#for each permutation\n\nex.sp4 <- c()\nex.com4 <- matrix(0, nrow = 10, ncol = 20)\nfor(i in 1: 10){\n ex.com.interm <- table(sample(sp, size = 100, prob = rlnorm(20, 0, sdlog), replace = T))\n ex.com4[i, sp%in% names(ex.com.interm)] <- ex.com.interm\n ex.sp4 <- c(ex.sp4, rep(sp, times = ex.com4[i,]))\n}\n\nex.indplot4 <- sort(as.factor(rep(com, 100)))\n\n\n#Defining traits mean and sd by species \nmean_mean.param.interm <- seq(max.value_traits - param_DIST_between_MEAN[n],\n        max.value_traits, length.out = \n        length(unique(param_DIST_between_MEAN)))\n\nmean_mean.param <- rep(round(sort(mean_mean.param.interm), 2),\n        N_repet_Param)\n\nmean.sp <- rnorm(length(unique(sp)), mean = mean_mean.param, sd = mean_sd.param[n])\nsd.sp <- rnorm(length(unique(sp)), mean = sd_mean.param[n], sd = sd_sd.param[n]) \n\nex.traits4 <- array(NA, dim = c(1000, 2))\ncolnames(ex.traits4) <- paste(\"trait\", c(\"a\", \"b\"), sep = \" \")\n\nfor(s in unique(ex.sp4)){\n #trait a : normal distribution\n ex.traits4[ex.sp4 == s, 1] <- rnorm(500, rep(mean.sp[unique(ex.sp4) == s], 500), \n         rep(sd.sp[unique(ex.sp4) == s], 500))[1:sum(ex.sp4 == s)]\n \n #trait b : uniform distribution\n ex.traits4[ex.sp4 == s, 2] <- runif(500, min = rep(mean.sp[unique(ex.sp4) == s], 500) - \n         rep(sd.sp[unique(ex.sp4) == s], 500), \n         max = rep(mean.sp[unique(ex.sp4) == s], 500) + \n         rep(sd.sp[unique(ex.sp4) == s], 500))[1:sum(ex.sp4 == s)]\n}\n\nmean.com.add <- rnorm(length(unique(com)), mean = mean_mean.param, sd = mean_sd.param[n])\nsd.com.add <- rnorm(length(unique(com)), mean = sd_mean.param[n], sd = sd_sd.param[n]) \n\nfor(c in unique(ex.indplot4)){\n #trait a : normal distribution\n ex.traits4[ex.indplot4 == c, 1] <- \n ex.traits4[ex.indplot4 == c, 1] + \n rnorm(500, rep(mean.com.add[unique(ex.indplot4) == c], 500),\n rep(sd.com.add [unique(ex.indplot4) == c], 500))[1:sum(ex.indplot4 == c)]\n \n #trait b : uniform distribution \n ex.traits4[ex.indplot4 == c, 2] <- \n ex.traits4[ex.indplot4 == c, 2] + \n runif(500, min = rep(mean.com.add[unique(ex.indplot4) == c], 500) - \n rep(sd.com.add[unique(ex.indplot4) == c], 500), \n max = rep(mean.com.add [unique(ex.indplot4) == c], 500) + \n rep(sd.com.add [unique(ex.indplot4) == c], 500))[1:sum(ex.indplot4 == c)]\n}\n\n#stock results\nmean.sp_stock4[[n]] <- mean.sp \nsd.sp_stock4[[n]] <- sd.sp\n\nmean.com_stock4[[n]] <- mean.com.add\nsd.com_stock4[[n]] <- sd.com.add \n\nres.simu.traits4[[n]] <- ex.traits4\nres.simu4[[n]] <- Tstats(ex.traits4, ex.indplot4, ex.sp4)\nres.simu4.pval[[n]] <- sum_Tstats(res.simu4[[n]], type = \"p.value\")\nprint(paste(\"---\", round(n/nperm, 2) * 100, \"%\", sep = \" \"))\n}#End of simulations\n@\n\n\n\n  \\subsection{Results}\n<<InEx_Filter_plots, fig.cap = \"Distribution of traits for one randomization with both internal and external filter: (a) Communities trait distributions for the trait a (normal distribution); (b) Communities trait distributions for the trait b (uniform distribution); (c) Species trait distributions for the trait a; (d) Species trait distributions for the trait b\", crop = TRUE>>= \npar(mfrow=c(2, 2))\nplotDistri(ex.traits4, rep(\"all_sp\", times = dim(ex.traits1)[1]), ex.indplot4, \n           plot.ask = F, multipanel = F, leg =c(T, F), main = c(\"a\", \"b\"))\nplotDistri(ex.traits4, rep(\"region\", times = dim(ex.traits1)[1]), ex.sp4, \n           plot.ask = F, multipanel = F, leg =c(T, F), main = c(\"c\", \"d\"), \n           ylim = c(0, 0.01))\npar(mfrow=c(1, 1))\n@\n\n<<InEx_Filter_plots_Tstats, fig.height = 8, fig.cap = \"Results of T-statistics with both internal and external filter: $T_{IP/IC}$ in red, $T_{IC/IR}$ in purple and $T_{PC/PR}$ in green. (a) Lower strength of internal filtering 5 (b) higher strength of internal filtering.\", crop = TRUE>>= \npar(mfrow=c(3, 1))\nplot(res.simu4[[1]], main = \"a\")\nplot(res.simu4[[nperm/2]], main = \"b\")\nplot(res.simu4[[nperm]], main = \"c\")\npar(mfrow=c(1, 1))\n@\n  \n\n<<ExIn_filter_locresults_SES>>= \nmeanSES.4loc.norm_Tipic <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[, 1]))\nmeanSES.4loc.uni_Tipic <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[, 2]))\nSES.inf.MEAN.norm_Tipic <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 1]))\nSES.inf.MEAN.uni_Tipic <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 2]))\n\nmeanSES.4loc.norm_Ticir <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[, 1]))\nmeanSES.4loc.uni_Ticir <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[, 2]))\nSES.inf.MEAN.norm_Ticir <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 1]))\nSES.inf.MEAN.uni_Ticir <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 2]))\n\nmeanSES.4loc.norm_Tpcpr <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[, 1]))\nmeanSES.4loc.uni_Tpcpr <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[, 2]))\nSES.inf.MEAN.norm_Tpcpr <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 1]))\nSES.inf.MEAN.uni_Tpcpr <- unlist(lapply(res.simu4, function(x) \n             ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 2]))\n@\n\n\n<<ExIn_filter_globresults_SES>>=  \nmeanSES.4glob.norm_Tipic <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[,1], na.rm = T)))\nmeanSES.4glob.uni_Tipic <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses[,2], na.rm = T)))\nmeanSES.INF_glob.norm_Tipic <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 1], na.rm = T)))\nmeanSES.INF_glob.uni_Tipic <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_1$ses.inf[, 2], na.rm = T)))\n\nmeanSES.4glob.norm_Ticir <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[,1], na.rm = T)))\nmeanSES.4glob.uni_Ticir <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses[,2], na.rm = T)))\nmeanSES.INF_glob.norm_Ticir <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 1], na.rm = T)))\nmeanSES.INF_glob.uni_Ticir <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_2$ses.inf[, 2], na.rm = T)))\n\nmeanSES.4glob.norm_Tpcpr <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[,1], na.rm = T)))\nmeanSES.4glob.uni_Tpcpr <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses[,2], na.rm = T)))\nmeanSES.INF_glob.norm_Tpcpr <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 1], na.rm = T)))\nmeanSES.INF_glob.uni_Tpcpr <- unlist(lapply(res.simu4, function(x) \n           mean(ses.listofindex(as.listofindex(x))\n             $index_1_3$ses.inf[, 2], na.rm = T)))\n\n\n@\n\n\n\n<<ExIn_filter_globresults_lm>>=  \n\n# trait a\nlm_glob_norm_Tipic <- lm(meanSES.4glob.norm_Tipic ~ log(init_param))\nlm_glob_norm_Tipic.conf <- confint(lm_glob_norm_Tipic , level = 0.90)\nlm_glob_norm_Ticir <- lm(meanSES.4glob.norm_Ticir ~ log(init_param))\nlm_glob_norm_Ticir.conf <- confint(lm_glob_norm_Ticir , level = 0.90)\nlm_glob_norm_Tpcpr <- lm(meanSES.4glob.norm_Tpcpr ~ log(init_param))\nlm_glob_norm_Tpcpr.conf <- confint(lm_glob_norm_Tpcpr , level = 0.90)\nyy.glob_norm_Tipic <- mean(meanSES.INF_glob.norm_Tipic, na.rm = T)\nyy.glob_norm_Ticir <- mean(meanSES.INF_glob.norm_Ticir, na.rm = T)\nyy.glob_norm_Tpcpr <- mean(meanSES.INF_glob.norm_Tpcpr, na.rm = T)\nparam_B_glob_norm_Tipic <- exp( (yy.glob_norm_Tipic - lm_glob_norm_Tipic.conf [1, 2]) / \n                                  lm_glob_norm_Tipic.conf [2, 2] )\nparam_B_glob_norm_Ticir <- exp( (yy.glob_norm_Ticir - lm_glob_norm_Ticir.conf [1, 2]) / \n                                  lm_glob_norm_Ticir.conf [2, 2] )\nparam_B_glob_norm_Tpcpr <- exp( (yy.glob_norm_Tpcpr - lm_glob_norm_Tpcpr.conf [1, 2]) / \n                                  lm_glob_norm_Tpcpr.conf [2, 2] )\n\nlm_loc_norm_Tipic <- lm(meanSES.4loc.norm_Tipic ~ log(init_param.loc))\nlm_loc_norm_Tipic.conf <- confint(lm_loc_norm_Tipic, level = 0.90)\nlm_loc_norm_Ticir <- lm(meanSES.4loc.norm_Ticir ~ log(init_param.loc))\nlm_loc_norm_Ticir.conf <- confint(lm_loc_norm_Ticir, level = 0.90)\nlm_loc_norm_Tpcpr <- lm(meanSES.4loc.norm_Tpcpr ~ log(init_param.loc))\nlm_loc_norm_Tpcpr.conf <- confint(lm_loc_norm_Tpcpr, level = 0.90)\nyy.loc_norm_Tipic <- mean(SES.inf.MEAN.norm_Tipic, na.rm = T)\nyy.loc_norm_Ticir <- mean(SES.inf.MEAN.norm_Ticir, na.rm = T)\nyy.loc_norm_Tpcpr <- mean(SES.inf.MEAN.norm_Tpcpr, na.rm = T)\nparam_B_loc_norm_Tipic <- exp( (yy.loc_norm_Tipic - lm_loc_norm_Tipic.conf [1, 2]) / \n                                  lm_loc_norm_Tipic.conf [2, 2] )\nparam_B_loc_norm_Ticir <- exp( (yy.loc_norm_Ticir - lm_loc_norm_Ticir.conf [1, 2]) / \n                                  lm_loc_norm_Ticir.conf [2, 2] )\nparam_B_loc_norm_Tpcpr <- exp( (yy.loc_norm_Tpcpr - lm_loc_norm_Tpcpr.conf [1, 2]) / \n                                  lm_loc_norm_Tpcpr.conf [2, 2] )\n\n# trait b\nlm_glob_uni_Tipic <- lm(meanSES.4glob.uni_Tipic ~ log(init_param))\nlm_glob_uni_Tipic.conf <- confint(lm_glob_uni_Tipic , level = 0.90)\nlm_glob_uni_Ticir <- lm(meanSES.4glob.uni_Ticir ~ log(init_param))\nlm_glob_uni_Ticir.conf <- confint(lm_glob_uni_Ticir , level = 0.90)\nlm_glob_uni_Tpcpr <- lm(meanSES.4glob.uni_Tpcpr ~ log(init_param))\nlm_glob_uni_Tpcpr.conf <- confint(lm_glob_uni_Tpcpr , level = 0.90)\nyy.glob_uni_Tipic <- mean(meanSES.INF_glob.uni_Tipic, na.rm = T)\nyy.glob_uni_Ticir <- mean(meanSES.INF_glob.uni_Ticir, na.rm = T)\nyy.glob_uni_Tpcpr <- mean(meanSES.INF_glob.uni_Tpcpr, na.rm = T)\nparam_B_glob_uni_Tipic <- exp( (yy.glob_uni_Tipic - lm_glob_uni_Tipic.conf [1, 2]) / \n                                  lm_glob_uni_Tipic.conf [2, 2] )\nparam_B_glob_uni_Ticir <- exp( (yy.glob_uni_Ticir - lm_glob_uni_Ticir.conf [1, 2]) / \n                                  lm_glob_uni_Ticir.conf [2, 2] )\nparam_B_glob_uni_Tpcpr <- exp( (yy.glob_uni_Tpcpr - lm_glob_uni_Tpcpr.conf [1, 2]) / \n                                  lm_glob_uni_Tpcpr.conf [2, 2] )\n\nlm_loc_uni_Tipic <- lm(meanSES.4loc.uni_Tipic ~ log(init_param.loc))\nlm_loc_uni_Tipic.conf <- confint(lm_loc_uni_Tipic, level = 0.90)\nlm_loc_uni_Ticir <- lm(meanSES.4loc.uni_Ticir ~ log(init_param.loc))\nlm_loc_uni_Ticir.conf <- confint(lm_loc_uni_Ticir, level = 0.90)\nlm_loc_uni_Tpcpr <- lm(meanSES.4loc.uni_Tpcpr ~ log(init_param.loc))\nlm_loc_uni_Tpcpr.conf <- confint(lm_loc_uni_Tpcpr, level = 0.90)\nyy.loc_uni_Tipic <- mean(SES.inf.MEAN.uni_Tipic, na.rm = T)\nyy.loc_uni_Ticir <- mean(SES.inf.MEAN.uni_Ticir, na.rm = T)\nyy.loc_uni_Tpcpr <- mean(SES.inf.MEAN.uni_Tpcpr, na.rm = T)\nparam_B_loc_uni_Tipic <- exp( (yy.loc_uni_Tipic - lm_loc_uni_Tipic.conf [1, 2]) / \n                                  lm_loc_uni_Tipic.conf [2, 2] )\nparam_B_loc_uni_Ticir <- exp( (yy.loc_uni_Ticir - lm_loc_uni_Ticir.conf [1, 2]) / \n                                  lm_loc_uni_Ticir.conf [2, 2] )\nparam_B_loc_uni_Tpcpr <- exp( (yy.loc_uni_Tpcpr - lm_loc_uni_Tpcpr.conf [1, 2]) / \n                                  lm_loc_uni_Tpcpr.conf [2, 2] )\n\n@\n\nFor the analysis with both internal and external filter we only present the type II error using the initial parameter ratio allowing a beta-error $<0.05$.  \n\n\\begin{table}[h!]\n\\begin{center}\n\\caption{Initial parameter ratio allowing beta-error $<0.05$ for T-statistics under both external and internal filtering}\n\\begin{tabular}{|c|c|c|c|m{6cm}|}\n\\hline\nTraits & Indices & Average between communities? & Initial parameter ratio$ \\tabularnewline\n\\hline \\hline \\hline\n\\multirow{6}{*}{Trait a (normal)} & \\multirow{2}{*}{$T_{IP.IC}$} & no (local) & \\Sexpr{round(param_B_loc_norm_Tipic, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global) & \\Sexpr{round(param_B_glob_norm_Tipic, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{IC.IR}$} & no (local) & \\Sexpr{round(param_B_loc_norm_Ticir, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global) & \\Sexpr{round(param_B_glob_norm_Ticir, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{PC.PR}$} & no (local) & \\Sexpr{round(param_B_loc_norm_Tpcpr, 3)} \\tabularnewline\n\\cline{3-4}\n & & yes (global)& \\Sexpr{round(param_B_glob_norm_Tpcpr, 3)} \\tabularnewline\n\n\\hline \\hline \\hline\n\n\\multirow{6}{*}{Trait b (uniform)} & \\multirow{2}{*}{$T_{IP.IC}$} & no (local) & \\Sexpr{round(param_B_loc_uni_Tipic, 3)} \\tabularnewline\n\\cline{3-4}\n & & yes (global) &  \\Sexpr{round(param_B_glob_uni_Tipic, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{IC.IR}$} & no (local) & \\Sexpr{round(param_B_loc_uni_Ticir, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global) &  \\Sexpr{round(param_B_glob_uni_Ticir, 3)} \\tabularnewline\n\\cline{2-4} \n & \\multirow{2}{*}{$T_{PC.PR}$} & no (local) & \\Sexpr{round(param_B_loc_uni_Tpcpr, 3)} \\tabularnewline\n\\cline{3-4} \n & & yes (global)&  \\Sexpr{round(param_B_glob_uni_Tpcpr, 3)} \\tabularnewline\n\\hline \n\\end{tabular}\n\\end{center}\n\\end{table}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\cleardoublepage\n\n\\section{Test of variance decomposition functions}\n \nIn addition to the \\texttt{cati} vignette that test this function on the Darwin finch data, we test the behavior of the function \\texttt{partvar} and \\texttt{decompCTRE} by building two toy models associated to each functions.\n \n \\subsection{Behavior of the function \\texttt{partvar}}\n\nFirst to test the behavior of the \\texttt{partvar} function we assemble the same data as in the test of the T-statistics. \n1000 individuals belonging to 20 species occuring in 10 communities. But here we define the trait value for one individual as the addition of three values, each one draw in a normal distribution of mean 0 and standard error 1: (i) a value depending on the species the individual belong to, (ii) a value depending on the community the individual belong to and (iii) a independent value measuring the individual variance.\n\n<<Toy_model_2, results = 'hide'>>= \nnperm <- npermut\n\nsdlog = 1.5\n#Ten communities named A, B, C ... J\ncom <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\") \n#Twenty species sp1, sp2, sp3, ... sp20\nsp <- paste(\"sp\", seq(1:20), sep = \"\")\n\nres.partvar_toymodel <- list()\nfor(n in 1:nperm){#for each permutation\n \n # Draw communities using lognormal distribution of abundances \n # 100 individuals by populations\n ex.sp5 <- c()\n ex.com5 <- matrix(0, nrow = 10, ncol = 20)\n for(i in 1: 10){\n ex.com.interm <- table(sample(sp, size = 100, prob = rlnorm(20, 0, sdlog), replace = T))\n ex.com5[i, sp%in% names(ex.com.interm)] <- ex.com.interm\n ex.sp5 <- c(ex.sp5, rep(sp, times = ex.com5[i,]))\n }\n\n \n x1 <- c()\n ex.sp5 <- as.factor(ex.sp5)\n for(s in 1:20){\n x1[ex.sp5 == levels(ex.sp5)[s]] <- rnorm(1)\n }\n \n ex.indplot5 <- sort(as.factor(rep(com, 100)))\n x2 <- c()\n x3 <- c()\n for(c in 1:10){\n x2[ex.indplot5 == levels(ex.indplot5 )[c]] <- rnorm(1)\n }\n X <- rnorm(1000) + x1 + x2\n \n res.partvar_toymodel[[n]] <- partvar(X, factors = cbind(sites = ex.indplot5, \n               species = ex.sp5))\n}\n\n@\n\nNow we can plot the result as the density of the three component of variation in individual traits distributions. \nWe are waiting for a mean of approximately 0.33 for each component in view of our model.\n\n<<Partvar_plot, fig.width = 6, fig.height = 6, fig.cap = \"Variance partitioning accross nested scales: each colored lines represent the density of permutations results (sites in blue, species in orange and the remaining variance in brown). Points represent the mean and segments the standard deviation. Vertical line figure the value of 0.33.\">>= \nres.simu.partvar_toymodel <- lapply(res.partvar_toymodel, function (x) x[, 1])\nres.simu.partvar_toymodel <- t(matrix(unlist(res.simu.partvar_toymodel), nrow = 3))\ncolnames(res.simu.partvar_toymodel) <- c(\"sites\", \"species\", \"within\")\ncol.funk <- funky.col(3)\n\nplot(density(res.simu.partvar_toymodel[, 3]), col = col.funk[3], \n  pch = 16, xlim = c(0, 0.9), lwd = 2)\nlines(density(res.simu.partvar_toymodel[, 1]), col = col.funk[1], lwd = 2)\nlines(density(res.simu.partvar_toymodel[, 2]), col = col.funk[2], lwd = 2)\nabline(v = 0.33)\npoints(apply(res.simu.partvar_toymodel, 2, mean), \n   c(max(density(res.simu.partvar_toymodel[, 1])$y)/2, \n   max(density(res.simu.partvar_toymodel[, 2])$y)/2,\n   max(density(res.simu.partvar_toymodel[, 3])$y)/2),\n   col = col.funk)\nsegments(apply(res.simu.partvar_toymodel, 2, mean) - apply(res.simu.partvar_toymodel, 2, sd), \n   c(max(density(res.simu.partvar_toymodel[, 1])$y)/2, \n   max(density(res.simu.partvar_toymodel[, 2])$y)/2,\n   max(density(res.simu.partvar_toymodel[, 3])$y)/2),\n   apply(res.simu.partvar_toymodel, 2, mean) + apply(res.simu.partvar_toymodel, 2, sd),\n   c(max(density(res.simu.partvar_toymodel[, 1])$y)/2, \n   max(density(res.simu.partvar_toymodel[, 2])$y)/2,\n   max(density(res.simu.partvar_toymodel[, 3])$y)/2),\n   col = col.funk)\nlegend(0.6, 4, legend = c(\"sites\", \"species\", \"within\"), fill = col.funk)\ntext(0.33, 0.5, pos = 4, \"0.33\")\n@\n\nThe mean contribution of each component is close to 0.33. Consequently the function \\texttt{partvar} doesn't show apparent dysfunction.\n\n\\subsection{Behavior of the function \\texttt{decompCTRE}}\n\nTo test the function \\texttt{decompCTRE}, we adopt the same model but we add a new step to control the strength of the turnover in defining the community weighted mean.\nWe define several value of turnover strength by deleting individuals from the data set if there their species-components trait and their community-component trait are to different. To be more precise, when \\texttt{turnover\\_strength} = 1, we delete all individual whose the square of the species value minus the community value is superior o one. \n\n<<decompCTRE_simu, results = 'hide'>>= \nsdlog = 1.5\nturnover_strength <- rep(c(0.01, 0.1, 0.2, 0.5, 1, 2, 3.5, 5, 7.5, 10, 12.5, 15), \n                         N_repet_Param)\nnperm <- length(turnover_strength)\nres.decompCTRE_toymodel <- list()\nfor(n in 1:nperm){#for each permutation\n \n # Draw communities using lognormal distribution of abundances \n # 100 individuals by populations\n ex.sp5 <- c()\n ex.com5 <- matrix(0, nrow = 10, ncol = 20)\n for(i in 1: 10){\n ex.com.interm <- table(sample(sp, size = 100, prob = rlnorm(20, 0, sdlog), replace = T))\n ex.com5[i, sp%in% names(ex.com.interm)] <- ex.com.interm\n ex.sp5 <- c(ex.sp5, rep(sp, times = ex.com5[i,]))\n }\n\n \n x1 <- c()\n ex.sp5 <- as.factor(ex.sp5)\n for(s in 1:20){\n x1[ex.sp5 == levels(ex.sp5)[s]] <- rnorm(1)\n }\n \n ex.indplot5 <- sort(as.factor(rep(com, 100)))\n x2 <- c()\n for(c in 1:10){\n x2[ex.indplot5 == levels(ex.indplot5)[c]] <- rnorm(1)\n }\n \n X <- rnorm(1000) + x1 + x2\n \n #We delete the individual whose species values and communities values are to different\n #For this we use the argument turnover_strength\n X2 <- X[(x1-x2)^2 < turnover_strength[n]] \n ex.sp5.bis <- ex.sp5[(x1-x2)^2 < turnover_strength[n]] \n ex.indplot5.bis <- ex.indplot5[(x1-x2)^2 < turnover_strength[n]] \n \n res.decompCTRE_toymodel[[n]] <- decompCTRE(traits = cbind(X2, X2), sp = ex.sp5.bis, \n            ind.plot = ex.indplot5.bis)\n}#End of simulations\n@\nNow we can plot the relation between the modeled strength of the turnover and the resulting contribution of turnover from the function \\texttt{decompCTRE} (Fig. \\ref{fig:decompCTRE_plot1}).\n\n<<decompCTRE_plot1, fig.height = 3, fig.cap = \"Decomposition of the variation in community trait composition for two contrasted cases: on the left almost all the variation is due to turnover wheras on the rigth case intraspecific variation explain most of the variation.\">>= \npar(mfrow=c(1, 2))\nplot(res.decompCTRE_toymodel[[1]]$X2)\nplot(res.decompCTRE_toymodel[[n]]$X2)\npar(mfrow=c(1, 1))\n@\n\n<<decompCTRE_plot2, fig.width = 6, fig.height = 5, fig.cap = \"Modeled against obtained turnover contribution in community trait variance\">>= \nres.simu.decompCTRE_toymodel <- unlist(lapply(res.decompCTRE_toymodel, function(x) \n                                              x$X2$RelSumSq[1]))\nplot(res.simu.decompCTRE_toymodel, -turnover_strength, pch = 16, col = rgb(0, 0, 0, 0.5),\n     ylab = \"Strength of the turnover (maximum strength = 0)\",\n     xlab = \"Turnover relative contribution to community mean traits\")\n@\n\nThe correlation between the modeled strength of the turnover and the turnover relative contribution result is very high. Consequently the function \\texttt{decompCTRE} doesn't show apparent dysfunction (Fig. \\ref{fig:decompCTRE_plot2}).\n\n\\cleardoublepage\n\n\n\\section{Summary}\n\\label{sect:summary}\n\n\\subsection{Type I error}\n\nTable \\ref{tab:Alpha-errors_for_T-stats} summarize the alpha error for T-statistics. The three global \\footnote{one indice for all the dataset} T-statistics are very robust \nregardless of the distribution of the trait (alpha error ranging from \\Sexpr{min(c(alpha1, alpha2, alpha3, alpha4, alpha5, alpha6), na.rm=T)} to \\Sexpr{max(c(alpha1, alpha2, alpha3, alpha4, alpha5, alpha6), na.rm=T)}). Local \\footnote{one indice for each community of the dataset} T-statistics present lower but nevertheless satifactory alpha-error with a maximum of \\Sexpr{nbre_alpha_error_norm_loc_Tpcpr} for $T_{PC/PR}$ on a trait normally distributed. We therefore recommand to use $T_{IC/IR}$ to detect external filtering and more generally to prefer global T-statistics which are more robust and more powerfull (see the next section).\n\n\n\\subsection{Type II error}\n\n\n\\begin{table}[h!]\n\\begin{center}\n\\caption{Summary of initial parameter ratio allowing beta-error $<0.05$ for global T-statistics}\n\\begin{tabular}{|c|c|>{\\centering}m{3cm}|>{\\centering}m{3cm}|>{\\centering}m{3cm}|}\n\\hline\nTraits & Indices & Initial parameter ratio with internal filtering & Initial parameter ratio with external filtering & Initial parameter ratio with internal and external filtering \\tabularnewline\n\\hline \\hline \\hline\n\n\\multirow{3}{*}{Trait a (normal)} & $T_{IP.IC}$ & \\Sexpr{round(param_beta0.05_Tipic.norm, 2)} & \\cellcolor{ligthgray}  & \\Sexpr{round(param_B_glob_norm_Tipic, 2)}\\tabularnewline\n\\cline{2-5} \n & $T_{IC.IR}$ & \\cellcolor{ligthgray} & \\Sexpr{round(param_beta0.05_Ticir.norm, 2)} &  \\Sexpr{round(param_B_glob_norm_Ticir, 2)} \\tabularnewline\n\\cline{2-5}\n & $T_{PC.PR}$ & \\cellcolor{ligthgray} & \\Sexpr{round(param_beta0.05_Tpcpr.norm, 2)} &  \\Sexpr{round(param_B_glob_norm_Tpcpr, 2)} \\tabularnewline\n\n\\hline \\hline \\hline\n\n\nTraits & Indices & Initial parameter ratio with internal filtering & Initial parameter ratio with external filtering & Initial parameter ratio with internal and external filtering \\tabularnewline\n\\hline \\hline \\hline\n\n\\multirow{3}{*}{Trait b (uniform)} & $T_{IP.IC}$ & \\Sexpr{round(param_beta0.05_Tipic.uni, 2)} & \\cellcolor{ligthgray} & \\Sexpr{round(param_B_glob_uni_Tipic, 2)}\\tabularnewline\n\\cline{2-5} \n & $T_{IC.IR}$ & \\cellcolor{ligthgray} & \\Sexpr{round(param_beta0.05_Ticir.uni, 2)} &  \\Sexpr{round(param_B_glob_uni_Ticir, 2)} \\tabularnewline\n\\cline{2-5}\n & $T_{PC.PR}$ & \\cellcolor{ligthgray} & \\Sexpr{round(param_beta0.05_Tpcpr.uni, 2)} &  \\Sexpr{round(param_B_glob_uni_Tpcpr, 2)} \\tabularnewline\n\n\n\\hline \n\\end{tabular}\n\\end{center}\n\\end{table}\n\n\n\n\n\n\n\n\n\\section*{Conclusion}\n\\addcontentsline{toc}{subsection}{Conclusion}\n\n\\section*{References}\n\\addcontentsline{toc}{subsection}{References}\nMay RM, Mac Arthur RH (1972) Niche overlap as a function of environmental variability. Proceedings of the National Academy of Sciences 69: 1109-1113.\n\\\\\n\nViolle C, Enquist BJ, McGill BJ, Jiang L, Albert CH, et al. (2012) The return of the variance: intraspecific variability in community ecology. Trends in Ecology & Evolution 27: 244-252.\n\n\n\\listoffigures % table des figures\n\\listoftables % table des tableaux\n\n\n\\end{document}\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n",
    "created" : 1422873730150.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "935603924",
    "id" : "814C2E44",
    "lastKnownWriteTime" : 1422875673,
    "path" : "~/Documents/GitHub/cati/tutorials and documentation/Appendix_A/simulation_Tstats.Rnw",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "sweave"
}