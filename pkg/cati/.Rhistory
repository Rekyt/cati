verbose=F, warnings=F)
}
for(i in 1: length(table(sp.finch)){
hv[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i] ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
for(i in 1: length(table(sp.finch))) {
hv[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i] ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
for(i in 1: length(table(sp.finch))) {
hv[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv[[1]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv.list<-list()
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list<-new("HypervolumeList", hv.list)
plot(hv.list)
class(hv.list)<-"HypervolumeList"
plot(hv.list)
plot(hv.list[[1]])
plot(hv.list[[2]])
hv.list[1:12]
hv.list<-new("HypervolumeList", hv.list[1:12])
hv.list<-new("HypervolumeList", hv.list[[1]])
class(hv.list[[1]])
hv.list<-new("HypervolumeList", list(hv.list[[1]],hv.list[[2]]))
hv.list<-new("HypervolumeList", hv.list[[1]],hv.list[[2]])
?new
plot(hv.list[[1]],hv.list[[2]])
plot(list(hv.list[[1]],hv.list[[2]]))
?plot.HypervolumeList
plot.HypervolumeList
class(hv.list)<-"HVList"
plot(hv.list)
HVlist
?HVlist
?HVList
HVList
hv.list<-new("HypervolumeList", hv.list[[1]],hv.list[[2]])
hv.list<-new("HypervolumeList", hv.list)
hv.list<-new("HypervolumeList", hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[1], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F), hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[2], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)  )
new("HypervolumeList", ...)
new("HypervolumeList")
hv.list<-new("HypervolumeList")
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list<-new("HypervolumeList")
hv
hv.list
hv.list<-new("HypervolumeList")
hv.list
for(i in 1: length(table(sp.finch))) {
hv.list<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
}
hv.list
plot(hv.list)
class(hv.list)
hv.list<-new("HypervolumeList")
class(hv.list)
hv.list<-by(traits.finch.mice, sp.finch, function(x) hypervolume (x, reps=100,bandwidth=0.2, verbose=F, warnings=F) )
hv.list
class(sp.finch)
class(hv.list)
hv.list<-new("HypervolumeList")
hv.list
hv.list<-by(traits.finch.mice, sp.finch, function(x) hypervolume (x, reps=100,bandwidth=0.2, verbose=F, warnings=F) )
class(hv.list)<-"HypervolumeList"
class(hv.list)
plot(hv.list)
for(i in 1: length(table(sp.finch))) {
hv.list2<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
}
hv.list<-new("HypervolumeList")
hv.list<-hv.list2
clas(hv.list)
class(hv.list)
hv.list<-new("HypervolumeList")
class(hv.list)
hv/list
hv.list
hv.list<-new("HypervolumeList")
hv.list2<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
hv.list2<-new("HypervolumeList")
hv.list2<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
clas(hv.list2)
class(hv.list2)
hv.list2<-new("HypervolumeList")
hv.list2<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
class(hv.list2)
hv.list2
attributes(hv.list2)
hv.list<-new("HypervolumeList")
hv.list<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv.list
class(hv.list)
hv.list<-new("HypervolumeList")
reps=100,bandwidth=0.2,
hv.list<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
class(hv.list)
plot(hv.list)
for(i in 1: length(table(sp.finch))) {
hv.list<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
}
plot(hv.list[[1]])
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list<-list()
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
plot(hv.list[[1]])
plot(hv.list[[2]])
plot(hv.list[[3]])
plot(hv.list[[4]])
plot(hv.list[[5]])
plot(hv.list[[6]])
plot(hv.list[[7]])
plot(hv.list[[8]])
plot(hv.list[[9]])
plot(hv.list[[10]])
plot(hv.list[[11]])
plot(hv.list[[12]])
plot(hv.list)
class(hv.list)<-"Hypervolume"
plot(hv.list)
class(hv.list)<-"HypervolumeList"
plot(hv.list)
hv.list)
hv.list
class(hv.list)
slot(hv.list)
slot(hv.list, HVList)
names(hv.list)
attributes(hv.list)
length(hv.list)
new("HypervolumeList")
hv.list<-new("HypervolumeList")
hv.list<-new("HypervolumeList")
attributes(hv.list)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list$HVList<-hv.list2
hv.list$HVList
hv.list@HVList<-hv.list2
plot(hv.list)
plot(hv.list)
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
plot(hv.list)
require(adegenet)
funky(12)
plot(hv.list, col=colorhv)
colorhv<-c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A", "#FFFF99", "#B15928")
plot(hv.list, col=colorhv)
?funcky
?funky
funky(12, alpha=0.5)
transp(funky(12) alpha=0.5)
transp(funky(12), alpha=0.5)
colorhv<-c("#A6CEE380", "#1F78B480", "#B2DF8A80", "#33A02C80", "#FB9A9980", "#E31A1C80", "#FDBF6F80", "#FF7F0080", "#CAB2D680", "#6A3D9A80", "#FFFF9980", "#B1592880")
plot(hv.list, col=colorhv)
transp(funky(12), alpha=0.8)
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, col=colorhv)
plot(hv.list, colors=colorhv)
plot(hv.list, colors=colorhv, darkfactor=0.1)
plot(hv.list, colors=colorhv, darkfactor=0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1)
plot(hv.list, colors=colorhv, darkfactor=1, showdensity=F)
plot(hv.list, colors=rgb(0,0,0,0.5), rgb(0,1,1,0.5), darkfactor=1, showdensity=F)
plot(hv.list, colors=c(rgb(0,0,0,0.5), rgb(0,1,1,0.5)), darkfactor=1, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=1)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
<<dev='pdf'>>=
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=10000,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax=10000)
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=1000,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
colorhv<-transp(funky(nfactor(sp.finch)), alpha=0.8)
colorhv<-transp(funky(nlevels(sp.finch)), alpha=0.8)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 200, cex.random =1)
res.decomp<-decomp_whithin(traits=traits.finch, sp=sp.finch,
ind.plot=ind.plot.finch, print=FALSE)
barplot.decomp_whithin(res.decomp)
par(mfrow=c(2,2))
barplot.decomp_whithin(res.decomp, resume=F)
=======
>>>>>>> 9b2ffdae82cad1205bdb65eb797b528836e7829a
library(cati)
load("C:/Users/taudiere/Downloads/enz.env.rlq.RData")
plot(enz.env.rlq)
require(ade4)
plot(enz.env.rlq)
require(ade4)
load("C:/Users/taudiere/Downloads/enz.env.rlq.RData")
plot(enz.env.rlq)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow=c(2,3))
plot(index.list1,type="bytraits", bysites=TRUE)
par(mfrow=c(2,2))
plot(index.list1,type="bytraits")
par(mfrow=c(1,1))
plot(index.list1,type="simple")
plot(index.list1,type="simple_range")
plot(index.list1,type="normal")
plot(index.list1,type="barplot")
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
list.ind
index.list1<-as.listofindex(list.ind)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
list.ind
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
length(list.ind)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
load("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip")
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
detach("package:cati", unload=TRUE)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
?cati
namesindex=NULL
x<-list.ind
if(class(x)!="list"){x<-list(x)}
nlist<-length(x)
nindex<-vector()
for(i in 1: nlist){
if(inherits(x[[i]], "Tstats")) {
nindex[i]<-3
}
else if (inherits(x[[i]], "com.index") | inherits(x[[i]], "com.index.multi")) {
nindex[i]<-length(x[[i]]$obs)
}
else{stop("x must be a list of objects of class Tstats, com.index or com.index.multi")}
}
res<-list()
for(l in 1: nlist){
if(inherits(x[[l]], "Tstats")) {
for(i in c(1,10,2,11,3,12) ){
res<-c(res, list(x[[l]][[i]]))
}
}
else{
for(i in 1: nindex[l]){
res<-c(res, list(x[[l]]$obs[[i]]), list(x[[l]]$Null[[i]]) )
}
}
}
if(is.null(namesindex)) {
for(l in 1: nlist){
namesindex<-c(namesindex, paste( rep("index", nindex[l]), l, 1:nindex[l], sep="_") )
}
}
nlist
nindex
l
i
nindex[l]
1: nindex[l]
x[[l]][[i]]
x[[l]][[9]]
x[[l]][[4]]
for(l in 1: nlist){
if(inherits(x[[l]], "Tstats")) {
for(i in c(1,10,2,11,3,12) ){
res<-c(res, list(x[[l]][[i]]))
}
}}
c(1,10,2,11,3,12)
length(res.finch)
attributes(res.finch)
library(cati)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
plot(index.list1)
plot(index.list1)
?par
?plot
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9)
par(mfrow=c(2,2))
species.richness<-table(ind.plot.finch)
plot_ses.var(as.listofindex(list(res.finch)), species.richness, multipanel=FALSE)
#Same plot with \code(resume=TRUE).
par(mfrow=c(2,2))
plot_ses.var(as.listofindex(list(res.finch)), species.richness, resume=TRUE, multipanel=FALSE)
par(mfrow=c(1,1))
library(cati)
devtools::load_all(".")
library(cati)
install.packages("roxygen2")
