<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
colorhv<-transp(funky(nfactor(sp.finch)), alpha=0.8)
colorhv<-transp(funky(nlevels(sp.finch)), alpha=0.8)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 200, cex.random =1)
res.decomp<-decomp_whithin(traits=traits.finch, sp=sp.finch,
ind.plot=ind.plot.finch, print=FALSE)
barplot.decomp_whithin(res.decomp)
par(mfrow=c(2,2))
barplot.decomp_whithin(res.decomp, resume=F)
=======
>>>>>>> 9b2ffdae82cad1205bdb65eb797b528836e7829a
library(cati)
load("C:/Users/taudiere/Downloads/enz.env.rlq.RData")
plot(enz.env.rlq)
require(ade4)
plot(enz.env.rlq)
require(ade4)
load("C:/Users/taudiere/Downloads/enz.env.rlq.RData")
plot(enz.env.rlq)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow=c(2,3))
plot(index.list1,type="bytraits", bysites=TRUE)
par(mfrow=c(2,2))
plot(index.list1,type="bytraits")
par(mfrow=c(1,1))
plot(index.list1,type="simple")
plot(index.list1,type="simple_range")
plot(index.list1,type="normal")
plot(index.list1,type="barplot")
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
list.ind
index.list1<-as.listofindex(list.ind)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
list.ind
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
length(list.ind)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
load("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip")
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
detach("package:cati", unload=TRUE)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
?cati
namesindex=NULL
x<-list.ind
if(class(x)!="list"){x<-list(x)}
nlist<-length(x)
nindex<-vector()
for(i in 1: nlist){
if(inherits(x[[i]], "Tstats")) {
nindex[i]<-3
}
else if (inherits(x[[i]], "com.index") | inherits(x[[i]], "com.index.multi")) {
nindex[i]<-length(x[[i]]$obs)
}
else{stop("x must be a list of objects of class Tstats, com.index or com.index.multi")}
}
res<-list()
for(l in 1: nlist){
if(inherits(x[[l]], "Tstats")) {
for(i in c(1,10,2,11,3,12) ){
res<-c(res, list(x[[l]][[i]]))
}
}
else{
for(i in 1: nindex[l]){
res<-c(res, list(x[[l]]$obs[[i]]), list(x[[l]]$Null[[i]]) )
}
}
}
if(is.null(namesindex)) {
for(l in 1: nlist){
namesindex<-c(namesindex, paste( rep("index", nindex[l]), l, 1:nindex[l], sep="_") )
}
}
nlist
nindex
l
i
nindex[l]
1: nindex[l]
x[[l]][[i]]
x[[l]][[9]]
x[[l]][[4]]
for(l in 1: nlist){
if(inherits(x[[l]], "Tstats")) {
for(i in c(1,10,2,11,3,12) ){
res<-c(res, list(x[[l]][[i]]))
}
}}
c(1,10,2,11,3,12)
length(res.finch)
attributes(res.finch)
library(cati)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
>>>>>>> 912c11c54430fbe19c3c2c4d3e663c7adb1a53ff
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
plot(index.list1)
plot(index.list1)
?par
?plot
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9)
par(mfrow=c(2,2))
species.richness<-table(ind.plot.finch)
plot_ses.var(as.listofindex(list(res.finch)), species.richness, multipanel=FALSE)
#Same plot with \code(resume=TRUE).
par(mfrow=c(2,2))
plot_ses.var(as.listofindex(list(res.finch)), species.richness, resume=TRUE, multipanel=FALSE)
par(mfrow=c(1,1))
library(cati)
devtools::load_all(".")
library(cati)
install.packages("roxygen2")
>>>>>>> 88467fe8d079c9993926d322508c2ca7cd639888
>>>>>>> 1482dfa83fb0dc0121d9be1d248cac4dc3b9c5bc
cbind(c(4,34), c(9,1))
x<-cbind(c(4,34), c(9,1))
chisq.test(x)
chisq.test(t(x))
warnings()
?chisq.test
chisq.test(x, simulate.p.value=T)
chisq.test(x, simulate.p.value=T, B=10000)
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("M","F"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
M
chisq.test(x, simulate.p.value=T, B=1000000)
chisq.test(x, simulate.p.value=T, B=9999)
new.matrix <- read.table("C:/Users/taudiere/Desktop/new-matrix.csv", sep=";", dec=",", quote="\"")
View(new.matrix)
m <- read.table("C:/Users/taudiere/Desktop/new-matrix.csv", sep=";", dec=",", quote="\"")
?lm
?glm
lm1<-glm(m[,3] ~ m[,4], family=binomial)
m[,3]
m[,4]
lm1<-glm(m[,4] ~ m[,3], family=binomial)
lm1
anova(lm1)
source('~/.active-rstudio-document', echo=TRUE)
plot(m[,4] ~ m[,3])
abline(lm1)
abline(logit(lm1))
aov(lm1)
abline(1/(1-exp(lm1)  ) )
abline (predict.lm(lm1))
?glm
lm1
attributes(lm1)
summary(lm1)
predict.lm(lm1)
predict.glm(lm1,se.fit=T)
points ( predict.glm(lm1,se.fit=T) )
points (predict.glm(lm1))
predict.glm(lm1)
attributes(predict.glm(lm1))
points(1-(1-exp(predict.glm(lm1)))
)
exp(predict.glm(lm1) )
1-(1-exp(predict.glm(lm1) )
)
points(1-(1-exp(predict.glm(lm1) ) ))
points(1/(1-exp(predict.glm(lm1) ) ))
1/(1-exp(predict.glm(lm1) ) )
points(1/(1+exp(predict.glm(lm1) ) ))
points(1/(1+exp(-predict.glm(lm1) ) ))
plot(m[,4] ~ m[,3])
points(1/(1+exp(-predict.glm(lm1) ) ))
lines(1/(1+exp(-predict.glm(lm1) ) ))
require(graphics)
## example from Venables and Ripley (2002, pp. 190-2.)
ldose <- rep(0:5, 2)
numdead <- c(1, 4, 9, 13, 18, 20, 0, 2, 6, 10, 12, 16)
sex <- factor(rep(c("M", "F"), c(6, 6)))
SF <- cbind(numdead, numalive = 20-numdead)
budworm.lg <- glm(SF ~ sex*ldose, family = binomial)
summary(budworm.lg)
plot(c(1,32), c(0,1), type = "n", xlab = "dose",
ylab = "prob", log = "x")
text(2^ldose, numdead/20, as.character(sex))
ld <- seq(0, 5, 0.1)
lines(2^ld, predict(budworm.lg, data.frame(ldose = ld,
sex = factor(rep("M", length(ld)), levels = levels(sex))),
type = "response"))
plot(c(1,32), c(0,1), type = "n", xlab = "dose",
ylab = "prob", log = "x")
text(2^ldose, numdead/20, as.character(sex))
ld <- seq(0, 5, 0.1)
lines(2^ld, predict(budworm.lg, data.frame(ldose = ld,
sex = factor(rep("M", length(ld)), levels = levels(sex))),
type = "response"))
lines(2^ld, predict(budworm.lg, data.frame(ldose = ld,
sex = factor(rep("F", length(ld)), levels = levels(sex))),
type = "response"))
predict.glm(lm1, newdata=)
exp(-predict.glm(lm1) )
-predict.glm(lm1)
predict.glm(lm1)
plot(sort(predict.glm(lm1) ))
lm1<-glm(m[,4] ~ m[,3], family=binomial)
anova(lm1)
summary(lm1)
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
lines(sort(1/(1+exp(-predict.glm(lm1) ) )))
lines(1/(1+exp(-predict.glm(lm1) ) ))
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
density(m[,3][m[,4]==0])
plot(density(m[,3][m[,4]==0]))
lines(density(m[,3][m[,4]==0]))
lines(density(m[,3][m[,4]==1]))
lines(density(m[,3][m[,4]==1]), col="red")
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
lines(density(m[,3][m[,4]==1]), col="red")
lines(density(m[,3][m[,4]==1])*100, col="red")
lines(density(m[,3][m[,4]==1]*100), col="red")
lines(density(m[,3][m[,4]==1]*10000), col="red")
plot(density(m[,3][m[,4]==0]))
lines(density(m[,3][m[,4]==1]*10000), col="red")
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==1]*100), col="red")
lines(density(m[,3][m[,4]==1]*10000), col="red")
plot(density(m[,3][m[,4]==0]))
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
lines(density(m[,3][m[,4]==1]), col="red")
lines(density(m[,3][m[,4]==0]), col="red")
?density
density(m[,3][m[,4]==0])
density(m[,3][m[,4]==0])*100
density(m[,3][m[,4]==0]*100)
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==1])/100, col="red")
lines(density(m[,3][m[,4]==1]/100=), col="red")
lines(density(m[,3][m[,4]==1]/100), col="red")
lines(density(m[,3][m[,4]==1])[,1], density(m[,3][m[,4]==1])[,2]*100, col="red")
attributes(density(m[,3][m[,4]==0]))
density(m[,3][m[,4]==0])$x
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*100, col="red")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*10, col="red")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*50, col="red")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*40, col="red")
lines(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y*40, col="grey")
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y*40, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*40, col="red")
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*40, col="grey")
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*30, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*30, col="red")
lines(1/(1+exp(-predict.glm(lm1) ) ))
?predict.glm
predict.glm(lm1,  se.fit = T)
attriutes(predict.glm(lm1,  se.fit = T))
attributes(predict.glm(lm1,  se.fit = T))
predict.glm(lm1,  se.fit = T)$se.fit
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T)
lines(1/(1+exp(-predict.glm(lm1) ) )-se)
se
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T)
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T))
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T)))
predict.glm(lm1,  se.fit = T)
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
>>>>>>> f894455479e167787e4fa0a99cc0795132b17637
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T, dispersion=0.1)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T, dispersion=0.01)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T, dispersion=1)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
exp(-predict.glm(lm1)
?residuals.lrm
?lrm
??lrm
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*30, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*30, col="red")
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
se
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))])
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
plot(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
plot(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y, col="red")
plot(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y, col="red")
?density
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
m[,3]
table(m[,4])
plot(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y*123, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33, col="red")
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33, col="red")
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123/5, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33/5, col="red")
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123/5, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33/5, col="red")
summary(lm1)
chisq.test(x, simulate.p.value=T, B=9999)
summary(lm1)
new.matrix.2012 <- read.table("C:/Users/taudiere/Dropbox/Analyses en cours/Analyse Mas glm distance spatiale_OTU/new-matrix-2012.csv", sep=";", dec=",", quote="\"")
View(new.matrix.2012)
m2012 <- read.table("C:/Users/taudiere/Dropbox/Analyses en cours/Analyse Mas glm distance spatiale_OTU/new-matrix-2012.csv", sep=";", dec=",", quote="\"")
m2013 <- read.table("C:/Users/taudiere/Dropbox/Analyses en cours/Analyse Mas glm distance spatiale_OTU/new-matrix.csv", sep=";", dec=",", quote="\"")
m<-cbind(m2012,m2013)
m<-rbind(m2012,m2013)
lm1<-glm(m[,4] ~ m[,3], family=binomial)
anova(lm1)
summary(lm1)
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123/5, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33/5, col="red")
194*195
194*195/2
<<<<<<< HEAD
library(cati)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.7.zip", repos=NULL)
#install.packages("cati", repos="http://R-Forge.R-project.org")
@
<<results='hide', message=FALSE, warning=FALSE>>=
library(cati, warn.conflicts = FALSE)
data(finch.ind)
#Save default parameters
oldpar<-par(no.readonly = TRUE)
@
\newpage
%%%%%%%%%%%%%%%%
\section{Description of distribution}
%%%%%%%%%%%%%%%%
\subsection{Plot the density of traits}
Plot the distribution of traits values for populations, species, sites and regional scales. First, let try the distribution for all populations of Darwin finches.
<<dev='pdf'>>=
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch,
ind.plot.finch, ylim.cex=3, plot.ask=F,
multipanel=F, leg=F)
@
\newpage
Then we can inverse the second and the third arguments to plot the distribution for all finches species.
<<dev='pdf'>>=
par(mfrow=c(5,5), cex=0.5)
plot_dens(traits.finch, ind.plot.finch,
sp.finch, ylim.cex=8, plot.ask=F, multipanel=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("region", times=dim(traits.finch)[1]),
sp.finch, ylim.cex=6, plot.ask=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("toutes_sp", times=dim(traits.finch)[1]),
ind.plot.finch, ylim.cex=3, plot.ask=F)
@
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.7.zip", repos=NULL)
#install.packages("cati", repos="http://R-Forge.R-project.org")
@
<<results='hide', message=FALSE, warning=FALSE>>=
library(cati, warn.conflicts = FALSE)
data(finch.ind)
#Save default parameters
oldpar<-par(no.readonly = TRUE)
@
\newpage
%%%%%%%%%%%%%%%%
\section{Description of distribution}
%%%%%%%%%%%%%%%%
\subsection{Plot the density of traits}
Plot the distribution of traits values for populations, species, sites and regional scales. First, let try the distribution for all populations of Darwin finches.
<<dev='pdf'>>=
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch,
ind.plot.finch, ylim.cex=3, plot.ask=F,
multipanel=F, leg=F)
@
\newpage
Then we can inverse the second and the third arguments to plot the distribution for all finches species.
<<dev='pdf'>>=
par(mfrow=c(5,5), cex=0.5)
plot_dens(traits.finch, ind.plot.finch,
sp.finch, ylim.cex=8, plot.ask=F, multipanel=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("region", times=dim(traits.finch)[1]),
sp.finch, ylim.cex=6, plot.ask=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("toutes_sp", times=dim(traits.finch)[1]),
ind.plot.finch, ylim.cex=3, plot.ask=F)
@
ind.plot.finch
CVNND
?convhulln
??convhulln
install.packages("geometry")
install.packages("geometry")
require("geometry")
?convhulln
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,"FA")$vol,6))")
as.text
?as.text
??as.text
??text
?""
?"
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
?eval
?expression
parse(FA)
parse("FA")
eval("FA")
eval(FA)
parse(FA)
deparse(FA)
deparse("FA")
FA
deparse("FA")
as.character(FA)
as.character("FA")
FA,as.character("FA")
FA<-as.character("FA")
FA
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
require(mice)
traits=traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
install.packages("geometry")
require("geometry")
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
##Null model 1 is trivial for this function
##because randomisation is within community only
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
install.packages("geometry")
install.packages("geometry")
require("geometry")
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
n_sp_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="_"))
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
funct<-c("round(convhulln(x,FA)$vol,6)")
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
Fdis.finch
plot(Fdis.finch)
plot(as.listofindex(Fdis.finch))
class(Fdis.finch)
list.ind.multi2<-as.listofindex(list(hv.2, hv.3, hv.4, Fdis.finch))
hv.2<-com.index.multi(traits.finch.mice,
index=c("as.numeric(try(hypervolume(na.omit(x), reps=100,
bandwidth=0.2, verbose=F, warnings=F)@Volume))"),
by.factor=n_sp_plot, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
list.ind.multi2<-as.listofindex(list(hv.2, Fdis.finch))
ses.list.multi2<-ses.listofindex(list.ind.multi2)
list.ind.multi2
plot(list.ind.multi2)
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=n_sp_plot, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
hv.1<-com.index.multi(traits.finch.mice,
index=c("as.numeric(try(hypervolume(na.omit(x), reps=100,
bandwidth=0.2, verbose=F, warnings=F)@Volume))"),
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
list.ind.multi2<-as.listofindex(list(hv.1, Fdis.finch))
ses.list.multi2<-ses.listofindex(list.ind.multi2)
plot(list.ind.multi2)
list.ind.multi2
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=n_sp_plot, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=ind.plot.finch, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
hv.3<-com.index.multi(traits.finch.mice,
index=c("as.numeric(try(hypervolume(na.omit(x), reps=100,
bandwidth=0.2, verbose=F, warnings=F)@Volume))"),
by.factor=ind.plot.finch, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
list.ind.multi2<-as.listofindex(list(hv.3, Fdis.finch))
ses.list.multi2<-ses.listofindex(list.ind.multi2)
plot(list.ind.multi2)
plot(list.ind.multi2)
plot(list.ind.multi2)
ses.list.multi2
ses.list.multi2
list.ind.multi2
ses.list.multi2
list.ind.multi2
=======
>>>>>>> 912c11c54430fbe19c3c2c4d3e663c7adb1a53ff
<<<<<<< HEAD
mpd
require(picante)
mpd
?dis
??dis
require(spacodiR)
install.packages("spacodiR")
require(spacodiR)
install.packages("spacodiR")
library("spacodiR", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
data(sp.example)
attach(sp.example)
phy.dotplot(sp.plot=spl[,1:9], phy=phy, tips.adj=c(0.50,0.55), lab.adj=c(0,1))
# load a species-by-plots matrix, along with a tree
data(sp.example)
attributes(sp.example)
attach(sp.example)
spl
phy
# generate a plot of observed and expected Bst
sp.permut<-spacodi.by.nodes(sp.plot=spl, phy=phy, n.rep=35)
sp.permut$randomization.test
# plot observed and expected Bst
spacodi.permutplot(spacodi.permutations=sp.permut, envelope=FALSE)
spacodi.permutplot(spacodi.permutations=sp.permut, envelope=FALSE)
# load a species-by-plots matrix, along with a tree
data(sp.example)
attributes(sp.example)
attach(sp.example)
spl
phy
# community diversity statistics of Hardy and Senterre (2007): tree-based
spacodi.calc(sp.plot = spl, phy = phy)
# community diversity statistics: trait-based with pairwise comparisons
spacodi.calc(sp.plot = spl, phy = phy, pairwise=TRUE)
# community diversity for a pair of traits
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=TRUE)
data(sp.example)
attach(sp.example)
spl->d.spacodi
class(spl)
data(sp.example)
class(sp.example)
attach(sp.example)
class(sp.example)
d.spacodi
class(d.spacodi)
#community diversity for a pair of traits, each singly
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
# Ist: using abundance data only
spacodi.calc(sp.plot = spl)
# calculations with missing taxa between tree and sp.plot
# excluding the last five species in sp.plot,
spacodi.calc(sp.plot = spl[1:15,], phy = phy, prune=TRUE)
# as before but with ’manual’ pruning of the datasets
match.spacodi.data(sp.plot=spl[1:15,],phy=phy) -> prn.data
spacodi.calc(sp.plot=prn.data$sp.plot, phy=prn.data$sp.tree)
prn.data$sp.plot
prn.data$sp.tree
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
attributes(x)
x$sp.traits
trt
x$trt1
x$trt.1
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=FALSE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1])
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=TRUE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[1,], all.together=TRUE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[1,], all.together=FALSE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=TRUE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt)$trt.1
x
spacodi.calc(sp.plot = spl, sp.traits = trt)$trt.1
x<-spacodi.calc(sp.plot = spl, sp.traits = trt)
x$trt.1
x<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
x
x$trt.1
x$trt.1$Ist
x$trt.1$Tst
x<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=TRUE)
x
x2<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
x$trt.1
x2$trt.1
ind.plot.finch
x2<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=FALSE)
spacodi.calc
ncol(trt[,1])
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,1]))
x2
as.matrix(trt[,1])
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,1]))
x2
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,2]))
x2
spl
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,2]))
x2
class(trt)
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.dataframe(as.matrix(trt[,2])))
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.data.frame(as.matrix(trt[,2])))
x2
y<-as.data.frame(as.matrix(trt[,2]))
y
rownames(y)
x2<-spacodi.calc(sp.plot = spl, sp.traits = y)
x2
spl
x2<-spacodi.calc(sp.plot = spl, sp.traits = y, allspacodi.calc(sp.plot = spl))
spacodi.calc(sp.plot = spl)
x2<-spacodi.calc(sp.plot = spl, sp.traits = y)
x2
spacodi.calc(sp.plot = spl, sp.traits = y)
class(y)
y<-as.matrix(trt[,2])
y
y<-as.vector(as.matrix(trt[,2]))
spacodi.calc(sp.plot = spl, sp.traits = y)
y<-as.matrix(trt[,2])
y<-as.matrix(trt)[,1]
y<-as.matrix(trt[,2])
y<-as.matrix(trt)[,1]
spacodi.calc(sp.plot = spl, sp.traits = y)
y
spacodi.calc(sp.plot = spl, sp.traits = as.matrix(y))
x
attributes(x)
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.7.zip", repos=NULL)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3
.finch.sp_mn2
res.finch.sp_mn2
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
require(mice)
traits=traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn
res.finch.sp_mn2
attributes(res.finch.sp_mn2)
res.finch.sp_mn2$obs
res.finch.sp_mn2$Null
res.finch.sp_mn2$obs
attributes(res.finch.sp_mn2)
res.finch.sp_mn2$namestraits
warnings()
res.finch.sp_mn3
res.finch.sp_mn3$obs
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3$obs
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn2$obs
funct<-c("spacodi.calc(sp.plot = table(ind.plot), sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
c(2,1,3,2,5,2,6,2,4,2,5)
x<-c(2,1,3,2,5,2,6,2,4,2,5)
dist(x)
data(phylocom)
mpd(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=TRUE)
data(phylocom)
mntd(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=TRUE)
phylocom$sample
=======
>>>>>>> f894455479e167787e4fa0a99cc0795132b17637
