traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm = T))
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow = dim(traits_by_sp)[1], ncol = nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
perm_ind.plot <- sample(traits_by_sp[,t], dim(traits_by_sp)[1])
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress == T){
print(paste("regional.pop.prab",round(t/ntr*100,2),"%"))
}
}
}
########################################
####	 calculation of random values   	####
########################################
null <- list()
nm_bypop <- list()
nm_bypop.bis <- list()
if (printprogress == T){print("calculation of null values using null models")}
for(i in 1:nindex){
if (nullmodels[i] == "1"){nm.bis <- traits.nm1[[1]]}
else if (nullmodels[i] == "2"){nm.bis <- traits.nm2[[1]]}
else if (nullmodels[i] == "2sp"){nm.bis <- traits.nm2sp[[1]]}
else if (nullmodels[i] == "2sp.prab"){nm.bis <- traits.nm2sp.prab[[1]]}
else{print("nullmodels need values local, regional.ind, regional.pop, regional.pop.prab")}
functionindex =  eval(index[i])
if (nullmodels[i] == "2sp"){
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm = T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex))))[1]
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, dim2, nperm) )
if (is.null(dim2)) {
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, 1, nperm) )
}
}
else if (nullmodels[i] == "2sp.prab"){
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm = T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex))))[1]
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, dim2, nperm) )
if (is.null(dim2)) {
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, 1, nperm) )
}
}
else{
dim2 <- dim(apply(nm.bis, 2, function (x) eval(parse(text = functionindex))))[1]
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, dim2, nperm) )
if (is.null(dim2)) {
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, 1, nperm) )
}
}
for (t in 1: ntr){
if (nullmodels[i] == "1"){nm <- traits.nm1[[t]]}
else if (nullmodels[i] == "2"){nm <- traits.nm2[[t]]}
else if (nullmodels[i] == "2sp"){nm <- traits.nm2sp[[t]]}
else if (nullmodels[i] == "2sp.prab"){nm <- traits.nm2sp.prab[[t]]}
else{print("nullmodels need values local, regional.ind, regional.pop, regional.pop.prab")}
if (nullmodels[i] == "2sp"){
nm_bypop[[eval(namesindex[i])]] <-  apply(nm, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm = T))
null[[eval(namesindex[i])]] [t,, ] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex)))
}
else if (nullmodels[i] == "2sp.prab"){
nm_bypop[[eval(namesindex[i])]] <-  apply(nm, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm = T))
null[[eval(namesindex[i])]] [t,, ] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex)))
}
else{
null[[eval(namesindex[i])]] [t,, ] <- apply(nm, 2, function (x) eval(parse(text = functionindex)))
}
if (printprogress == T){
print(paste(eval(namesindex[i]), round(t/ntr*100,2),"%"))
}
}
}
}
########################################
####	calculation of observed values	####
########################################
obs <- list()
traits_by_pop <- c()
if (printprogress == T){print("calculation of observed values")}
for(i in 1:nindex){
functionindex =  eval(index[i])
if (is.null(nullmodels)) {
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <- apply(traits, 2, function (x) eval(parse(text = functionindex)))
#obs[[eval(namesindex[i])]] [ !is.finite(obs[[eval(namesindex[i])]] )] <- NA
}
else if(!is.null(nullmodels)){
if (nullmodels[i] == "2sp") {
traits_by_pop <- apply(traits, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm = T))
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits_by_pop, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_pop, 2, function (x) eval(parse(text = functionindex)))
}
if (nullmodels[i] == "2sp.prab") {
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm = T))
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits_by_sp, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_sp, 2, function (x) eval(parse(text = functionindex)))
}
else if (nullmodels[i] == "1"  |  nullmodels[i] == "2") {
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <- apply(traits, 2, function (x) eval(parse(text = functionindex)))
#obs[[eval(namesindex[i])]] [ !is.finite(obs[[eval(namesindex[i])]] )] <- NA
}
}
if (printprogress == T){
print(paste(round(i/nindex*100,2),"%"))
}
}
########################################
####		Create results list		####
########################################
ComIndex <- list()
ComIndex$obs <- obs
if (is.numeric(nperm)){
ComIndex$null <- null
}
ComIndex$list.index <- list()
ComIndex$list.index.t <- list()
name.ComIndex_list.index <- vector()
for(i in 1:nindex){
ComIndex$list.index.t[[seq(1,nindex*2,by = 2)[i]]] <- t(obs[[i]])
ComIndex$list.index[[seq(1,nindex*2,by = 2)[i]]] <- obs[[i]]
name.ComIndex_list.index[seq(1,nindex*2,by = 2)[i]] <- names(obs)[i]
if (is.numeric(nperm)){
ComIndex$list.index[[seq(1,nindex*2,by = 2)[i]+1]] <- null[[i]]
ComIndex$list.index.t[[seq(1,nindex*2,by = 2)[i]+1]] <- null[[i]]
name.ComIndex_list.index[seq(1,nindex*2,by = 2)[i]+1] <- paste(names(null)[i], "nm", sep = "_")
}
}
names(ComIndex$list.index.t) <- name.ComIndex_list.index
names(ComIndex$list.index) <- name.ComIndex_list.index
ComIndex$sites_richness <- S
ComIndex$namestraits <- namestraits
ComIndex$traits <- traits
ComIndex$ind.plot <- ind.plot
ComIndex$sp <- sp
ComIndex$nullmodels <- nullmodels_names
names(ComIndex$nullmodels) <- namesindex
ComIndex$call <- match.call()
class(ComIndex) <- "ComIndex"
invisible(ComIndex)
}
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 1)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
library(cati)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
ComIndex <- function(traits = NULL, index = NULL, nullmodels = NULL, ind.plot = NULL, sp = NULL, com = NULL,  namesindex = NULL, reg.pool = NULL, nperm = 99, printprogress = TRUE, type.sp.val = "count"){
#Create/verify/sort variables to put into the function
nindex <- length(index)
if (is.null(namesindex)) {  namesindex <- index }
ntr <- dim(traits)[2]
namestraits <- colnames(traits)
traits <- traits[order(ind.plot), ]
ind.plot <- ind.plot[order(ind.plot)]
sp <- sp[order(ind.plot)]
name_sp_sites = paste(sp, ind.plot, sep = "_")
comm = NULL
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom = length(S)
#
#Null models argument preparation
if (is.null(nullmodels)) {
nperm <- NULL
warnings("nullmodels is NULL so no null model will be computed")
}
if(!is.null(nperm)){
if (nperm == 0) {
nperm <- NULL
nullmodels <- NULL
warnings("nperm = 0 or nperm is NULL, so no null model will be computed")
}
}
if (!is.null(nullmodels) & !is.null(nperm)){
if (length(nullmodels) == 1){
nullmodels <- rep(nullmodels,times = nindex)
}
nullmodels[nullmodels == "1"] <- "local"
nullmodels[nullmodels == "2"] <- "regional.ind"
nullmodels[nullmodels == "2sp"] <- "regional.pop"
nullmodels[nullmodels == "2sp.prab"] <- "regional.pop.prab"
nullmodels <- match.arg(nullmodels, c("local", "regional.ind", "regional.pop", "regional.pop.prab"), several.ok = TRUE)
nullmodels_names <- nullmodels
}
#
#If data are from species or population traits, this function (AbToInd) transform this data in a suitable format for cati (individual like data
if (is.null(ind.plot)){
if (is.null(com)) {stop("Need 'ind.plot' or 'com' argument")}
rownames(traits) <- sp
res.interm <- AbToInd(traits, com, type.sp.val = type.sp.val)
traits <- res.interm$traits
sp <- res.interm$sp
ind.plot <- res.interm$ind.plot
}
if (!is.null(ind.plot) & !is.null(com)){
warnings("If ind.plot and com are provide, the function use only the argument ind.plot")
}
#Creation of the regional pool if not inform
if (is.null(reg.pool)) {
reg.pool <- traits
}
if (!is.null(reg.pool) & sum(nullmodels == "regional.ind") == 0) {
warnings("Custom regional pool 'reg.pool' is only used in the case of null model regional.ind")
}
if (is.numeric(nperm)){
nullmodels[nullmodels == "local"] <- "1"
nullmodels[nullmodels == "regional.ind"] <- "2"
nullmodels[nullmodels == "regional.pop"] <- "2sp"
nullmodels[nullmodels == "regional.pop.prab"] <- "2sp.prab"
#########################################
#### 	  calculation of null models  	 ####
#########################################
#Creation of three null models
if (printprogress == T){ print("creating null models")}
if (sum(nullmodels == "1")>0){
#________________________________________
#null model local: sample individuals traits values within community
traits.nm1 <- list()
for (t in 1: ntr){
traits.nm1[[eval(namestraits[t])]] <- matrix(NA, nrow = dim(traits)[1], ncol = nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(traits[ind.plot == levels(ind.plot)[s], t], table(ind.plot)[s])
}
traits.nm1[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress == T){
print(paste("local",round(t/ntr*100,2),"%"))
}
}
}
if (sum(nullmodels == "2")>0){
#________________________________________
#null model regional.ind: sample individuals traits values within the region (among community)
traits.nm2 <- list()
for (t in 1: ntr){
traits.nm2[[eval(namestraits[t])]] <- matrix(NA, nrow = dim(traits)[1], ncol = nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(reg.pool[, t], table(ind.plot)[s])
}
traits.nm2[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress == T){
print(paste("regional.ind",round(t/ntr*100,2),"%"))
}
}
}
if (sum(nullmodels == "2sp")>0){
#________________________________________
#null model regional.pop: sample populational traits values within the region (among community)
traits.nm2sp <- list()
traits_by_sp <- apply(traits,2,function(x) tapply(x,name_sp_sites,mean, na.rm = T))
traits_by_pop <- traits_by_sp[match(name_sp_sites, rownames(traits_by_sp)), ]
for (t in 1: ntr){
traits.nm2sp[[eval(namestraits[t])]] <- matrix(NA, nrow = dim(traits)[1], ncol = nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(traits_by_pop, table(ind.plot)[s])
}
traits.nm2sp[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress == T){
print(paste("regional.pop",round(t/ntr*100,2),"%"))
}
}
}
if (sum(nullmodels == "2sp.prab")>0){
#________________________________________
#null model regional.pop.prab: sample one populational traits values for each population within the region (among community)
traits.nm2sp.prab <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm = T))
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow = dim(traits_by_sp)[1], ncol = nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
perm_ind.plot <- sample(traits_by_sp[,t], dim(traits_by_sp)[1])
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress == T){
print(paste("regional.pop.prab",round(t/ntr*100,2),"%"))
}
}
}
########################################
####	 calculation of random values   	####
########################################
null <- list()
nm_bypop <- list()
nm_bypop.bis <- list()
if (printprogress == T){print("calculation of null values using null models")}
for(i in 1:nindex){
if (nullmodels[i] == "1"){nm.bis <- traits.nm1[[1]]}
else if (nullmodels[i] == "2"){nm.bis <- traits.nm2[[1]]}
else if (nullmodels[i] == "2sp"){nm.bis <- traits.nm2sp[[1]]}
else if (nullmodels[i] == "2sp.prab"){nm.bis <- traits.nm2sp.prab[[1]]}
else{print("nullmodels need values local, regional.ind, regional.pop, regional.pop.prab")}
functionindex =  eval(index[i])
if (nullmodels[i] == "2sp"){
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm = T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex))))[1]
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, dim2, nperm) )
if (is.null(dim2)) {
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, 1, nperm) )
}
}
else if (nullmodels[i] == "2sp.prab"){
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm = T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex))))[1]
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, dim2, nperm) )
if (is.null(dim2)) {
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, 1, nperm) )
}
}
else{
dim2 <- dim(apply(nm.bis, 2, function (x) eval(parse(text = functionindex))))[1]
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, dim2, nperm) )
if (is.null(dim2)) {
null[[eval(namesindex[i])]] <- array(NA, dim = c(ntr, 1, nperm) )
}
}
for (t in 1: ntr){
if (nullmodels[i] == "1"){nm <- traits.nm1[[t]]}
else if (nullmodels[i] == "2"){nm <- traits.nm2[[t]]}
else if (nullmodels[i] == "2sp"){nm <- traits.nm2sp[[t]]}
else if (nullmodels[i] == "2sp.prab"){nm <- traits.nm2sp.prab[[t]]}
else{print("nullmodels need values local, regional.ind, regional.pop, regional.pop.prab")}
if (nullmodels[i] == "2sp"){
nm_bypop[[eval(namesindex[i])]] <-  apply(nm, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm = T))
null[[eval(namesindex[i])]] [t,, ] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex)))
}
else if (nullmodels[i] == "2sp.prab"){
nm_bypop[[eval(namesindex[i])]] <-  apply(nm, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm = T))
null[[eval(namesindex[i])]] [t,, ] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text = functionindex)))
}
else{
null[[eval(namesindex[i])]] [t,, ] <- apply(nm, 2, function (x) eval(parse(text = functionindex)))
}
if (printprogress == T){
print(paste(eval(namesindex[i]), round(t/ntr*100,2),"%"))
}
}
}
}
########################################
####	calculation of observed values	####
########################################
obs <- list()
traits_by_pop <- c()
if (printprogress == T){print("calculation of observed values")}
for(i in 1:nindex){
functionindex =  eval(index[i])
if (is.null(nullmodels)) {
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <- apply(traits, 2, function (x) eval(parse(text = functionindex)))
#obs[[eval(namesindex[i])]] [ !is.finite(obs[[eval(namesindex[i])]] )] <- NA
}
else if(!is.null(nullmodels)){
if (nullmodels[i] == "2sp") {
traits_by_pop <- apply(traits, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm = T))
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits_by_pop, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_pop, 2, function (x) eval(parse(text = functionindex)))
}
if (nullmodels[i] == "2sp.prab") {
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm = T))
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits_by_sp, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_sp, 2, function (x) eval(parse(text = functionindex)))
}
else if (nullmodels[i] == "1"  |  nullmodels[i] == "2") {
obs[[eval(namesindex[i])]] <- array(dim = c(ntr, dim(apply(traits, 2, function (x) eval(parse(text = functionindex))))[1]))
obs[[eval(namesindex[i])]] <- apply(traits, 2, function (x) eval(parse(text = functionindex)))
#obs[[eval(namesindex[i])]] [ !is.finite(obs[[eval(namesindex[i])]] )] <- NA
}
}
if (printprogress == T){
print(paste(round(i/nindex*100,2),"%"))
}
}
########################################
####		Create results list		####
########################################
ComIndex <- list()
ComIndex$obs <- obs
if (is.numeric(nperm)){
ComIndex$null <- null
}
ComIndex$list.index <- list()
ComIndex$list.index.t <- list()
name.ComIndex_list.index <- vector()
for(i in 1:nindex){
ComIndex$list.index.t[[seq(1,nindex*2,by = 2)[i]]] <- t(obs[[i]])
ComIndex$list.index[[seq(1,nindex*2,by = 2)[i]]] <- obs[[i]]
name.ComIndex_list.index[seq(1,nindex*2,by = 2)[i]] <- names(obs)[i]
if (is.numeric(nperm)){
ComIndex$list.index[[seq(1,nindex*2,by = 2)[i]+1]] <- null[[i]]
ComIndex$list.index.t[[seq(1,nindex*2,by = 2)[i]+1]] <- null[[i]]
name.ComIndex_list.index[seq(1,nindex*2,by = 2)[i]+1] <- paste(names(null)[i], "nm", sep = "_")
}
}
names(ComIndex$list.index.t) <- name.ComIndex_list.index
names(ComIndex$list.index) <- name.ComIndex_list.index
ComIndex$sites_richness <- S
ComIndex$namestraits <- namestraits
ComIndex$traits <- traits
ComIndex$ind.plot <- ind.plot
ComIndex$sp <- sp
if (is.numeric(nperm)){
ComIndex$nullmodels <- nullmodels_names
names(ComIndex$nullmodels) <- namesindex
}
ComIndex$call <- match.call()
class(ComIndex) <- "ComIndex"
invisible(ComIndex)
}
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
library(cati)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2",
ind.plot = ind.plot.finch,  nperm = 9)
data(finch.ind)
oldpar <- par(no.readonly = TRUE)
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)")
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2",
ind.plot = ind.plot.finch,  nperm = 9)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 1)
res.finch.sp_mn2
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
?warnings
res.finch.sp_mn2.prab <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop.p",
ind.plot = ind.plot.finch,  nperm = 9, com=c(1,1))
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 1)
library(cati)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 1)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 1)
library(cati)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 1)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch,
ind.plot = ind.plot.finch,  nperm = 0)
res.finch.sp_mn2.prab <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop.p",
ind.plot = ind.plot.finch,  nperm = 9)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2",
ind.plot = ind.plot.finch,  nperm = 9)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2",
ind.plot = ind.plot.finch,  nperm = 9)
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch,  nperm = 9)
res.finch.sp_mn2.prab <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "regional.pop.p",
ind.plot = ind.plot.finch,  nperm = 9)
library(cati)
?plotDistri
?plotDistri
?plotDistri
warnings()
?plot
warnings
warnings()
warning()
