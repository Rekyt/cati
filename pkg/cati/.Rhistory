perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(traits_by_sp, npop_bysite[s])
}
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress==T){
print(paste("nm.2sp.prab",round(t/ntr*100,2),"%"))
}
}
namestraits <- colnames(traits)
traits.nm2sp.prab <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
npop_bysite<-table(unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ])
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow=dim(traits_by_sp)[1], ncol=nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(traits_by_sp, npop_bysite[s])
}
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress==T){
print(paste("nm.2sp.prab",round(t/ntr*100,2),"%"))
}
}
name_sp_sites=paste(sp, ind.plot, sep="_")
comm=NULL
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom=length(S)
ind.plot<-ind.plot.finch
name_sp_sites=paste(sp, ind.plot, sep="_")
comm=NULL
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom=length(S)
sp<-sp.finch
name_sp_sites=paste(sp, ind.plot, sep="_")
comm=NULL
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom=length(S)
traits.nm2sp.prab <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
npop_bysite<-table(unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ])
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow=dim(traits_by_sp)[1], ncol=nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(traits_by_sp, npop_bysite[s])
}
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress==T){
print(paste("nm.2sp.prab",round(t/ntr*100,2),"%"))
}
}
printprogress=T
traits.nm2sp.prab <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
npop_bysite<-table(unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ])
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow=dim(traits_by_sp)[1], ncol=nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
for(s in 1:  ncom) {
perm_ind.plot[[s]] <- sample(traits_by_sp, npop_bysite[s])
}
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress==T){
print(paste("nm.2sp.prab",round(t/ntr*100,2),"%"))
}
}
traits.nm2sp.prab
rowSums(traits.nm2sp.prab)
rowSums(traits.nm2sp.prab[[1]])
colSums(traits.nm2sp.prab[[1]])
colSums(traits.nm2sp.prab[[1]], na.rm=T)
colMeans(traits.nm2sp.prab[[1]], na.rm=T)
colMeans(traits.nm2sp.prab[[2]], na.rm=T)
colMeans(traits.nm2sp.prab[[9]], na.rm=T)
colMeans(traits.nm2sp.prab[[4]], na.rm=T)
?sample
sample(traits_by_sp, npop_bysite[s])
sample(traits_by_sp, npop_bysite[s])
npop_bysite[s]
sample(traits_by_sp, npop_bysite[s])
sample(traits_by_sp, npop_bysite[s])
sample(traits_by_sp, npop_bysite[2])
sample(traits_by_sp, npop_bysite[2])
dim(traits_by_sp)[1]
traits.nm2sp.prab <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
#Not util
#npop_bysite<-table(unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ])
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow=dim(traits_by_sp)[1], ncol=nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
perm_ind.plot <- sample(traits_by_sp, dim(traits_by_sp)[1])
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress==T){
print(paste("nm.2sp.prab",round(t/ntr*100,2),"%"))
}
}
colMeans(traits.nm2sp.prab[[4]], na.rm=T)
traits.nm2sp.prab
traits.nm2sp.prab[[1]]
colSums(traits.nm2sp.prab[[1]])
colSums(traits.nm2sp.prab[[1]], na.rm=T)
colSums(traits.by.sp, na.rm=T)
colSums(traits_by_sp)
colSums(traits_by_sp, na;rm=T)
colSums(traits_by_sp, na, rm=T)
colSums(traits_by_sp, na.rm=T)
traits.nm2sp.prab <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
#Not util
#npop_bysite<-table(unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ])
for (t in 1: ntr){
traits.nm2sp.prab[[eval(namestraits[t])]] <- matrix(NA, nrow=dim(traits_by_sp)[1], ncol=nperm)
perm_ind.plot <- list()
for(n in 1:nperm){
perm_ind.plot <- sample(traits_by_sp[,t], dim(traits_by_sp)[1])
traits.nm2sp.prab[[eval(namestraits[t])]][,n] <- unlist(perm_ind.plot)
}
if (printprogress==T){
print(paste("nm.2sp.prab",round(t/ntr*100,2),"%"))
}
}
colSums(traits.nm2sp.prab[[1]], na.rm=T)
colSums(traits.nm2sp.prab[[3]], na.rm=T)
nm.bis <- traits.nm2sp.prab[[1]]
Null <- list()
nm_bypop <- list()
nm_bypop.bis <- list()
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
name_sp_sites
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
funct <- c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE) -
min(x, na.rm = TRUE) )", "tapply(x, ind.plot.finch, function(x)
CVNND(x))"  )
index=funct
namesindex <- index
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
i=1
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
functionindex= eval(index[i])
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
functionindex<-eval("tapply(x, rownames(traits_by_sp), mean , na.rm=T)")
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
dim2
Null
nm_bypop.bis[[eval(namesindex[i])]] <-  apply(nm.bis, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
dim2 <- dim(apply(nm_bypop.bis[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex))))[1]
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
if (is.null(dim2)) {
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, 1, nperm) )
}
Null[[eval(namesindex[i])]] <- array(NA, dim=c(ntr, dim2, nperm) )
Null
Null[[eval(namesindex[i])]]
i
nm_bypop[[eval(namesindex[i])]] <-  apply(nm, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
Null[[eval(namesindex[i])]] [t,, ] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex)))
Null[[eval(namesindex[i])]] [t,,] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex)))
nm <- traits.nm2sp.prab[[t]]
nm_bypop[[eval(namesindex[i])]] <-  apply(nm, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
Null[[eval(namesindex[i])]] [t,, ] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex)))
Null[[eval(namesindex[i])]] [t,,] <- apply(nm_bypop[[eval(namesindex[i])]], 2, function (x) eval(parse(text=functionindex)))
Null[[eval(namesindex[i])]] [t,,]
colSums(Null[[eval(namesindex[i])]] [t,,] )
t
traits.pop <- apply(traits, 2 , function (x) tapply(x, rownames(traits_by_sp), mean , na.rm=T))
obs[[eval(namesindex[i])]] <- array(dim=c(ntr, dim(apply(traits.pop, 2, function (x) eval(parse(text=functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits.pop, 2, function (x) eval(parse(text=functionindex)))
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
obs[[eval(namesindex[i])]] <- array(dim=c(ntr, dim(apply(traits_by_sp, 2, function (x) eval(parse(text=functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_sp, 2, function (x) eval(parse(text=functionindex)))
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
obs[[eval(namesindex[i])]] <- array(dim=c(ntr, dim(apply(traits_by_sp, 2, function (x) eval(parse(text=functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_sp, 2, function (x) eval(parse(text=functionindex)))
obs <- list()
traits_by_sp <- apply(traits, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
obs[[eval(namesindex[i])]] <- array(dim=c(ntr, dim(apply(traits_by_sp, 2, function (x) eval(parse(text=functionindex))))[1]))
obs[[eval(namesindex[i])]] <-  apply(traits_by_sp, 2, function (x) eval(parse(text=functionindex)))
obs
colSums(obs)
colSums(obs[[1]])
colSums(obs[[1]], na.rm=T)
traits_by_sp <- apply(traits.finch, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
sites_bysp<-rownames(traits_by_sp)
funct.withoutIV.prab <- c("tapply(x, unlist(sites_bysp), function(x)
mean(x, na.rm = TRUE))", "tapply(x, unlist(sites_bysp), function(x)
kurtosis(x, na.rm = TRUE))", "tapply(x, unlist(sites_bysp), function(x)
max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bysp), function(x) CVNND(x))"  )
}
res.finch.withoutIV.prab <- ComIndex(traits = traits.finch, index = funct.withoutIV.prab,
sp = sp.finch, nullmodels = rep("2sp.prab", times=4), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
funct.withoutIV.prab,
funct.withoutIV.prab
funct.withoutIV.prab <- c("tapply(x, unlist(sites_bysp), function(x) mean(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bysp), function(x) CVNND(x))")
funct.withoutIV.prab
res.finch.withoutIV.prab <- ComIndex(traits = traits.finch, index = funct.withoutIV.prab,
sp = sp.finch, nullmodels = rep("2sp.prab", times=4), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
traceback
nullmodels = rep("2sp.prab", times=4)
nullmodels
nullmodels==2sp.prab
nullmodels=="2sp.prab"
library(cati)
traits_by_sp <- apply(traits.finch, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
sites_bysp<-rownames(traits_by_sp)
funct.withoutIV.prab <- c("tapply(x, unlist(sites_bysp), function(x) mean(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bysp), function(x) CVNND(x))")
res.finch.withoutIV.prab <- ComIndex(traits = traits.finch, index = funct.withoutIV.prab,
sp = sp.finch, nullmodels = rep("2sp.prab", times=4), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
data(finch.ind)
traits_by_sp <- apply(traits.finch, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
sites_bysp<-rownames(traits_by_sp)
funct.withoutIV.prab <- c("tapply(x, unlist(sites_bysp), function(x) mean(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bysp), function(x) CVNND(x))")
res.finch.withoutIV.prab <- ComIndex(traits = traits.finch, index = funct.withoutIV.prab,
sp = sp.finch, nullmodels = rep("2sp.prab", times=4), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
data(finch.ind)
oldpar <- par()
####
#The function ComIndex allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)", "CVNND(x)"  )
\dontrun{
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn3 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can represent Standardized Effect Size (ses)
#using the function plot(as.listofindex(list1, list2, list3))
list.ind2 <- list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2 <- as.listofindex(list.ind2)
plot(index.list2, type = "bytraits")
plot(index.list2)
####
#This allows to calcul index per site
#for example using "tapply(x, sites, mean)".
funct <- c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE) -
min(x, na.rm = TRUE) )", "tapply(x, ind.plot.finch, function(x)
CVNND(x))"  )
##Null model 1 is trivial for this function
#because randomisation is within community only
res.finch.ind_mn1 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c(1,1,1,1), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.ind_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can calcul metrics with or without intraspecific variance.
#Calculation of trait averages per population
#(name_sp_site is a name of a population)
#like in the function ComIndex
#and determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch, sep = "_")
traits.by.pop <- apply(traits.finch, 2 , function (x)
tapply(x, name_sp_sites, mean , na.rm = TRUE))
sites_bypop <- lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"),
split = "_"), function(x) x[3])
funct.withoutIV <- c("tapply(x, unlist(sites_bypop), function(x)
mean(x, na.rm = TRUE))", "tapply(x, unlist(sites_bypop), function(x)
kurtosis(x, na.rm = TRUE))", "tapply(x, unlist(sites_bypop), function(x)
max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.withIV <- c("tapply(x, ind.plot.finch, function(x)
mean(x, na.rm = TRUE))", "tapply(x, ind.plot.finch, function(x)
kurtosis(x, na.rm = TRUE))", "tapply(x, ind.plot.finch, function(x)
max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.withIV <- ComIndex(traits = traits.finch, index = funct.withIV,
sp = sp.finch, nullmodels = c("2","2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.withoutIV <- ComIndex(traits = traits.finch, index = funct.withoutIV,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can also represent T-statistics and custom index thanks to
#the plot.listofindex function.
res.finch <- Tstats(traits.finch, ind_plot = ind.plot.finch, sp = sp.finch,
nperm = 9, print = FALSE)
list.ind <- list(res.finch.withIV, res.finch.withoutIV ,res.finch)
index.list1 <- as.listofindex(list.ind, namesindex = c("mean", "kurtosis",
"range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow = c(2,3))
plot(index.list1,type = "bytraits", bysite = TRUE)
par(mfrow = c(2,2))
plot(index.list1,type = "bytraits")
par(mfrow = c(1,1))
plot(index.list1,type = "simple")
plot(index.list1,type = "simple_range")
plot(index.list1,type = "normal")
plot(index.list1,type = "barplot")
}
############################
####Using ind.value = FALSE and community data matrix if there is no data
#available at the individual level.
\dontrun{
#create traits data at the species level
traits_by_sp <- apply(traits.finch,2,function(x) tapply(x,sp.finch,
function(x) mean(x, na.rm = T)))
#create traits data at the populational level
names_sp_ind_plot <- as.factor(paste(sp.finch, ind.plot.finch, sep = "@"))
traits_by_pop <- apply(traits.finch,2,function(x) tapply(x,names_sp_ind_plot,
function(x) mean(x, na.rm = T) ))
#create community data matrix at the species or populational level
w1 <- table(sp.finch,ind.plot.finch)
dim(w1)
dim(traits_by_sp)
w2 <- table(names_sp_ind_plot,ind.plot.finch)
dim(w2)
dim(traits_by_pop)
#Choose indices
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)", "CVNND(x)"  )
#################
#with species value
res <- AbToInd(traits_by_sp, w1)
ComIndex(traits_by_sp, nullmodels = 2, ind.value = FALSE, index = funct,
sp = rownames(traits_by_sp), com = w1, nperm = 9)
#################
#with population value
res <- AbToInd(traits_by_pop, w2)
sp.sp <- unlist(strsplit(rownames(traits_by_pop),"@"))[seq(1,39*2,2)]
ComIndex(traits_by_pop, nullmodels = 2, ind.value = FALSE, index = funct,
sp = sp.sp, com = w2)
}
############################
####Simple example using null model 2sp.prab (species level without taking
# into acount for species abundance, prab for presence/absence)
traits_by_sp <- apply(traits.finch, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
sites_bysp<-rownames(traits_by_sp)
funct.withoutIV.prab <- c("tapply(x, unlist(sites_bysp), function(x) mean(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bysp), function(x) CVNND(x))")
res.finch.withoutIV.prab <- ComIndex(traits = traits.finch, index = funct.withoutIV.prab,
sp = sp.finch, nullmodels = rep("2sp.prab", times=4), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
}
warnings()
res.finch.withoutIV.prab
res.finch.withoutIV.prab[[1]]
res.finch.withoutIV.prab[[1]][[1]]
sum(res.finch.withoutIV.prab[[1]][[1]])
colSum(sres.finch.withoutIV.prab[[1]][[1]], na.rm=T)
colSums(res.finch.withoutIV.prab[[1]][[1]], na.rm=T)
attributes(res.finch.withoutIV.prab)
colSums(res.finch.withoutIV.prab[[2]][[1]], na.rm=T)
sites_bysp<-table(unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ])
sites_bysp
sites_bysp<-unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ]
sites_bysp
funct.withoutIV.prab <- c("tapply(x, unlist(sites_bysp), function(x) mean(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, unlist(sites_bysp), function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bysp), function(x) CVNND(x))")
res.finch.withoutIV.prab <- ComIndex(traits = traits.finch, index = funct.withoutIV.prab,
sp = sp.finch, nullmodels = rep("2sp.prab", times=4), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.withoutIV.prab$obs
res.finch.withoutIV.prab$null
res.finch.withoutIV.prab$Null
list.ind2 <- list(res.finch.withoutIV, res.finch.withoutIV.prab)
index.list2 <- as.listofindex(list.ind2, namesindex =
c("mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"mean.prab", "kurtosis.prab", "range.prab", "CVNND.prab"))
plot(index.list2)
c(2,2)
w<-c(2,2)
w==2
w=="2"
names.sp_ind_plot <- as.factor(paste(sp.finch, ind.plot.finch, sep = "_"))
comm <- t(table(ind.plot.finch,1:length(ind.plot.finch)))
library(mice)
traits = traits.finch
mice <- mice(traits.finch)
traits.finch.mice <- complete(mice)
####
#A simple example to illustrate the concept of the function
#ComIndexMulti
res.sum.1 <- ComIndexMulti(traits.finch,
index = c("sum(scale(x), na.rm = TRUE)", "sum(x, na.rm = TRUE)"),
by.factor = names.sp_ind_plot, nullmodels = c(2,2),
ind.plot = ind.plot.finch, nperm = 50, sp = sp.finch)
attributes(ses.listofindex(as.listofindex(res.sum.1)))
####
#A more interesting example using the function hypervolume
#from the package hypervolume.
#We show here several results which differe in there factor
#that delimit the group to calculate different hypervolume
#(argument by_factor).
require(hypervolume)
res.hv.1 <- ComIndexMulti(traits.finch.mice, index = c("as.numeric
(try(hypervolume(na.omit(x), reps = 100, bandwidth = 0.2, verbose = FALSE,
warnings = FALSE)@Volume))"), by.factor = rep(1,length(names.sp_ind_plot)),
nullmodels = c(2,2), ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.hv.2 <- ComIndexMulti(traits.finch.mice, index = c("as.numeric
(try(hypervolume(na.omit(x), reps = 100, bandwidth = 0.2, verbose = FALSE,
warnings = FALSE)@Volume))"), by.factor = names.sp_ind_plot,
nullmodels = c(2,2), ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.hv.3 <- ComIndexMulti(traits.finch.mice, index = c("as.numeric
(try(hypervolume(na.omit(x), reps = 100, bandwidth = 0.2, verbose = FALSE,
warnings = FALSE)@Volume))"), by.factor = ind.plot.finch,
nullmodels = c(2,2), ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.hv.4 <- ComIndexMulti(traits.finch.mice, index = c("as.numeric
(try(hypervolume(na.omit(x), reps = 100, bandwidth = 0.2, verbose = FALSE,
warnings = FALSE)@Volume))"), by.factor = sp.finch,
nullmodels = c(2,2), ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.hv.4
res.hv.1 <- ComIndexMulti(traits.finch.mice, index =
c("as.numeric (try(hypervolume(na.omit(x), warnings = FALSE)@Volume))"),
by.factor = rep(1,length(names.sp_ind_plot)), nullmodels = c(2,2),
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
?hypervolume
res.hv.1 <- ComIndexMulti(traits.finch.mice, index =
c("as.numeric (try(hypervolume(na.omit(x), warnings = FALSE, bandwidth=0.2)@Volume))"),
by.factor = rep(1,length(names.sp_ind_plot)), nullmodels = c(2,2),
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.hv.1
res.hv.5 <- ComIndexMulti(traits.finch.mice, index =
c("as.numeric(try(hypervolume(na.omit(x), warnings = FALSE , bandwidth=0.2, warnings = F)@Volume))"),
by.factor = sp.finch, nullmodels = c("2sp", "2sp"),
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.hv.5 <- ComIndexMulti(traits.finch.mice, index =
c("as.numeric(try(hypervolume(na.omit(x), warnings = FALSE , bandwidth=0.2)@Volume))"),
by.factor = sp.finch, nullmodels = c("2sp", "2sp"),
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
traceback
traceback()
sp.finch
res.hv.6 <- ComIndexMulti(traits.finch.mice, index =
c("as.numeric(try(hypervolume(na.omit(x), warnings = FALSE, bandwidth=0.2, verbose=FALSE)@Volume))"),
by.factor = sites_bysp, nullmodels = c("2sp.prab", "2sp.prab"),
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
traits_by_sp <- apply(traits.finch, 2, function(x) tapply(x, name_sp_sites, mean, na.rm=T))
sites_bysp<-unlist(strsplit(rownames(traits_by_sp), split="_"))[seq(3,3*dim(traits_by_sp)[1], by=3) ]
res.hv.6 <- ComIndexMulti(traits.finch.mice, index =
c("as.numeric(try(hypervolume(na.omit(x), warnings = FALSE, bandwidth=0.2, verbose=FALSE)@Volume))"),
by.factor = sites_bysp, nullmodels = c("2sp.prab", "2sp.prab"),
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
sites_bysp
list.ind.multi <- as.listofindex(list(res.hv.2, res.hv.3, res.hv.4))
ses.listofindex(list.ind.multi)
plot(list.ind.multi)
plot(list.ind.multi, xlim = c(-200,20))
