install.packages("C:/Users/taudiere/Desktop/cati_0.4.zip", repos = NULL)
library("cati", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
attributes(res.finch)
#Tstats class is associated to S3 methods plot, barplot and summary
plot(res.finch)
plot(res.finch, type="color_cond")
plot(res.finch, type="simple")
plot(res.finch, type="simple_sd")
plot(res.finch, type="barplot")
attributes(summary(res.finch))
head(summary(res.finch)$p.value, 10)
summary.Tstats(res.finch, type="binary")
summary.Tstats(res.finch, type="percent")
summary.Tstats(res.finch, type="site")
summary.Tstats(res.finch, type="p.value")
summary.Tstats(res.finch, type="all")
barplot(res.finch)
attributes(summary(res.finch))
head(summary(res.finch)$p.value, 10)
#### An other way to see "ses values" of T-statistics
# Custom theme (from rasterVis package)
my.theme <- BuRdTheme()
# Customize the colorkey
my.ckey <- list(col=my.theme$regions$col)
levelplot(t(ses(res.finch$T_IP.IC,res.finch$T_IP.IC_nm)$ses), colorkey=my.ckey, par.settings=my.theme,border="black")
install.packages("C:/Users/taudiere/Dropbox/cati_0.4.zip", repos=NULL)
install.packages("cati", repos="http://R-Forge.R-project.org")
library(cati)
library(cati)
library("adegenet", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
adegenetWeb()
?as.dnabin
?as.dna
?adegenet
data(nancycats)
nancycats@loc.names
# isolate one marker, fca23
obj <- seploc(nancycats)$"fca23"
obj
require(adegenet)
data(nancycats)
nancycats@loc.names
# isolate one marker, fca23
obj <- seploc(nancycats)$"fca23"
obj
obj
obj$ploidy
head(obj$tab)
head(obj@tab)
nancycats
nancycats@loc.names
nancycats
install.packages("roxygen2")
library("roxygen2", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
library(cati)
library(cati)
library(cati)
library(cati)
data(finch.ind)
dim(traits.finch)
?print
?attach
?Tstats
library(cati)
?Tstats
install.packages("C:/Users/taudiere/Dropbox/cati_0.4.zip", repos=NULL)
data(finch.ind)
<<dev='pdf'>>=
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch,
ind.plot.finch, ylim.cex=3, plot.ask=F,
multipanel=F, leg=F)
plot(list.ind.multi)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
attributes(res.finch)
@
plot(res.finch)
plot(res.finch)
funct<-c("mean(x, na.rm=T)", "kurtosis(x, na.rm=T)",
"max(x, na.rm=T) - min(x, na.rm=T)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2)
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function
##because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
@
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.whithIV<-funct
fact<-unlist(sites_bypop)
funct.whithoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV,
sp=sp.finch, nullmodels=c(2,2,2,2),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV,
sp=sp.finch, nullmodels=c(3,3,3,3),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
@
\newpage
We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
<<dev='pdf'>>=
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
class(i.l1)
par(mfrow=c(2,3))
plot(i.l1,type="bytraits", bysites=TRUE)
par(mfrow=c(2,2))
plot(i.l1,type="bytraits")
par(mfrow=c(1,1))
plot(i.l1,type="simple")
<<<<<<< HEAD
opts_chunk$set(fig.keep='high', dev='pdf', fig.width=7, fig.height=7, tidy=FALSE, warning=FALSE, fig.show="asis")
install.packages("C:/Users/taudiere/Dropbox/cati_0.4.zip", repos=NULL)
source('~/.active-rstudio-document', echo=TRUE)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
oldpar<-par(no.readonly = TRUE)
?hypervolume
hypervolume(traits.finch.mice)
require(mice)
traits=traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
hv<-hypervolume(traits.finch.mice)
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
summary(hv)
plot(hv)
subset(iris, Species=="setosa")[,1:4]
data(iris)
hv1 = hypervolume(subset(iris, Species=="setosa")[,1:4],reps=1000,bandwidth=0.2)
summary(hv1)
data(iris)
hv1 = hypervolume(subset(iris, Species=="setosa")[,1:4],reps=1000,bandwidth=0.2)
plot(hv1)
demo('quercus', package='hypervolume')
doHypervolumeQuercusDemo=TRUE
demo(quercus)*
doHypervolumeQuercusDemo=TRUE
demo(quercus)
demo('finch', package='hypervolume')
doHypervolumeFinchDemo=TRUE
demo(finch)
data(iris)
hv1 = hypervolume(subset(iris, Species=="setosa")[,1:4],reps=1000,bandwidth=0.2)
# choose fixed axes
plot(hv1, pair=TRUE, npmax=500, varlims=list(c(3,6),c(2,5),c(0,3),c(-1,1)))
dim(traits.finch.mice)
length(table(sp.finch)
)
for(i in 1: length(table(sp.finch)){
hv[[i]]<-by(hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i]],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
for(i in 1: length(table(sp.finch)){
hv[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i] ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
for(i in 1: length(table(sp.finch))) {
hv[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i] ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
for(i in 1: length(table(sp.finch))) {
hv[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv[[1]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv.list<-list()
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list<-new("HypervolumeList", hv.list)
plot(hv.list)
class(hv.list)<-"HypervolumeList"
plot(hv.list)
plot(hv.list[[1]])
plot(hv.list[[2]])
hv.list[1:12]
hv.list<-new("HypervolumeList", hv.list[1:12])
hv.list<-new("HypervolumeList", hv.list[[1]])
class(hv.list[[1]])
hv.list<-new("HypervolumeList", list(hv.list[[1]],hv.list[[2]]))
hv.list<-new("HypervolumeList", hv.list[[1]],hv.list[[2]])
?new
plot(hv.list[[1]],hv.list[[2]])
plot(list(hv.list[[1]],hv.list[[2]]))
?plot.HypervolumeList
plot.HypervolumeList
class(hv.list)<-"HVList"
plot(hv.list)
HVlist
?HVlist
?HVList
HVList
hv.list<-new("HypervolumeList", hv.list[[1]],hv.list[[2]])
hv.list<-new("HypervolumeList", hv.list)
hv.list<-new("HypervolumeList", hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[1], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F), hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[2], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)  )
new("HypervolumeList", ...)
new("HypervolumeList")
hv.list<-new("HypervolumeList")
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list<-new("HypervolumeList")
hv
hv.list
hv.list<-new("HypervolumeList")
hv.list
for(i in 1: length(table(sp.finch))) {
hv.list<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
}
hv.list
plot(hv.list)
class(hv.list)
hv.list<-new("HypervolumeList")
class(hv.list)
hv.list<-by(traits.finch.mice, sp.finch, function(x) hypervolume (x, reps=100,bandwidth=0.2, verbose=F, warnings=F) )
hv.list
class(sp.finch)
class(hv.list)
hv.list<-new("HypervolumeList")
hv.list
hv.list<-by(traits.finch.mice, sp.finch, function(x) hypervolume (x, reps=100,bandwidth=0.2, verbose=F, warnings=F) )
class(hv.list)<-"HypervolumeList"
class(hv.list)
plot(hv.list)
for(i in 1: length(table(sp.finch))) {
hv.list2<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
}
hv.list<-new("HypervolumeList")
hv.list<-hv.list2
clas(hv.list)
class(hv.list)
hv.list<-new("HypervolumeList")
class(hv.list)
hv/list
hv.list
hv.list<-new("HypervolumeList")
hv.list2<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
hv.list2<-new("HypervolumeList")
hv.list2<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
clas(hv.list2)
class(hv.list2)
hv.list2<-new("HypervolumeList")
hv.list2<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
class(hv.list2)
hv.list2
attributes(hv.list2)
hv.list<-new("HypervolumeList")
hv.list<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
hv.list
class(hv.list)
hv.list<-new("HypervolumeList")
reps=100,bandwidth=0.2,
hv.list<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
class(hv.list)
plot(hv.list)
for(i in 1: length(table(sp.finch))) {
hv.list<-list(hv.list,hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F))
}
plot(hv.list[[1]])
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list<-list()
for(i in 1: length(table(sp.finch))) {
hv.list[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
plot(hv.list[[1]])
plot(hv.list[[2]])
plot(hv.list[[3]])
plot(hv.list[[4]])
plot(hv.list[[5]])
plot(hv.list[[6]])
plot(hv.list[[7]])
plot(hv.list[[8]])
plot(hv.list[[9]])
plot(hv.list[[10]])
plot(hv.list[[11]])
plot(hv.list[[12]])
plot(hv.list)
class(hv.list)<-"Hypervolume"
plot(hv.list)
class(hv.list)<-"HypervolumeList"
plot(hv.list)
hv.list)
hv.list
class(hv.list)
slot(hv.list)
slot(hv.list, HVList)
names(hv.list)
attributes(hv.list)
length(hv.list)
new("HypervolumeList")
hv.list<-new("HypervolumeList")
hv.list<-new("HypervolumeList")
attributes(hv.list)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list$HVList<-hv.list2
hv.list$HVList
hv.list@HVList<-hv.list2
plot(hv.list)
plot(hv.list)
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
plot(hv.list)
require(adegenet)
funky(12)
plot(hv.list, col=colorhv)
colorhv<-c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A", "#FFFF99", "#B15928")
plot(hv.list, col=colorhv)
?funcky
?funky
funky(12, alpha=0.5)
transp(funky(12) alpha=0.5)
transp(funky(12), alpha=0.5)
colorhv<-c("#A6CEE380", "#1F78B480", "#B2DF8A80", "#33A02C80", "#FB9A9980", "#E31A1C80", "#FDBF6F80", "#FF7F0080", "#CAB2D680", "#6A3D9A80", "#FFFF9980", "#B1592880")
plot(hv.list, col=colorhv)
transp(funky(12), alpha=0.8)
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, col=colorhv)
plot(hv.list, colors=colorhv)
plot(hv.list, colors=colorhv, darkfactor=0.1)
plot(hv.list, colors=colorhv, darkfactor=0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1)
plot(hv.list, colors=colorhv, darkfactor=1, showdensity=F)
plot(hv.list, colors=rgb(0,0,0,0.5), rgb(0,1,1,0.5), darkfactor=1, showdensity=F)
plot(hv.list, colors=c(rgb(0,0,0,0.5), rgb(0,1,1,0.5)), darkfactor=1, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=1)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
<<dev='pdf'>>=
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=10000,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax=10000)
hv<-hypervolume(traits.finch.mice,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=1000,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
colorhv<-transp(funky(nfactor(sp.finch)), alpha=0.8)
colorhv<-transp(funky(nlevels(sp.finch)), alpha=0.8)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 200, cex.random =1)
res.decomp<-decomp_whithin(traits=traits.finch, sp=sp.finch,
ind.plot=ind.plot.finch, print=FALSE)
barplot.decomp_whithin(res.decomp)
par(mfrow=c(2,2))
barplot.decomp_whithin(res.decomp, resume=F)
=======
>>>>>>> 9b2ffdae82cad1205bdb65eb797b528836e7829a
