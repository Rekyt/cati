#### Use a different regional pool than the binding of studied communities
#create a random regional pool for the example
reg.p <- rbind(traits.finch, traits.finch[sample(1:2000,300), ])
res.finch2 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, reg.pool=reg.p, nperm = 9, print = FALSE)
plot(as.listofindex(list(res.finch,res.finch2)))
#### Use a different regional pool for each communities
#create a random regional pool for each communities for the example
list.reg.p <- list(
traits.finch[sample(1:290,200), ], traits.finch[sample(100:1200,300), ],
traits.finch[sample(100:1500, 1000), ], traits.finch[sample(300:800,300), ],
traits.finch[sample(1000:2000, 500), ], traits.finch[sample(100:900, 700), ] )
# Warning: the regional pool need to be larger than the observed communities
table(ind.plot.finch)
# For exemple, the third community need a regional pool of more than 981 individuals
res.finch3 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, reg.pool=list.reg.p, nperm = 9, print = FALSE)
plot(as.listofindex(list(res.finch, res.finch2, res.finch3)))
}
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, nperm = 9, print = FALSE)
\dontrun{
#### Use a different regional pool than the binding of studied communities
#create a random regional pool for the example
reg.p <- rbind(traits.finch, traits.finch[sample(1:2000,300), ])
res.finch2 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, reg.pool=reg.p, nperm = 9, print = FALSE)
plot(as.listofindex(list(res.finch,res.finch2)))
#### Use a different regional pool for each communities
#create a random regional pool for each communities for the example
list.reg.p <- list(
traits.finch[sample(1:290,200), ], traits.finch[sample(100:1200,300), ],
traits.finch[sample(100:1500, 1000), ], traits.finch[sample(300:800,300), ],
traits.finch[sample(1000:2000, 500), ], traits.finch[sample(100:900, 700), ] )
# Warning: the regional pool need to be larger than the observed communities
table(ind.plot.finch)
# For exemple, the third community need a regional pool of more than 981 individuals
res.finch3 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, reg.pool=list.reg.p, nperm = 9, print = FALSE)
plot(as.listofindex(list(res.finch, res.finch2, res.finch3)))
}
plot(as.listofindex(list(res.finch, res.finch2, res.finch3)))
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
"max(x, na.rm = T) - min(x, na.rm = T)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.withIV<-funct
fact<-unlist(sites_bypop)
funct.withoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.withIV,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.withoutIV,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
IndexByGroups(funct, ind.plot.finch)
IndexByGroups(funct, "ind.plot.finch")
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
"max(x, na.rm = T) - min(x, na.rm = T)", "CVNND(x)" )
IndexByGroups(funct, "ind.plot.finch")
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
"max(x, na.rm = T) - min(x, na.rm = T)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
library(cati)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
"max(x, na.rm = T) - min(x, na.rm = T)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
fact
length(fact)
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
"max(x, na.rm = T) - min(x, na.rm = T)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
funct.2<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))" )
#The function IndexByGroups permit to easily obtain the above lines
IndexByGroups(funct, "ind.plot.finch")
##Null model local is trivial for these functions
##because randomization is within community only
res.finch.ind_loc<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "local", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.ind_reg<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
funct.1<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))" )
#The function IndexByGroups permit to easily obtain the above lines
IndexByGroups(funct, "ind.plot.finch")
##Null model local is trivial for these functions
##because randomization is within community only
res.finch.ind_loc<-ComIndex(traits = traits.finch, index = funct.1, sp = sp.finch,
nullmodels = "local", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.ind_reg<-ComIndex(traits = traits.finch, index = funct.1, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
@
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.1,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
plot(list(res.finch.withIV, res.finch.withoutIV))
plot(c(res.finch.withIV, res.finch.withoutIV))
plot(as.listofindex(res.finch.withIV, res.finch.withoutIV))
plot(as.listofindex(c(res.finch.withIV, res.finch.withoutIV)))
plot(as.listofindex(list(res.finch.withIV, res.finch.withoutIV)))
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
"max(x, na.rm = T) - min(x, na.rm = T)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.1<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))" )
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
"tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.1,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
plot(as.listofindex(list(res.finch.withIV, res.finch.withoutIV)))
hv.1<-ComIndexMulti(traits.finch.mice,
index = c("as.numeric(try(hypervolume(na.omit(x), reps = 100,
bandwidth = 0.2, verbose = F, warnings = F)@Volume))"),
by.factor = rep(1,length(n_sp_plot)), nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
data(finch.ind)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
require(mice)
traits = traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
#A simple example to illustrate the concept of the function \texttt{ComIndexMulti}
n_sp_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep = "_"))
res.sum.1<-ComIndexMulti(traits.finch,
index = c("sum(scale(x), na.rm = T)", "sum(x, na.rm = T)"),
by.factor = n_sp_plot, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
res.sum.1
#A more interesting example using the function hypervolume from the package hypervolume
hv<-hypervolume(traits.finch.mice,
reps = 100,bandwidth = 0.2,
verbose = F, warnings = F)
plot(hv)
hv.1<-ComIndexMulti(traits.finch.mice,
index = c("as.numeric(try(hypervolume(na.omit(x), reps = 100,
bandwidth = 0.2, verbose = F, warnings = F)@Volume))"),
by.factor = rep(1,length(n_sp_plot)), nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, sp = sp.finch)
plot(hv1)
plot(hv.1)
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, nperm = 9, print = FALSE)
\dontrun{
#### Use a different regional pool than the binding of studied communities
#create a random regional pool for the example
reg.p <- rbind(traits.finch, traits.finch[sample(1:2000,300), ])
res.finch2 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, reg.pool=reg.p, nperm = 9, print = FALSE)
plot(as.listofindex(list(res.finch,res.finch2)))
#### Use a different regional pool for each communities
#create a random regional pool for each communities for the example
list.reg.p <- list(
traits.finch[sample(1:290,200), ], traits.finch[sample(100:1200,300), ],
traits.finch[sample(100:1500, 1000), ], traits.finch[sample(300:800,300), ],
traits.finch[sample(1000:2000, 500), ], traits.finch[sample(100:900, 700), ] )
# Warning: the regional pool need to be larger than the observed communities
table(ind.plot.finch)
# For exemple, the third community need a regional pool of more than 981 individuals
res.finch3 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, reg.pool=list.reg.p, nperm = 9, print = FALSE)
ses(as.listofindex(list(res.finch, res.finch2, res.finch3)))
}
ses(res.finch)
hv1
hv.1
ses(as.listofindex(res.finch))
as.listofindex(res.finch)
ses(as.listofindex(res.finch))
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = Traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = Traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#New list of function "funct"
funct.1<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE)-min(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))" )
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = TRUE))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, fact, function(x) max(x, na.rm = TRUE)-min(x, na.rm = TRUE))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = Traits.finch, index = funct.1,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = Traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
plot(as.listofindex(list(res.finch.withIV, res.finch.withoutIV)))
data(finch.ind)
#Define the function s to calculate
funct<-c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)" )
#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.ind", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
nullmodels = "regional.pop", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
#We can calculate index with or without intraspecific variance.
#calculate  of means by population (name_sp_site is a name of a population)
#determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm = TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"),
function(x) x[3])
#New list of function "funct"
funct.1<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE)-min(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))" )
fact<-unlist(sites_bypop)
funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = TRUE))",
"tapply(x, fact, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, fact, function(x) max(x, na.rm = TRUE)-min(x, na.rm = TRUE))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.1,
sp = sp.finch, nullmodels = "regional.ind",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2,
sp = sp.finch, nullmodels = "regional.pop",
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
#ComIndex class are associated to S3 methods plot, print and summary.
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
plot(as.listofindex(list(res.finch.withIV, res.finch.withoutIV)))
?install.packages
library(cati)
library(cati)
library(cati)
data(finch.ind)
Then, calculate the T-statistics on Darwin finches’ data and plot the result.
res <- Tstats(traits.finch, ind.plot.finch, sp.finch)
res
plot(res)
