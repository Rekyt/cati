lty.lm=3
lwd.lm=1
color.lm<-col.nonsignif.lm
}
if(!is.na(interm$coefficient[2])){
lines(interm$model[,2] , interm$fitted.values, lty=lty.lm, lwd=lwd.lm, col=color.lm )
>>>>>>> b242242040b7445c6adab42f930e5d5466f00316
}
if(multipanel){
par(mfrow = c(sqrt(ntr), sqrt(ntr)) )
}
if(is.null(col.sp)){
col.sp<-rainbow(nlevels(sp))
}
if(length(col.sp)<nlevels(sp)){
col.sp<-rep(col.sp ,length.out=nlevels(sp))
}
if(is.null(col.pop)){
col.pop<-col.sp[match(spplot, levels(sp))]
}
if(is.null(col.site)){
col.site<-rep(rgb(0.1, 0.1, 0.1 , 0.8),ncom)
}
if(!resume){
for(t in 1:ntr){
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
points(x.pop, y.pop, pch=16,  col=col.pop)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
color.lm<-col.signif.lm
}
else{
lty.lm=0
lwd.lm=0
}
options(warn=0)
}
}
options(warn=-1)
try( interm2<-lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)
color.lm2<-col.nonsignif.lm
if(class(try(lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)) =="lm"){
if(!is.na(summary(interm2)$coefficient[,4])){
if(summary(interm2)$coefficients[2,4]<p.val & length(interm2$fitted.values)>min.ind.signif){
color.lm2<-col.signif.lm
}
else{}
options(warn=0)
}
}
points(tapply( traits_by_pop[,t], plotsp ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], plotsp ,mean, na.rm=T) , col=col.site, pch="*", cex=3)
points(tapply( traits_by_pop[,t], spplot ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], spplot ,mean, na.rm=T) , col=col.sp, pch=16, cex=1.5)
abline(try(lm( traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent) , lty=2, lwd=2, col=color.lm2)
}
}
if(resume){
for(t in 1:ntr){
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
plot(x.pop, y.pop, pch=16,  col=col.pop)
abline(a=0, b=1, lty=3, lwd=2)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
}
else{
lty.lm=0
lwd.lm=0
}
options(warn=0)
}
else{
lty.lm=3
lwd.lm=1
}
if(!is.na(interm$coefficient[2])){
lines(interm$model[,2] , interm$fitted.values, lty=lty.lm, lwd=lwd.lm, col=col.sp[s] )
}
}
}
points(tapply( traits_by_pop[,t], spplot ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], spplot ,mean, na.rm=T) , col=col.sp, pch=16, cex=1.5)
}
}
par(mfrow = c(1, 1))
}
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,5)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
traits<-traits.finch
ind.plot<-ind.plot
sp<-sp.finch
variable=variable
col.ind = rgb(0.5,0.5,0.5,0.5); col.pop=NULL; col.sp=NULL; col.site=NULL; resume=FALSE; p.val=0.05, min.ind.signif=10; multipanel=TRUE; col.nonsignif.lm=rgb(0,0,0,0.5); col.signif.lm=rgb(1,0.1,0.1,0.8)
col.ind = rgb(0.5,0.5,0.5,0.5); col.pop=NULL; col.sp=NULL; col.site=NULL; resume=FALSE; p.val=0.05; min.ind.signif=10; multipanel=TRUE; col.nonsignif.lm=rgb(0,0,0,0.5); col.signif.lm=rgb(1,0.1,0.1,0.8)
ntr<-dim(traits)[2]
namestraits<-colnames(traits)
traits<-traits[order(ind.plot),]
ind.plot<-ind.plot[order(ind.plot)]
sp<-sp[order(ind.plot)]
name_sp_sites=paste(sp, ind.plot, sep="_")
comm<-t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom=length(S)
plotsp=unlist(strsplit(levels(as.factor(name_sp_sites)),split="_"))[seq(3,3*nlevels(as.factor(name_sp_sites)), by=3)]
#plosp is the plot in wich the population is
plotind=unlist(strsplit(name_sp_sites,split="_"))[seq(3,3*length(name_sp_sites), by=3)]
spplot=paste(unlist(strsplit(levels(as.factor(name_sp_sites)),split="_"))[seq(1,3*nlevels(as.factor(name_sp_sites)), by=3)], unlist(strsplit(levels(as.factor(name_sp_sites)),split="_"))[seq(2,3*nlevels(as.factor(name_sp_sites)), by=3)], sep="_")
traits_by_pop<-apply(traits,2,function(x) tapply(x, name_sp_sites,mean, na.rm=T))
traits_by_sites<-variable
if(is.vector(traits_by_sites)){
traits_by_sites<-matrix(rep(traits_by_sites, times=ntr), ncol=ntr)
}
if(multipanel){
par(mfrow = c(sqrt(ntr), sqrt(ntr)) )
}
if(is.null(col.sp)){
col.sp<-rainbow(nlevels(sp))
}
if(length(col.sp)<nlevels(sp)){
col.sp<-rep(col.sp ,length.out=nlevels(sp))
}
if(is.null(col.pop)){
col.pop<-col.sp[match(spplot, levels(sp))]
}
if(is.null(col.site)){
col.site<-rep(rgb(0.1, 0.1, 0.1 , 0.8),ncom)
}
if(!resume){
for(t in 1:ntr){
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
points(x.pop, y.pop, pch=16,  col=col.pop)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
color.lm<-col.signif.lm
}
else{
<<<<<<< HEAD
=======
lty.lm=0
lwd.lm=0
}
options(warn=0)
}
else{
>>>>>>> b242242040b7445c6adab42f930e5d5466f00316
lty.lm=3
lwd.lm=1
color.lm<-col.nonsignif.lm
}
if(!is.na(interm$coefficient[2])){
lines(interm$model[,2] , interm$fitted.values, lty=lty.lm, lwd=lwd.lm, col=color.lm )
<<<<<<< HEAD
}
}
}
options(warn=-1)
try( interm2<-lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)
color.lm2<-col.nonsignif.lm
if(class(try(lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)) =="lm"){
if(!is.na(summary(interm2)$coefficient[,4])){
if(summary(interm2)$coefficients[2,4]<p.val & length(interm2$fitted.values)>min.ind.signif){
color.lm2<-col.signif.lm
}
else{}
options(warn=0)
}
=======
>>>>>>> b242242040b7445c6adab42f930e5d5466f00316
}
points(tapply( traits_by_pop[,t], plotsp ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], plotsp ,mean, na.rm=T) , col=col.site, pch="*", cex=3)
points(tapply( traits_by_pop[,t], spplot ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], spplot ,mean, na.rm=T) , col=col.sp, pch=16, cex=1.5)
abline(try(lm( traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent) , lty=2, lwd=2, col=color.lm2)
}
}
<<<<<<< HEAD
for(t in 1:ntr){
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
points(x.pop, y.pop, pch=16,  col=col.pop)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
color.lm<-col.signif.lm
}
=======
options(warn=-1)
try( interm2<-lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)
color.lm2<-col.nonsignif.lm
if(class(try(lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)) =="lm"){
if(!is.na(summary(interm2)$coefficient[,4])){
if(summary(interm2)$coefficients[2,4]<p.val & length(interm2$fitted.values)>min.ind.signif){
color.lm2<-col.signif.lm
}
else{}
options(warn=0)
}
}
points(tapply( traits_by_pop[,t], plotsp ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], plotsp ,mean, na.rm=T) , col=col.site, pch="*", cex=3)
points(tapply( traits_by_pop[,t], spplot ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], spplot ,mean, na.rm=T) , col=col.sp, pch=16, cex=1.5)
abline(try(lm( traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent) , lty=2, lwd=2, col=color.lm2)
}
}
for(t in 1:ntr){
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
points(x.pop, y.pop, pch=16,  col=col.pop)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
color.lm<-col.signif.lm
}
>>>>>>> b242242040b7445c6adab42f930e5d5466f00316
else{
lty.lm=0
lwd.lm=0
}
options(warn=0)
}
else{
lty.lm=3
lwd.lm=1
color.lm<-col.nonsignif.lm
}
if(!is.na(interm$coefficient[2])){
lines(interm$model[,2] , interm$fitted.values, lty=lty.lm, lwd=lwd.lm, col=color.lm )
}
}
}}
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
.
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.ind
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
traits_by_sites
rownames(traits_by_sites)
plotind
plot_sp_var<-function(traits=NULL, ind.plot=NULL, sp=NULL, variable = NULL, col.ind = rgb(0.5,0.5,0.5,0.5), col.pop=NULL, col.sp=NULL, col.site=NULL, resume=FALSE, p.val=0.05, min.ind.signif=10 , multipanel=TRUE, col.nonsignif.lm=rgb(0,0,0,0.5), col.signif.lm=rgb(1,0.1,0.1,0.8), silent=FALSE) {
ntr<-dim(traits)[2]
namestraits<-colnames(traits)
traits<-traits[order(ind.plot),]
ind.plot<-ind.plot[order(ind.plot)]
sp<-sp[order(ind.plot)]
name_sp_sites=paste(sp, ind.plot, sep="_")
comm<-t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom=length(S)
plotsp=unlist(strsplit(levels(as.factor(name_sp_sites)),split="_"))[seq(3,3*nlevels(as.factor(name_sp_sites)), by=3)]
#plosp is the plot in wich the population is
plotind=unlist(strsplit(name_sp_sites,split="_"))[seq(3,3*length(name_sp_sites), by=3)]
spplot=paste(unlist(strsplit(levels(as.factor(name_sp_sites)),split="_"))[seq(1,3*nlevels(as.factor(name_sp_sites)), by=3)], unlist(strsplit(levels(as.factor(name_sp_sites)),split="_"))[seq(2,3*nlevels(as.factor(name_sp_sites)), by=3)], sep="_")
traits_by_pop<-apply(traits,2,function(x) tapply(x, name_sp_sites,mean, na.rm=T))
traits_by_sites<-variable
if(is.vector(traits_by_sites)){
traits_by_sites<-matrix(rep(traits_by_sites, times=ntr), ncol=ntr)
}
interm.for.names<-apply(traits,2,function(x) tapply(x, ind.plot,mean, na.rm=T))
colnames(traits_by_sites)<-colnames(interm.for.names)
rownames(traits_by_sites)<-rownames(interm.for.names)
if(multipanel){
par(mfrow = c(sqrt(ntr), sqrt(ntr)) )
}
if(is.null(col.sp)){
col.sp<-rainbow(nlevels(sp))
}
if(length(col.sp)<nlevels(sp)){
col.sp<-rep(col.sp ,length.out=nlevels(sp))
}
if(is.null(col.pop)){
col.pop<-col.sp[match(spplot, levels(sp))]
}
if(is.null(col.site)){
col.site<-rep(rgb(0.1, 0.1, 0.1 , 0.8),ncom)
}
if(!resume){
for(t in 1:ntr){
x.ind<-traits_by_sites[match(plotind,rownames(traits_by_sites)),t]
y.ind<-traits[,t]
plot(x.ind, y.ind, pch=16, col=col.ind, cex=0.5)
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
points(x.pop, y.pop, pch=16,  col=col.pop)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
color.lm<-col.signif.lm
}
else{
lty.lm=0
lwd.lm=0
}
options(warn=0)
}
else{
lty.lm=3
lwd.lm=1
color.lm<-col.nonsignif.lm
}
if(!is.na(interm$coefficient[2])){
lines(interm$model[,2] , interm$fitted.values, lty=lty.lm, lwd=lwd.lm, col=color.lm )
}
}
}
options(warn=-1)
try( interm2<-lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)
color.lm2<-col.nonsignif.lm
if(class(try(lm(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent)) =="lm"){
if(!is.na(summary(interm2)$coefficient[,4])){
if(summary(interm2)$coefficients[2,4]<p.val & length(interm2$fitted.values)>min.ind.signif){
color.lm2<-col.signif.lm
}
else{}
options(warn=0)
}
}
points(tapply( traits_by_pop[,t], plotsp ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], plotsp ,mean, na.rm=T) , col=col.site, pch="*", cex=3)
points(tapply( traits_by_pop[,t], spplot ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], spplot ,mean, na.rm=T) , col=col.sp, pch=16, cex=1.5)
abline(try(lm( traits_by_sites[match(plotsp,rownames(traits_by_sites)),t] ~ traits_by_pop[,t]), silent = silent) , lty=2, lwd=2, col=color.lm2)
}
}
if(resume){
for(t in 1:ntr){
x.pop<-traits_by_sites[match(plotsp,rownames(traits_by_sites)),t]
y.pop<-traits_by_pop[,t]
plot(x.pop, y.pop, pch=16,  col=col.pop)
abline(a=0, b=1, lty=3, lwd=2)
for(s in 1:nlevels(sp)){
try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)
options(warn=-1)
if(class(try( interm<-lm(y.pop[spplot==levels(sp)[s]] ~ x.pop[spplot==levels(sp)[s]]), silent = silent)) =="lm"){
if(!is.na(summary(interm)$coefficient[,4])){
if(summary(interm)$coefficients[2,4]<p.val & length(interm$fitted.values)>min.ind.signif){
lty.lm=1
lwd.lm=3
}
else{
lty.lm=0
lwd.lm=0
}
options(warn=0)
}
else{
lty.lm=3
lwd.lm=1
}
if(!is.na(interm$coefficient[2])){
lines(interm$model[,2] , interm$fitted.values, lty=lty.lm, lwd=lwd.lm, col=col.sp[s] )
}
}
}
points(tapply( traits_by_pop[,t], spplot ,mean, na.rm=T) ~ tapply(traits_by_sites[match(plotsp,rownames(traits_by_sites)),t], spplot ,mean, na.rm=T) , col=col.sp, pch=16, cex=1.5)
}
}
par(mfrow = c(1, 1))
}
<<<<<<< HEAD
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,5)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,35)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,35)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, resume=TRUE)
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,25)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
#If we change the value of the threshold (alpha=10\% instead of 5\% and the minimum individual to represent singificativity fixed to 3 instead of 10 by default) we can see some significant relationships.
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, p.val=0.1,  min.ind.signif=3, silent=TRUE)
#For a more simple figure, add the option resume=TRUE. Again if we change the value of the threshold (alpha=10\% instead of 5\% and the minimum individual to represent singificativity fixed to 3 instead of 10 by default) we can see some significant relationships.
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey")
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black")
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black", p.val=0.1,  min.ind.signif=3)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black")
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey")
finch
?finch
data(finch.ind)
data(finch.ind)
library(cati)
library(cati)
?attach
library(cati)
CVNND<-function(trait, div_range=FALSE){
r=sort(trait)
if(length(r)<1){
nnd=NA}
else{nnd=vector(length=length(r)-1)
for(j in 2:length(r)){
nnd[j-1]=r[j]-r[j-1]
}
}
CVNND<-sd(nnd,na.rm=T)/mean(nnd, na.rm=T)
if (div_range==T) {CVNND<-CVNND/range(trait)}
else {}
return(CVNND)
}
data(finch.ind)
CVNND(traits.finch[,1])
CVNND<-function(trait, div_range=FALSE){
r=sort(trait)
if(length(r)<1){
nnd=NA}
else{nnd=vector(length=length(r)-1)
for(j in 2:length(r)){
nnd[j-1]=r[j]-r[j-1]
}
}
CVNND<-sd(nnd,na.rm=T)/mean(nnd, na.rm=T)
if (div_range==T) {CVNND<-CVNND/range(trait)}
else {}
return(CVNND)
}
require(cati)
data(finch.ind)
CVNND(traits.finch[,1])
=======
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,5)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,35)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,35)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, resume=TRUE)
data(finch.ind)
#Random variable for this example
variable<-c(1,5,15,6,3,25)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE)
#If we change the value of the threshold (alpha=10\% instead of 5\% and the minimum individual to represent singificativity fixed to 3 instead of 10 by default) we can see some significant relationships.
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, p.val=0.1,  min.ind.signif=3, silent=TRUE)
#For a more simple figure, add the option resume=TRUE. Again if we change the value of the threshold (alpha=10\% instead of 5\% and the minimum individual to represent singificativity fixed to 3 instead of 10 by default) we can see some significant relationships.
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey")
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black")
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black", p.val=0.1,  min.ind.signif=3)
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black")
plot_sp_var(traits.finch, ind.plot.finch, sp.finch, variable, silent=TRUE, resume=TRUE, col.pop="grey")
finch
?finch
data(finch.ind)
data(finch.ind)
>>>>>>> b242242040b7445c6adab42f930e5d5466f00316
library(cati)
library(cati)
library(cati)
R CMD check --help
devtools::load_all(".")
library(cati)
