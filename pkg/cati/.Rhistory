<<<<<<< HEAD
function(x) tapply(x, sp_enz, max, na.rm=T))))
apply(traits_enz, 2, scale)
traits_enz.sp
dim(traits_enz.sp)
155-33
traits_enz.sp[,122]
traits_enz.sp[122,]
traits_enz.sp[120:125,]
apply(traits_enz, 2, scale)[120:125,]
rownames(traits_enz.sp)[is.na(traits_enz.sp)]
8*3
colnames(traits_enz.sp)[is.na(traits_enz.sp)]
rownames(traits_enz.sp[is.na(traits_enz.sp)])
names(traits_enz.sp[is.na(traits_enz.sp)])
(traits_enz.sp[is.na(traits_enz.sp)])
rownames(is.na(traits_enz.sp))
rowSums(is.na(traits_enz.sp))
rowSums(is.na(traits_enz.sp))[rowSums(is.na(traits_enz.sp))>0]
apply(traits_enz, 2, scale)$Thelephoraceae_sp12*
apply(traits_enz, 2, scale)$Thelephoraceae_sp12
apply(traits_enz, 2, scale)
traits_enz.sp$Thelephoraceae_sp12
traits_enz.sp
rownames(traits_enz.sp)$Thelephoraceae_sp12
rownames(traits_enz.sp)
atach(traits_enz.sp)
attach(traits_enz.sp)
traits_enz.sp[rownames(traits_enz.sp)=="Thelephoraceae_sp12"] <-apply(traits_enz, 2, scale)
traits_enz.sp[rownames(traits_enz.sp)=="Thelephoraceae_sp12"] <-apply(traits_enz, 2, scale)[rownames(traits_enz.sp)=="Thelephoraceae_sp12"]
traits_enz.sp[rownames(traits_enz.sp)=="Thelephoraceae_sp12"]
apply(traits_enz, 2, scale)[rownames(traits_enz.sp)=="Thelephoraceae_sp12"]
apply(traits_enz, 2, scale)[rownames(traits_enz.sp)=="Thelephoraceae_sp12",]
apply(traits_enz, 2, scale)
rownames(traits_enz.sp)=="Thelephoraceae_sp12"
apply(traits_enz, 2, scale)
apply(traits_enz, 2, scale)
apply(traits_enz, 2, scale)[rownames(traits_enz.sp)=="Thelephoraceae_sp12",]
apply(traits_enz, 2, scale)[,rownames(traits_enz.sp)=="Thelephoraceae_sp12"]
apply(traits_enz, 2, scale)[rownames(traits_enz.sp)=="Thelephoraceae_sp12"]
apply(traits_enz, 2, scale)
dim(apply(traits_enz, 2, scale))
dim(traits_enz.sp)
rownames(apply(traits_enz, 2, scale))
names(apply(traits_enz, 2, scale))
names(comm.sp)
rownames(comm.sp)
comm<-t(table(ind_plot_enz,1:length(ind_plot_enz)))
comm.sp<-table(sp_enz, ind_plot_enz)
class(comm.sp)<-"matrix"
rownames(comm.sp)
rownames(comm)
sp.enz
sp_enz
sp_enz=="Thelephoraceae_sp12"
sum(sp_enz=="Thelephoraceae_sp12")
sp_enz
levels(sp_enz)
sum(sp_enz=="Thelephoraceae_sp12" )
sum(level(sp_enz)=="Thelephoraceae_sp12" )
sum(levels(sp_enz)=="Thelephoraceae_sp12" )
sum(as.vector(sp_enz)=="Thelephoraceae_sp12" )
sp_enz=="Thelephoraceae_sp12"
sp_enz==Thelephoraceae_sp12
sp_enz="Thelephoraceae_sp12"
sp_enz<-sp_enz.interm[!cond]
rownames(traits_enz.sp)=="Thelephoraceae_sp12"
sp_enz=="Thelephoraceae_sp12"
as.factor(sp_enz)=="Thelephoraceae_sp12"
sum(as.factor(sp_enz)=="Thelephoraceae_sp12")
sp_enz
sum(as.factor(sp_enz)=="Hebeloma_velutipes")
sum(as.factor(sp_enz)=="Cenococcum_geophilum")
traits_enz.sp[rownames(traits_enz.sp)=="cenococcum_geophilum"] <- apply(traits_enz, 2, scale)[sp_enz=="cenococcum_geophilum",]
traits_enz.sp[rownames(traits_enz.sp)=="Cenococcum_geophilum"] <- apply(traits_enz, 2, scale)[sp_enz=="Cenococcum_geophilum",]
sum(is.na(traits_enz.sp))
traits_enz.sp[rownames(traits_enz.sp)=="Sebacinaceae_sp3"] <- apply(traits_enz, 2, scale)[sp_enz=="Sebacinaceae_sp3",]
traits_enz.sp[rownames(traits_enz.sp)=="Thelephoraceae_sp7"] <- apply(traits_enz, 2, scale)[sp_enz=="Thelephoraceae_sp7",]
traits_enz.sp[rownames(traits_enz.sp)=="Sebacinaceae_sp3"] <- apply(traits_enz, 2, scale)[sp_enz=="Sebacinaceae_sp3",]
traits_enz.sp[rownames(traits_enz.sp)=="Thelephoraceae_sp7"] <- apply(traits_enz, 2, scale)[sp_enz=="Thelephoraceae_sp7",]
traits_enz.sp[rownames(traits_enz.sp)=="Cenococcum_geophilum"] <- apply(traits_enz, 2, scale)[sp_enz=="Cenococcum_geophilum",]
sp_enz
library(cati, warn.conflicts = FALSE)
BD_Esther<-read.csv("C:/Users/taudiere/Dropbox/Analyses en cours/Tstats sur enzymes champignons/BD_Esther.csv", sep=";", dec=",")
traits_enz.interm<- BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,5:12]
ind_plot_enz.interm<-paste(BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,1], BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,2], sep=".")
sp_enz.interm<-BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,]$Species
@
<<results='hide', message=FALSE, warning=FALSE>>=
#delete community without intra-specific information (3 _97  et  4_96)
cond<-ind_plot_enz.interm==levels(as.factor(ind_plot_enz.interm))[15] | ind_plot_enz.interm==levels(as.factor(ind_plot_enz.interm))[19]
traits_enz<-traits_enz.interm[!cond,]
ind_plot_enz<-as.factor(ind_plot_enz.interm[!cond])
sp_enz<-sp_enz.interm[!cond]
sp_enz
sp_enz.interm
sp_enz<-as.factor(as.vector(sp_enz.interm[!cond])))
sp_enz<-as.factor(as.vector(sp_enz.interm[!cond]))
sp_enz
comm<-t(table(ind_plot_enz,1:length(ind_plot_enz)))
comm.sp<-table(sp_enz, ind_plot_enz)
class(comm.sp)<-"matrix"
traits_enz.sp<-apply( apply(traits_enz, 2, scale), 2,
function(x) tapply(x, sp_enz, mean, na.rm=T))
mat.dist<-as.matrix(dist(traits_enz.sp))^2
res.rao<-RaoRel(sample=as.matrix(comm.sp),
dfunc=mat.dist, dphyl=NULL,
weight=F, Jost=F, structure=NULL)
witRao<-res.rao$FD$Mean_Alpha  #overall within species variance
betRao<-res.rao$FD$Beta_add    #between species variance
totRao<-res.rao$FD$Gamma       #the total variance
witRao+betRao
totRao
@
res.rao.w<-RaoRel(sample=as.matrix(comm.sp),
dfunc=mat.dist, dphyl=NULL,
weight=T, Jost=F, structure=NULL)
witRao.w<-res.rao.w$FD$Mean_Alpha  #overall within species variance
betRao.w<-res.rao.w$FD$Beta_add    #between species variance
totRao.w<-res.rao.w$FD$Gamma       #the total variance
witRao.w
betRao.w
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
comm<-t(table(ind_plot_enz,1:length(ind_plot_enz)))
require(mice)
traits=traits_enz
mice<-mice(traits_enz)
traits_enz.mice<-complete(mice)
We can do this analysis for each trait separately.
opts_chunk$set(fig.keep='high', dev='pdf', fig.width=7, fig.height=7, tidy=FALSE, warning=FALSE, fig.show="asis")
traits_enz.sp<-apply(apply(traits_enz, 2, scale ), 2,
function(x) tapply(x, sp_enz, mean, na.rm=T))
trait.rao.w<-list()
witRao.w.bytrait<-c()
betRao.w.bytrait<-c()
for(t in 1 : 4){
trait.rao.w[[t]]<-RaoRel(sample=as.matrix(comm.sp),
dfunc=dist(traits_enz.sp[,t]),
dphyl=NULL, weight=T, Jost=F, structure=NULL)
witRao.w.bytrait<-c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)
betRao.w.bytrait<-c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)
}
names.arg = colnames(traits_enz),
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)),
names.arg = colnames(traits_enz),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,1.5))
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)),
names.arg = colnames(traits_enz),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,1.5))
traits_enz.sp
dim(traits_enz.sp)
trait.rao.w<-list()
witRao.w.bytrait<-c()
betRao.w.bytrait<-c()
for(t in 1 : 8){
trait.rao.w[[t]]<-RaoRel(sample=as.matrix(comm.sp),
dfunc=dist(traits_enz.sp[,t]),
dphyl=NULL, weight=T, Jost=F, structure=NULL)
witRao.w.bytrait<-c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)
betRao.w.bytrait<-c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)
}
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)),
names.arg = colnames(traits_enz),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,1.5))
res.decomp<-decomp_within(traits=traits_enz, sp=sp_enz,
ind.plot=ind_plot_enz, print=FALSE)
barplot.decomp_within(res.decomp)
par(mfrow=c(2,2))
barplot.decomp_within(res.decomp, resume=F)
par(mfrow=c(1,1))
barplot.decomp_within(res.decomp)
par(mfrow=c(2,2), mai=c(0.2,0.2,0.2,0.2))
colors<-c(rgb(102,167,0,  maxColorValue = 255),
rgb(185,210,0,  maxColorValue = 255),
rgb(98,174,255,  maxColorValue = 255),
rgb(158,30,240,  maxColorValue = 255))
pie_partvar(res.partvar.finch, col=colors)
par(oldpar)
plot_sp_pop(traits_enz, ind_plot_enz, sp_enz, silent=TRUE)
funct<-c("mean(x, na.rm=T)", "kurtosis(x, na.rm=T)",
"max(x, na.rm=T) - min(x, na.rm=T)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits_enz, index=funct, sp=sp_enz,
nullmodels=c(2,2,2,2), ind.plot=ind_plot_enz,
nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits_enz, index=funct, sp=sp_enz,
nullmodels=c(3,3,3,3), ind.plot=ind_plot_enz,
nperm=9, print=FALSE)
funct<-c("tapply(x, ind_plot_enz, function(x) mean(x, na.rm=T))",
"tapply(x, ind_plot_enz, function(x) kurtosis(x, na.rm=T))",
"tapply(x, ind_plot_enz, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, ind_plot_enz, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function
##because randomisation is within community only
res.finch.ind_mn1<-com.index(traits=traits_enz, index=funct, sp=sp_enz,
nullmodels=c(1,1,1,1), ind.plot=ind_plot_enz,
nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits_enz, index=funct, sp=sp_enz,
nullmodels=c(2,2,2,2), ind.plot=ind_plot_enz,
nperm=9, print=FALSE)
name_sp_sites=paste(sp_enz, ind_plot_enz,sep="_")
traits.by.pop<-apply(traits_enz, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
funct.withIV<-funct
fact<-unlist(sites_bypop)
funct.withoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-com.index(traits=traits_enz, index=funct.withIV,
sp=sp_enz, nullmodels=c(2,2,2,2),
ind.plot=ind_plot_enz, nperm=9, print=FALSE)
res.finch.withoutIV<-com.index(traits=traits_enz, index=funct.withoutIV,
sp=sp_enz, nullmodels=c(3,3,3,3),
ind.plot=ind_plot_enz, nperm=9, print=FALSE)
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
class(i.l1)
par(mfrow=c(2,3))
plot(i.l1,type="bytraits", bysites=TRUE)
par(mfrow=c(2,2))
plot(i.l1,type="bytraits", bysites=TRUE)
plot(i.l1,type="bytraits")
par(mfrow=c(1,1))
plot(i.l1,type="simple")
plot(i.l1,type="simple_range")
plot(i.l1,type="normal")
plot(i.l1,type="barplot")
require(ade4)
ses.list.multi[[1]]$ses
ses.list[[1]]$ses
ses.list[[1]]
attributes(ses.list[[1]])
attributes(ses.list)
names(ses.list)
length(names(ses.list))
matfordudi<-matrix()
for(i in 1: length(names(ses.list))){
matfordudi[i,]<-ses.list[[i]]$ses
}
ses.list[[i]]$ses
matfordudi<-matrix()
for(i in 1: length(names(ses.list))){
matfordudi[i,]<-colmeans(ses.list[[i]]$ses)
}
matfordudi<-matrix()
for(i in 1: length(names(ses.list))){
matfordudi[i,]<-colMeans(ses.list[[i]]$ses)
}
colMeans(ses.list[[i]]$ses)
dim(traits.finch[2])
dim(traits.finch)[2]
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function
##because randomisation is within community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.withIV<-funct
fact<-unlist(sites_bypop)
funct.withoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-com.index(traits=traits.finch, index=funct.withIV,
sp=sp.finch, nullmodels=c(2,2,2,2),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.withoutIV<-com.index(traits=traits.finch, index=funct.withoutIV,
sp=sp.finch, nullmodels=c(3,3,3,3),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
class(i.l1)
ses.list<-ses.listofindex(i.l1)
matfordudi<-matrix(nrow=length(names(ses.list)), ncol=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi[i,]<-colMeans(ses.list[[i]]$ses)
}
colMeans(ses.list[[i]]$ses)
ses.list<-ses.listofindex(i.l1)
ses.list
library(cati, warn.conflicts = FALSE)
data(finch.ind)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.withIV<-funct
fact<-unlist(sites_bypop)
funct.withoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-com.index(traits=traits.finch, index=funct.withIV,
sp=sp.finch, nullmodels=c(2,2,2,2),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.withoutIV<-com.index(traits=traits.finch, index=funct.withoutIV,
sp=sp.finch, nullmodels=c(3,3,3,3),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
ses.list<-ses.listofindex(i.l1)
matfordudi<-matrix(nrow=length(names(ses.list)), ncol=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi[i,]<-colMeans(ses.list[[i]]$ses)
=======
verbose=F, warnings=F)
>>>>>>> 88467fe8d079c9993926d322508c2ca7cd639888
}
res.dudi<-dudi.pca(matfordudi)
res.dudi<-dudi.pca(t(matfordudi))
matfordudi
res.dudi<-dudi.pca(matfordudi)
dim(matfordudi)
?dudi.pca
matfordudi<-matrix(ncol=length(names(ses.list)), nrow=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
res.dudi<-dudi.pca(matfordudi)
plot(res.dudi)
scatter(res.dudi)
matfordudi2<-matrix(ncol=length(as.vector(ses.list[[1]]$ses)), nrow=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-as.vector(ses.list[[i]]$ses)
}
as.vector(ses.list[[i]]$ses)
length(as.vector(ses.list[[1]]$ses))
matfordudi2<-matrix(ncol=length(as.vector(ses.list[[1]]$ses)), nrow=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
matfordudi2<-matrix(ncol=length(as.vector(ses.list[[1]]$ses)), nrow=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
matfordudi2<-matrix(ncol=length(as.vector(ses.list[[1]]$ses)), nrow=dim(traits.finch)[2])
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
as.vector(ses.list[[i]]$ses)
dimmatfordudi2)
dim(matfordudi2)
length(names(ses.list))
matfordudi<-matrix(ncol=length(colMeans(ses.list[[i]]$ses)), nrow=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
matfordudi2<-matrix(ncol=length(as.vector(ses.list[[1]]$ses)), nrow=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
matfordudi2<-matrix(ncol=length(as.vector(ses.list[[1]]$ses)), nrow=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
dim(matfordudi2)
require(ade4)
matfordudi<-matrix(nrow=length(colMeans(ses.list[[i]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
res.dudi<-dudi.pca(matfordudi)
res.dudi<-dudi.pca(matfordudi)
res.dudi<-dudi.pca(t(matfordudi))
scatter(res.dudi)
res.dudi<-dudi.pca(t(matfordudi), scan=F,nf=2)
res.dudi2<-dudi.pca(matfordudi2, scan=F, nf=2)
scatter(res.dudi2)
scatter(res.dudi)
res.dudi2<-dudi.pca(matfordudi2, scan=F, nf=2)
scatter(res.dudi2)
s.corcircle(res.dudi2)
s.corcircle(res.dudi2$li)
s.corcircle(res.dudi2$co)
rownames(matfordudi2)<-names(ses.list)
colnames(matfordudi2)<-names(ses.list)
res.dudi2<-dudi.pca(matfordudi2, scan=F, nf=2)
scatter(res.dudi2)
s.corcircle(res.dudi2$co)
colnames(matfordudi)<-names(ses.list)
scatter(res.dudi)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
scatter(res.dudi)
colnames(finch.traits)
colnames(traits)
colnames(traits.finch)
ses.list[[i]]$ses
s.class(res.dudi2$li, c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6)))
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))))
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=colors)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4))
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4), boxes=F)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4), box=F)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4), boxe=F)
?s.class
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 ), col=rainbow(6))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=rainbow(6))
s.corcircle(res.dudi2$co)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
scatter(res.dudi)
matfordudi<-matrix(nrow=length(colMeans(ses.list[[i]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
colnames(matfordudi)<-names(ses.list)
rownames(matfordudi)<-colnames(traits.finch)
matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
colnames(matfordudi2)<-names(ses.list)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
scatter(res.dudi)
s.corcircle(res.li.dudi)
s.corcircle(res.dudi$li)
s.corcircle(res.dudi$co)
s.label(res.dudi$li)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=t)
res.dudi2<-dudi.pca(matfordudi2, scan=F, nf=2)
scatter(res.dudi2)
s.corcircle(res.dudi2$co)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=rainbow(6))
s.corcircle(res.dudi2$co)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4), add.plot=T)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=rainbow(6), add.plot=T)
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=heatcolors(6), add.plot=T)
?rainbow
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=heat.colors(6), add.plot=T)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=rainbow(4))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=heat.colors(6))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=topo.colors(6))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=cm.colors(6))
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=funky(4))
require(adegenet)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=funky(4))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=funky(6))
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=funky(4))
s.corcircle(res.dudi2$co)
install.packages('cheddar')
library(cheddar)
vignette('CheddarQuickstart') # Essential reading
vignette('Community')         # Also essential
vignette('PlotsAndStats')
vignette('Collections')
vignette('ImportExport')
hypervolum(traits_enz)
require(hypervolume)
hypervolum(traits_enz)
hypervolume(traits_enz)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
library(cati, warn.conflicts = FALSE)
BD_Esther<-read.csv("C:/Users/taudiere/Dropbox/Analyses en cours/Tstats sur enzymes champignons/BD_Esther.csv", sep=";", dec=",")
traits_enz.interm<- BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,5:12]
ind_plot_enz.interm<-paste(BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,1], BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,2], sep=".")
sp_enz.interm<-BD_Esther[rowSums(is.na(BD_Esther[,5:12]))==0,]$Species
cond<-ind_plot_enz.interm==levels(as.factor(ind_plot_enz.interm))[15] | ind_plot_enz.interm==levels(as.factor(ind_plot_enz.interm))[19]
traits_enz<-traits_enz.interm[!cond,]
ind_plot_enz<-as.factor(ind_plot_enz.interm[!cond])
sp_enz<-as.factor(as.vector(sp_enz.interm[!cond]))
hypervolume(traits_enz)
hv<-hypervolume(traits_enz,
reps=100,bandwidth=0.2,
verbose=F, warnings=F)
plot(hv)
<<<<<<< HEAD
demo('finch', package='hypervolume')
doHypervolumeFinchDemo=TRUE
demo(finch)
=======
hv.list<-new("HypervolumeList")
hv.list2<-list()
for(i in 1: length(table(sp.finch))) {
hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch==levels(sp.finch)[i], ],
reps=1000,bandwidth=0.2,
verbose=F, warnings=F)
}
hv.list@HVList<-hv.list2
colorhv<-c("#A6CEE3CC", "#1F78B4CC", "#B2DF8ACC", "#33A02CCC", "#FB9A99CC", "#E31A1CCC", "#FDBF6FCC", "#FF7F00CC", "#CAB2D6CC", "#6A3D9ACC", "#FFFF99CC", "#B15928CC")
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
colorhv<-transp(funky(nfactor(sp.finch)), alpha=0.8)
colorhv<-transp(funky(nlevels(sp.finch)), alpha=0.8)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F)
summary(hv.list)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdensity=F, showdata=F)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=0.8)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F,npmax = 100)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=1, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =0.9)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 100, cex.random =1)
plot(hv.list, colors=colorhv, darkfactor=0.8, showdata=F, npmax = 200, cex.random =1)
res.decomp<-decomp_whithin(traits=traits.finch, sp=sp.finch,
ind.plot=ind.plot.finch, print=FALSE)
barplot.decomp_whithin(res.decomp)
par(mfrow=c(2,2))
barplot.decomp_whithin(res.decomp, resume=F)
=======
>>>>>>> 9b2ffdae82cad1205bdb65eb797b528836e7829a
library(cati)
load("C:/Users/taudiere/Downloads/enz.env.rlq.RData")
plot(enz.env.rlq)
require(ade4)
plot(enz.env.rlq)
require(ade4)
load("C:/Users/taudiere/Downloads/enz.env.rlq.RData")
plot(enz.env.rlq)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow=c(2,3))
plot(index.list1,type="bytraits", bysites=TRUE)
par(mfrow=c(2,2))
plot(index.list1,type="bytraits")
par(mfrow=c(1,1))
plot(index.list1,type="simple")
plot(index.list1,type="simple_range")
plot(index.list1,type="normal")
plot(index.list1,type="barplot")
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
list.ind
index.list1<-as.listofindex(list.ind)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
list.ind
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
length(list.ind)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
load("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip")
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
detach("package:cati", unload=TRUE)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.6.zip", repos=NULL)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
?cati
namesindex=NULL
x<-list.ind
if(class(x)!="list"){x<-list(x)}
nlist<-length(x)
nindex<-vector()
for(i in 1: nlist){
if(inherits(x[[i]], "Tstats")) {
nindex[i]<-3
}
else if (inherits(x[[i]], "com.index") | inherits(x[[i]], "com.index.multi")) {
nindex[i]<-length(x[[i]]$obs)
}
else{stop("x must be a list of objects of class Tstats, com.index or com.index.multi")}
}
res<-list()
for(l in 1: nlist){
if(inherits(x[[l]], "Tstats")) {
for(i in c(1,10,2,11,3,12) ){
res<-c(res, list(x[[l]][[i]]))
}
}
else{
for(i in 1: nindex[l]){
res<-c(res, list(x[[l]]$obs[[i]]), list(x[[l]]$Null[[i]]) )
}
}
}
if(is.null(namesindex)) {
for(l in 1: nlist){
namesindex<-c(namesindex, paste( rep("index", nindex[l]), l, 1:nindex[l], sep="_") )
}
}
nlist
nindex
l
i
nindex[l]
1: nindex[l]
x[[l]][[i]]
x[[l]][[9]]
x[[l]][[4]]
for(l in 1: nlist){
if(inherits(x[[l]], "Tstats")) {
for(i in c(1,10,2,11,3,12) ){
res<-c(res, list(x[[l]][[i]]))
}
}}
c(1,10,2,11,3,12)
length(res.finch)
attributes(res.finch)
library(cati)
data(finch.ind)
oldpar<-par()
####
#The function \code(com.index) allow to choose your own function (like mean, range, variance...) to calculate customize index.
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)", "max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses) using the function \code(plot(as.listofindex(list1, list2, list3)))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index by sites for example using \code("tapply(x, sites, mean)").
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can calcul index with or whithout intraspecific variance.
#Calcul of means by population (name_sp_site is a name of a population) like in the function com.index and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x) tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"), function(x) x[3])
funct.whithoutIV<-c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.whithIV<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV, sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV, sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch, nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis", "range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", "T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
plot(index.list1)
plot(index.list1)
?par
?plot
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9)
par(mfrow=c(2,2))
species.richness<-table(ind.plot.finch)
plot_ses.var(as.listofindex(list(res.finch)), species.richness, multipanel=FALSE)
#Same plot with \code(resume=TRUE).
par(mfrow=c(2,2))
plot_ses.var(as.listofindex(list(res.finch)), species.richness, resume=TRUE, multipanel=FALSE)
par(mfrow=c(1,1))
library(cati)
devtools::load_all(".")
library(cati)
install.packages("roxygen2")
>>>>>>> 88467fe8d079c9993926d322508c2ca7cd639888
