install.packages("C:/Users/taudiere/Desktop/cati_0.4.zip", repos = NULL)
library("cati", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch, nperm=9, print=FALSE)
attributes(res.finch)
#Tstats class is associated to S3 methods plot, barplot and summary
plot(res.finch)
plot(res.finch, type="color_cond")
plot(res.finch, type="simple")
plot(res.finch, type="simple_sd")
plot(res.finch, type="barplot")
attributes(summary(res.finch))
head(summary(res.finch)$p.value, 10)
summary.Tstats(res.finch, type="binary")
summary.Tstats(res.finch, type="percent")
summary.Tstats(res.finch, type="site")
summary.Tstats(res.finch, type="p.value")
summary.Tstats(res.finch, type="all")
barplot(res.finch)
attributes(summary(res.finch))
head(summary(res.finch)$p.value, 10)
#### An other way to see "ses values" of T-statistics
# Custom theme (from rasterVis package)
my.theme <- BuRdTheme()
# Customize the colorkey
my.ckey <- list(col=my.theme$regions$col)
levelplot(t(ses(res.finch$T_IP.IC,res.finch$T_IP.IC_nm)$ses), colorkey=my.ckey, par.settings=my.theme,border="black")
install.packages("C:/Users/taudiere/Dropbox/cati_0.4.zip", repos=NULL)
install.packages("cati", repos="http://R-Forge.R-project.org")
library(cati)
library(cati)
library("adegenet", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
adegenetWeb()
?as.dnabin
?as.dna
?adegenet
data(nancycats)
nancycats@loc.names
# isolate one marker, fca23
obj <- seploc(nancycats)$"fca23"
obj
require(adegenet)
data(nancycats)
nancycats@loc.names
# isolate one marker, fca23
obj <- seploc(nancycats)$"fca23"
obj
obj
obj$ploidy
head(obj$tab)
head(obj@tab)
nancycats
nancycats@loc.names
nancycats
install.packages("roxygen2")
library("roxygen2", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
library(cati)
library(cati)
library(cati)
library(cati)
data(finch.ind)
dim(traits.finch)
?print
?attach
?Tstats
library(cati)
?Tstats
install.packages("C:/Users/taudiere/Dropbox/cati_0.4.zip", repos=NULL)
data(finch.ind)
<<dev='pdf'>>=
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch,
ind.plot.finch, ylim.cex=3, plot.ask=F,
multipanel=F, leg=F)
plot(list.ind.multi)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
attributes(res.finch)
@
plot(res.finch)
plot(res.finch)
funct<-c("mean(x, na.rm=T)", "kurtosis(x, na.rm=T)",
"max(x, na.rm=T) - min(x, na.rm=T)", "CVNND(x)"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2)
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
##Null model 1 is trivial for this function
##because randomisation is whithin community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
@
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.whithIV<-funct
fact<-unlist(sites_bypop)
funct.whithoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.whithIV<-com.index(traits=traits.finch, index=funct.whithIV,
sp=sp.finch, nullmodels=c(2,2,2,2),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.whithoutIV<-com.index(traits=traits.finch, index=funct.whithoutIV,
sp=sp.finch, nullmodels=c(3,3,3,3),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
@
\newpage
We can also represent T-statistics and custom index thanks to the \code(plot.listofindex) function.
<<dev='pdf'>>=
list.ind<-list(res.finch.whithIV, res.finch.whithoutIV ,res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
class(i.l1)
par(mfrow=c(2,3))
plot(i.l1,type="bytraits", bysites=TRUE)
par(mfrow=c(2,2))
plot(i.l1,type="bytraits")
par(mfrow=c(1,1))
plot(i.l1,type="simple")
