library(cati)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.92.zip", repos=NULL)
library("cati")
library("mice")
library("hypervolume")
data(finch.ind)
old.par<-par(no.readonly = TRUE)
dim(traits.finch)
table(sp.finch)
table(ind.plot.finch)
head(traits.finch)
plotDistri(traits.finch, sp.finch, ind.plot.finch,
ylim.cex=3, plot.ask=F, multipanel=F, leg=F)
par(mfrow=c(4,4), cex=0.5)
plotDistri(traits.finch, sp.finch, ind.plot.finch,
ylim.cex=3, plot.ask=F, multipanel=F, leg=F)
plotDistri(traits.finch, rep("toutes_sp", times=dim(traits.finch)[1]),
ind.plot.finch, ylim.cex=3, plot.ask=F, cex.leg=0.5)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
comm.sp<-table(sp.finch, ind.plot.finch)
class(comm.sp)<-"matrix"
traits.finch.sp<-apply( apply(traits.finch, 2, scale ), 2,
function(x) tapply(x, sp.finch, mean, na.rm=T))
mat.dist<-as.matrix(dist(traits.finch.sp))^2
res.rao<-RaoRel(sample=as.matrix(comm.sp),
dfunc=mat.dist, dphyl=NULL,
weight=F, Jost=F, structure=NULL)
witRao<-res.rao$FD$Mean_Alpha  #overall within species variance
betRao<-res.rao$FD$Beta_add    #between species variance
totRao<-res.rao$FD$Gamma       #the total variance
witRao+betRao
totRao
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
library(knitr)
opts_chunk$set(fig.keep='high', dev='pdf', fig.width=7, fig.height=7, tidy=FALSE, warning=FALSE, fig.show="asis")
res.rao.w<-RaoRel(sample=as.matrix(comm.sp),
dfunc=mat.dist, dphyl=NULL,
weight=T, Jost=F, structure=NULL)
witRao.w<-res.rao.w$FD$Mean_Alpha  #overall within species variance
betRao.w<-res.rao.w$FD$Beta_add    #between species variance
totRao.w<-res.rao.w$FD$Gamma       #the total variance
witRao.w
betRao.w
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
require(mice)
traits=traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
traits.finch.mice.sp<-apply(apply(traits.finch.mice, 2, scale ), 2,
function(x) tapply(x, sp.finch, mean, na.rm=T))
trait.rao.w<-list()
witRao.w.bytrait<-c()
betRao.w.bytrait<-c()
for(t in 1 : 4){
trait.rao.w[[t]]<-RaoRel(sample=as.matrix(comm.sp),
dfunc=dist(traits.finch.mice.sp[,t]),
dphyl=NULL, weight=T, Jost=F, structure=NULL)
witRao.w.bytrait<-c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)
betRao.w.bytrait<-c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)
}
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)),
names.arg = colnames(traits.finch),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,1.5))
res.decomp<-decompCTRE(traits=traits.finch, sp=sp.finch,
ind.plot=ind.plot.finch, print=FALSE)
barplot(res.decomp)
par(mfrow=c(2,2))
barplot(res.decomp, resume=F)
par(mfrow=c(1,1))
vec<- seq(1,length(sp.finch)*2, by=2)
genus<-as.vector(unlist(strsplit(as.vector(sp.finch),"_"))[vec])
fact<-cbind(genus=as.factor(genus),
species=as.factor(as.vector(sp.finch)),
sites=as.factor(as.vector(ind.plot.finch)))
res.partvar.finch<-partvar(traits=traits.finch, factors=fact)
res.partvar.finch
par(mfrow=c(2,2), mai=c(0.2,0.2,0.2,0.2))
colors<-c(rgb(102,167,0,  maxColorValue = 255),
rgb(185,210,0,  maxColorValue = 255),
rgb(98,174,255,  maxColorValue = 255),
rgb(158,30,240,  maxColorValue = 255))
piePartvar(res.partvar.finch, col=colors)
par(old.par)
barPartvar(res.partvar.finch, col=colors,
leg=TRUE)
plotSpPop(traits.finch, ind.plot.finch, sp.finch, silent=TRUE)
plotSpPop(traits.finch, ind.plot.finch, sp.finch,
silent=TRUE, resume=TRUE, col.pop="grey")
plotSpPop(traits.finch, ind.plot.finch, sp.finch,
silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black")
plotSpPop(traits.finch, ind.plot.finch, sp.finch,
silent=TRUE, resume=TRUE, col.pop="grey", col.sp="black",
p.val=0.1,  min.ind.signif=3)
res.finch<-Tstats(traits.finch, ind.plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
res.finch
attributes(res.finch)
str(res.finch)
plot(res.finch)
abline(v=0)
res.finch
attributes(res.finch)
str(res.finch)
plot(res.finch)
abline(v=0)
plot(res.finch)
par(mfrow=c(2,2))
plot(res.finch, type="color_cond")
par(mfrow=c(2,2))
plot(res.finch, type="simple")
plot(res.finch, type="simple_range")
plot(res.finch, type="barplot")
plot(res.finch, type="simple")
plot(res.finch, type="simple_range")
plot(res.finch, type="simple")
?polyg
??polyg
??polygon
?polygon
op <- par(bg = "thistle")
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "",
main = "2 x 11 rectangles; 'rect(100+i,300+i,  150+i,380+i)'")
i <- 4*(0:10)
## draw rectangles with bottom left (100, 300)+i
## and top right (150, 380)+i
rect(100+i, 300+i, 150+i, 380+i, col = rainbow(11, start = 0.7, end = 0.1))
rect(240-i, 320+i, 250-i, 410+i, col = heat.colors(11), lwd = i/5)
100+i
plot(c(100, 200), c(300, 450), type= "n", xlab = "", ylab = "")
rect(100, 300, 125, 350) # transparent
legend(180, 450, legend = 1:4, fill = c(NA, "green", par("fg"), "blue"),
density = c(NA, NA, 10, 30), angle = c(NA, NA, 30, -30))
rect(100, 300, 125, 350) # transparent
library(cati)
plot(res.finch, type="simple")
plot(res.finch)
plot(res.finch, type="simple")
plot(res.finch, type="simple")
plot(res.finch, type="simple_range")
plot(res.finch, type="simple")
ypolyg<-c( 5 + (nindex+1)*t-i, 5 + (nindex+1)*t-i,  6 + (nindex+1)*t-i,  6 + (nindex+1)*t-i )
xpolyg<-c(mean(res[[eval(namesindex[i])]]$ses.sup[,t], na.rm = T), mean(res[[eval(namesindex[i])]]$ses.sup[,t], na.rm = T), mean(res[[eval(namesindex[i])]]$ses.inf[,t], na.rm = T), mean(res[[eval(namesindex[i])]]$ses.inf[,t], na.rm = T) )
polygon(xpolyg, ypolyg, col = col.index[i])
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
x <- c(1:9, 8:1)
x
y
library(cati)
plot(res.finch, type="simple")
plot(res.finch, type="simple")
library(cati)
plot(res.finch, type="simple")
round
?round
trunc(1,99)
plot(res.finch, type="simple")
library(cati)
plot(res.finch, type="simple")
library(cati)
plot(res.finch, type="simple")
data(finch.ind)
oldpar <- par(no.readonly = TRUE)
####
#The function ComIndex allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)", "CVNND(x)"  )
## Not run:
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can represent Standardized Effect Size (ses)
#using the function plot(as.listofindex(list1, list2, list3))
list.ind2 <- list(res.finch.sp_mn2, res.finch.sp_mn2sp)
index.list2 <- as.listofindex(list.ind2)
plot(index.list2, type = "bytraits")
plot(index.list2)
warnings
warnings()
plot(index.list2)
plot(res.finch, type="barplot")
library(cati)
plot(res.finch, type="simple")
plot(res.finch, type="barplot")
plot(res.finch, type="bytraits")
plot(res.finch, type="bysites")
plot(res.finch, type="barplot")
plot(res.finch, type="simple_range")
plot(res.finch)
par(mforw=c(1,2))
plot(res.finch, type="simple")
plot(res.finch, type="simple_range")
par(mforw=c(1,2))
par(mfrow=c(1,2))
plot(res.finch, type="simple")
plot(res.finch, type="simple_range")
plot(res.finch, type="barplot")
plot(res.finch, type="bytraits")
plot(res.finch, type="bysites")
par(old.par)
library(cati)
plot(res.finch)
par(mfrow=c(1,2))
plot(res.finch, type="simple")
plot(res.finch, type="simple_range")
par
par()
plot(res.finch, type="bysites")
plot(res.finch, type="simple_range")
plot(res.finch, type="barplot")
plot(res.finch, type="barplot", alpha=0.1)
plot(res.finch, type="barplot", alpha=0)
plot(res.finch, type="simple")
plot(res.finch, type="simple",alpha=1)
plot(res.finch, type="simple",alpha=0)
plot(res.finch, type="simple",alpha=0)
plot(res.finch, type="simple")
plot(res.finch, type="simple",alpha=0)
plot(res.finch, type="simple")
plot(res.finch)
plot(res.finch)
plot(res.finch, color.cond=F)
plot(res.finch, color.cond=T)
plot(res.finch, alpha=0)
plot(res.finch, alpha=0.8)
plot(res.finch)
library(cati)
plot(res.finch, type="simple")
plot(res.finch)
plot(res.finch, type="barplot")
plot(res.finch, type="bytraits")
plot(res.finch, type="bysites")
plot(res.finch, type="simple")
plot(res.finch, type="bysites")
plot(res.finch, type="bytraits")
plot(res.finch, type="barplot")
plot(res.finch, type="simple")
?legend
library(cati)
plot(res.finch)
plot(res.finch, alpha=0.6)
plot(res.finch, alpha=0)
plot(res.finch)
library(cati)
plot(res.finch)
plot(res.finch)
plot(res.finch, type="simple_range")
plot(res.finch, type="barplot")
plot(res.finch, type="bytraits")
plot(res.finch, type="bytraits")
plot(res.finch, type="barplot")
plot(res.finch, type="bytraits")
plot(res.finch, type="bysites")
plot(res.finch)
data(finch.ind)
oldpar <- par(no.readonly = TRUE)
####
#The function ComIndex allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)", "CVNND(x)"  )
## Not run:
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can represent Standardized Effect Size (ses)
#using the function plot(as.listofindex(list1, list2, list3))
list.ind2 <- list(res.finch.sp_mn2, res.finch.sp_mn2sp)
index.list2 <- as.listofindex(list.ind2)
plot(index.list2, type = "bytraits")
data(finch.ind)
oldpar <- par(no.readonly = TRUE)
####
#The function ComIndex allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)", "CVNND(x)"  )
## Not run:
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
warnings()
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2", ind.plot = ind.plot.finch,
nperm = 9)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)")
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2", ind.plot = ind.plot.finch,
nperm = 9)
data(finch.ind)
oldpar <- par(no.readonly = TRUE)
####
#The function ComIndex allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)")
\dontrun{
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2sp", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2sp", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can represent Standardized Effect Size (ses)
#using the function plot(as.listofindex(list1, list2, list3))
list.ind2 <- list(res.finch.sp_mn2, res.finch.sp_mn2sp)
index.list2 <- as.listofindex(list.ind2)
plot(index.list2, type = "bytraits")
plot(index.list2)
}
####
#This allows to calculation index per site
#for example using "tapply(x, sites, mean)".
funct <- c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE) -
min(x, na.rm = TRUE) )")
##Null model 1 is trivial for this function
#because randomisation is within community only
\dontrun{
res.finch.ind_mn1 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c(1,1,1), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.ind_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can calculation metrics with or without intraspecific variance.
#Calculation of trait averages per population
#(name_sp_site is a name of a population)
#like in the function ComIndex
#and determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch, sep = "_")
traits.by.pop <- apply(traits.finch, 2 , function (x)
tapply(x, name_sp_sites, mean , na.rm = TRUE))
sites_bypop <- lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"),
split = "_"), function(x) x[3])
funct.withoutIV <- c("tapply(x, unlist(sites_bypop),
function(x) mean(x, na.rm = TRUE))", "tapply(x, unlist(sites_bypop),
function(x) kurtosis(x, na.rm = TRUE))", "tapply(x, unlist(sites_bypop),
function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )")
funct.withIV <- c("tapply(x, ind.plot.finch, function(x)
mean(x, na.rm = TRUE))", "tapply(x, ind.plot.finch, function(x)
kurtosis(x, na.rm = TRUE))", "tapply(x, ind.plot.finch, function(x)
max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )")
res.finch.withIV <- ComIndex(traits = traits.finch, index = funct.withIV,
sp = sp.finch, nullmodels = c("2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.withoutIV <- ComIndex(traits = traits.finch, index = funct.withoutIV,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
}
####
#We can also represent T-statistics and custom index thanks to
#the plot.listofindex function.
\dontrun{
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch, sp = sp.finch,
nperm = 9, print = FALSE)
list.ind <- list(res.finch.withIV, res.finch.withoutIV ,res.finch)
index.list1 <- as.listofindex(list.ind, namesindex =
c("mean", "kurtosis", "range", "mean.pop", "kurtosis.pop", "range.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow = c(2,3))
plot(index.list1, type = "bytraits", bysite = TRUE)
par(mfrow = c(2,2))
plot(index.list1,type = "bytraits")
par(mfrow = c(1,1))
plot(index.list1, type = "simple")
plot(index.list1, type = "simple_range")
plot(index.list1, type = "barplot")
plot(index.list1, type = "normal")
}
library(cati)
data(finch.ind)
oldpar <- par(no.readonly = TRUE)
####
#The function ComIndex allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct <- c("mean(x, na.rm = TRUE)", "kurtosis(x, na.rm = TRUE)",
"max(x, na.rm = TRUE) - min(x, na.rm = TRUE)")
## Not run:
res.finch.sp_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2sp", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.sp_mn2sp <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = "2sp", ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can represent Standardized Effect Size (ses)
#using the function plot(as.listofindex(list1, list2, list3))
list.ind2 <- list(res.finch.sp_mn2, res.finch.sp_mn2sp)
index.list2 <- as.listofindex(list.ind2)
plot(index.list2, type = "bytraits")
plot(index.list2)
## End(Not run)
####
#This allows to calculation index per site
#for example using "tapply(x, sites, mean)".
funct <- c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE) -
min(x, na.rm = TRUE) )")
##Null model 1 is trivial for this function
#because randomisation is within community only
## Not run:
res.finch.ind_mn1 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c(1,1,1), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.ind_mn2 <- ComIndex(traits = traits.finch, index = funct,
sp = sp.finch, nullmodels = c("2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
####
#We can calculation metrics with or without intraspecific variance.
#Calculation of trait averages per population
#(name_sp_site is a name of a population)
#like in the function ComIndex
#and determine the site for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch, sep = "_")
traits.by.pop <- apply(traits.finch, 2 , function (x)
tapply(x, name_sp_sites, mean , na.rm = TRUE))
sites_bypop <- lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"),
split = "_"), function(x) x[3])
funct.withoutIV <- c("tapply(x, unlist(sites_bypop),
function(x) mean(x, na.rm = TRUE))", "tapply(x, unlist(sites_bypop),
function(x) kurtosis(x, na.rm = TRUE))", "tapply(x, unlist(sites_bypop),
function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )")
funct.withIV <- c("tapply(x, ind.plot.finch, function(x)
mean(x, na.rm = TRUE))", "tapply(x, ind.plot.finch, function(x)
kurtosis(x, na.rm = TRUE))", "tapply(x, ind.plot.finch, function(x)
max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )")
res.finch.withIV <- ComIndex(traits = traits.finch, index = funct.withIV,
sp = sp.finch, nullmodels = c("2","2","2"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
res.finch.withoutIV <- ComIndex(traits = traits.finch, index = funct.withoutIV,
sp = sp.finch, nullmodels = c("2sp","2sp","2sp"), ind.plot = ind.plot.finch,
nperm = 9, print = FALSE)
## End(Not run)
####
#We can also represent T-statistics and custom index thanks to
#the plot.listofindex function.
## Not run:
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch, sp = sp.finch,
nperm = 9, print = FALSE)
list.ind <- list(res.finch.withIV, res.finch.withoutIV ,res.finch)
index.list1 <- as.listofindex(list.ind, namesindex =
c("mean", "kurtosis", "range", "mean.pop", "kurtosis.pop", "range.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow = c(2,3))
plot(index.list1, type = "bytraits", bysite = TRUE)
par(mfrow = c(2,2))
plot(index.list1,type = "bytraits")
par(mfrow = c(1,1))
plot(index.list1, type = "simple")
plot(index.list1, type = "simple_range")
plot(index.list1, type = "barplot")
plot(index.list1, type = "normal")
?points
library(cati)
plot(index.list1, type = "simple")
plot(index.list1, type = "simple_range")
plot(index.list1, type = "barplot")
plot(index.list1, type = "normal")
par(mfrow = c(2,2))
plot(index.list1,type = "bytraits")
par(mfrow = c(1,1))
plot(index.list1, type = "bytraits", bysite = TRUE)
warnings
warnings()
