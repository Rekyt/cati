namescommunity <- rownames(index.list[[1]])
ncom <- c()
ntr <- c()
for(i in seq(1, 2*nindex, by=2)){
ncom <- c(ncom,dim(as.matrix(index.list[[i]]))[1])
ntr <- c(ntr,dim(as.matrix(index.list[[i]]))[2])
}
if (is.null(ncom)) {ncom <- dim(as.matrix(index.list[[1]]))[1]}
if (is.null(ntr)) {ntr <- dim(as.matrix(index.list[[1]]))[2]}
if (is.null(ncom)) {ncom=1}
if (is.null(ntr)) {ntr=1}
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
rt <- as.randtest(sim=index.list[[i+1]][,t,], obs=index.list[[i]][t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)), ...)
}
}
if (!inherits(x, "listofindex")) {
if (inherits(x, "Tstats") | inherits(x, "ComIndex")  | inherits(x, "ComIndexMulti")) {
x <- as.listofindex(x)
}
else{stop("x must be a list of objects of class listofindex, Tstats, ComIndex or ComIndexMulti")}
}
index.list <- x
oldpar <- par(no.readonly = TRUE)
namesindex.all <- names(index.list)
nindex <- length(names(index.list))/2
namesindex <- names(index.list)[seq(1,nindex*2, by=2)]
namestraits <- colnames(index.list[[1]])
namescommunity <- rownames(index.list[[1]])
ncom <- c()
ntr <- c()
for(i in seq(1, 2*nindex, by=2)){
ncom <- c(ncom,dim(as.matrix(index.list[[i]]))[1])
ntr <- c(ntr,dim(as.matrix(index.list[[i]]))[2])
}
if (is.null(ncom)) {ncom <- dim(as.matrix(index.list[[1]]))[1]}
if (is.null(ntr)) {ntr <- dim(as.matrix(index.list[[1]]))[2]}
if (is.null(ncom)) {ncom=1}
if (is.null(ntr)) {ntr=1}
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
rt <- as.randtest(sim=index.list[[i+1]][,t,], obs=index.list[[i]][t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
i
t
x<-res.finch
if (!inherits(x, "listofindex")) {
if (inherits(x, "Tstats") | inherits(x, "ComIndex")  | inherits(x, "ComIndexMulti")) {
x <- as.listofindex(x)
}
else{stop("x must be a list of objects of class listofindex, Tstats, ComIndex or ComIndexMulti")}
}
index.list <- x
oldpar <- par(no.readonly = TRUE)
namesindex.all <- names(index.list)
nindex <- length(names(index.list))/2
namesindex <- names(index.list)[seq(1,nindex*2, by=2)]
namestraits <- colnames(index.list[[1]])
namescommunity <- rownames(index.list[[1]])
ncom <- c()
ntr <- c()
for(i in seq(1, 2*nindex, by=2)){
ncom <- c(ncom,dim(as.matrix(index.list[[i]]))[1])
ntr <- c(ntr,dim(as.matrix(index.list[[i]]))[2])
}
index.list[[1]]
index.list[[2]]
index.list[[2]]if (is.null(ncom)) {ncom <- dim(as.matrix(index.list[[1]]))[1]}
if (is.null(ntr)) {ntr <- dim(as.matrix(index.list[[1]]))[2]}
if (is.null(ncom)) {ncom=1}
if (is.null(ntr)) {ntr=1}
if (is.null(ncom)) {ncom <- dim(as.matrix(index.list[[1]]))[1]}
if (is.null(ntr)) {ntr <- dim(as.matrix(index.list[[1]]))[2]}
if (is.null(ncom)) {ncom=1}
if (is.null(ntr)) {ntr=1}
ncom
ntr
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
rt <- as.randtest(sim = index.list[[i+1]][t,,], obs = index.list[[i]][t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)), ...)
}
}
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
rt <- as.randtest(sim = index.list[[i+1]][t,,], obs = index.list[[i]][t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
i
t
index.list[[6]][t,,]
index.list[[6]][,t,]
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
rt <- as.randtest(sim = index.list[[i+1]][,t,], obs = index.list[[i]][t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
i
t
index.list[[i+1]]
index.list[[5]]
index.list[[5]][t]
index.list[[5]][t,]
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom){
rt <- as.randtest(sim = index.list[[i+1]][,t,s], obs = index.list[[i]][t,s], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)), ...)
}
}
}
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom){
rt <- as.randtest(sim = index.list[[i+1]][,t,s], obs = index.list[[i]][t,s], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
}
ncom
seq(1, nindex*2, by=2)
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom[1]){
rt <- as.randtest(sim = index.list[[i+1]][,t,s], obs = index.list[[i]][t,s], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
}
s
t
i
index.list[[i]]
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom[1]){
rt <- as.randtest(sim = index.list[[i+1]][,t,s], obs = index.list[[i]][s,t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
}
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom[1]){
rt <- as.randtest(sim = index.list[[i+1]][,t,s], obs = index.list[[i]][s,t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
}
index.list[[i+1]][,t,s]
s
t
i
index.list[[i+1]][,t,s]
?as.randtest
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom[1]){
rt <- as.randtest(sim = na.rm(index.list[[i+1]][,t,s]), obs = index.list[[i]][s,t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
}
for (i in seq(1, nindex*2, by=2)){
for (t in 1:ntr[1]){
for(s in 1: ncom[1]){
rt <- as.randtest(sim = na.omit(index.list[[i+1]][,t,s]), obs = index.list[[i]][s,t], alter = alternative)
plot(rt, main=paste(namesindex.all[i], namestraits[t], "p.value = ", round(rt$pvalue, digits = 5)))
}
}
}
library(cati)
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, nperm = 99, print = FALSE)
par(mfrow = c(3,4))
plotRandtest(res.finch)
plotRandtest(res.finch, alter = "two-sided")
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch, sp = sp.finch,
nperm = 9)
par(mfrow = c(2,2))
species.richness <- table(ind.plot.finch)
plotSESvar(as.listofindex(list(res.finch)), species.richness,
multipanel = FALSE)
#Same plot with resume = TRUE.
par(mfrow = c(2,2))
plotSESvar(as.listofindex(list(res.finch)), species.richness,
resume = TRUE, multipanel = FALSE)
par(mfrow = c(1,1))
data(finch.ind)
plotSpPop(traits.finch, ind.plot.finch, sp.finch, silent = TRUE)
#If we change the value of the threshold
#(alpha = 10\% instead of 5\%
#and the minimum individual to represent significativity
#fixed to 3 instead of 10 by default)
#we can see some significant relationships.
plotSpPop(traits.finch, ind.plot.finch, sp.finch, p.val = 0.1,
min.ind.signif = 3, silent = TRUE)
#For a more simple figure, add the option resume = TRUE.
#Again if we change the value of the threshold
#(alpha = 10\% instead of 5\%
#and the minimum individual to represent significativity
# fixed to 3 instead of 10 by default)
#we can see some significant relationships.
plotSpPop(traits.finch, ind.plot.finch, sp.finch, silent = TRUE,
resume = TRUE, col.pop = "grey")
plotSpPop(traits.finch, ind.plot.finch, sp.finch, silent = TRUE,
resume = TRUE, col.pop = "grey", col.sp = "black")
plotSpPop(traits.finch, ind.plot.finch, sp.finch, silent = TRUE,
resume = TRUE, col.pop = "grey", col.sp = "black",
p.val = 0.1,  min.ind.signif = 3)
ata(finch.ind)
#Random variable for this example
variable <- c(1,5,15,6,3,25)
plotSpVar(traits.finch, ind.plot.finch, sp.finch, variable,
silent = TRUE)
#If we change the value of the threshold
#(alpha = 10\% instead of 5\%
#and the minimum individual to represent significativity
#fixed to 3 instead of 10 by default)
#we can see some significant relationships.
plotSpVar(traits.finch, ind.plot.finch, sp.finch, variable,
p.val = 0.1,  min.ind.signif = 3, silent = TRUE)
#For a more simple figure, add the option resume = TRUE.
#Again if we change the value of the threshold
#(alpha = 10\% instead of 5\%
#and the minimum individual to represent significativity
# fixed to 3 instead of 10 by default)
#we can see some significant relationships.
plotSpVar(traits.finch, ind.plot.finch, sp.finch, variable,
silent = TRUE, resume = TRUE, col.pop = "grey")
plotSpVar(traits.finch, ind.plot.finch, sp.finch, variable,
silent = TRUE, resume = TRUE, col.pop = "grey", col.sp = "black")
plotSpVar(traits.finch, ind.plot.finch, sp.finch, variable,
silent = TRUE, resume = TRUE, col.pop = "grey", col.sp = "black",
p.val = 0.1,  min.ind.signif = 3)
comm <- t(table(ind.plot.finch,1:length(ind.plot.finch)))
comm.sp <- table(sp.finch, ind.plot.finch)
class(comm.sp) <- "matrix"
traits.finch.sp <- apply( apply(traits.finch, 2, scale ), 2,
function(x) tapply(x, sp.finch, mean, na.rm = TRUE))
mat.dist <- as.matrix(dist(traits.finch.sp))^2
res.rao <- RaoRel(sample = as.matrix(comm.sp), dfunc = mat.dist, dphyl = NULL,
weight = FALSE, Jost = FALSE, structure = NULL)
function(x) tapply(x, sp.finch, mean, na.rm=TRUE))
mat.dist <- as.matrix(dist(traits.finch.sp))^2
res.rao <- RaoRel(sample=as.matrix(comm.sp), dfunc=mat.dist, dphyl=NULL,
weight=FALSE, Jost=FALSE, structure=NULL)
witRao <- res.rao$FD$Mean_Alpha  #overall within species variance
betRao <- res.rao$FD$Beta_add    #between species variance
totRao <- res.rao$FD$Gamma       #the total variance
witRao+betRao
totRao
#Now let"s take the abundance to calculate Rao diversity.
res.rao.w <- RaoRel(sample = as.matrix(comm.sp), dfunc = mat.dist, dphyl = NULL,
weight = TRUE, Jost = FALSE, structure = NULL)
res.rao.w <- RaoRel(sample=as.matrix(comm.sp), dfunc=mat.dist, dphyl=NULL,
weight=TRUE, Jost=FALSE, structure=NULL)
witRao.w <- res.rao.w$FD$Mean_Alpha  #overall within species variance
betRao.w <- res.rao.w$FD$Beta_add    #between species variance
totRao.w <- res.rao.w$FD$Gamma       #the total variance
witRao.w
betRao.w
#Plot the results
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg  = c("abundance" ,"presence"),
legend.text = c("within species", "between species"),
ylab = "Rao", ylim = c(0,10))
#We can do this analysis for each trait separately.
#First we need to replace (or exclude) NA values.
#For this example, we use the package mice to complete the data.
comm <- t(table(ind.plot.finch,1:length(ind.plot.finch)))
library(mice)
traits = traits.finch
traits=traits.finch
mice <- mice(traits.finch)
traits.finch.mice <- complete(mice)
traits.finch.mice.sp <- apply(apply(traits.finch.mice, 2, scale ), 2,
function(x) tapply(x, sp.finch, mean, na.rm = TRUE))
function(x) tapply(x, sp.finch, mean, na.rm=TRUE))
trait.rao.w <- list()
witRao.w.bytrait <- c()
betRao.w.bytrait <- c()
for (t in 1 : 4){
trait.rao.w[[t]] <- RaoRel(sample = as.matrix(comm.sp),
dfunc = dist(traits.finch.mice.sp[,t]), dphyl = NULL, weight = TRUE,
Jost = FALSE, structure = NULL)
}
for(t in 1 : 4){
trait.rao.w[[t]] <- RaoRel(sample=as.matrix(comm.sp),
dfunc=dist(traits.finch.mice.sp[,t]), dphyl=NULL, weight=TRUE,
Jost=FALSE, structure=NULL)
witRao.w.bytrait <- c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)
betRao.w.bytrait <- c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)
}
#Plot the results by traits.
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)),
names.arg = colnames(traits.finch),
legend.text = c("within species", "between species"),
ylab = "Rao", ylim = c(0,1.5))
traits.finch.mice.sp <- apply(apply(traits.finch.mice, 2, scale ), 2,
function(x) tapply(x, sp.finch, mean, na.rm = TRUE))
trait.rao.w <- list()
witRao.w.bytrait <- c()
betRao.w.bytrait <- c()
for (t in 1 : 4){
trait.rao.w[[t]] <- RaoRel(sample = as.matrix(comm.sp),
dfunc = dist(traits.finch.mice.sp[,t]), dphyl = NULL, weight = TRUE,
Jost = FALSE, structure = NULL)
}
for(t in 1 : 4){
trait.rao.w[[t]] <- RaoRel(sample=as.matrix(comm.sp),
dfunc=dist(traits.finch.mice.sp[,t]), dphyl=NULL, weight=TRUE,
Jost=FALSE, structure=NULL)
witRao.w.bytrait <- c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)
betRao.w.bytrait <- c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)
}
#Plot the results by traits.
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)),
names.arg = colnames(traits.finch),
legend.text = c("within species", "between species"),
ylab = "Rao", ylim = c(0,1.5))
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch, sp = sp.finch,
nperm = 9, print = FALSE)
#calculation of means by population (name_sp_site is a name of a population)
#like in the function ComIndex and determine the site
#for each population (sites_bypop)
name_sp_sites = paste(sp.finch, ind.plot.finch,sep = "_")
traits.by.pop <- apply(traits.finch, 2 , function (x)
tapply(x, name_sp_sites, mean , na.rm = TRUE))
require(e1071)
sites_bypop <- lapply(strsplit(paste(rownames(traits.by.pop), sep = "_")
, split = "_"), function(x) x[3])
funct.withoutIV <- c("tapply(x, unlist(sites_bypop), function(x) mean(x, na.rm=TRUE))",
"tapply(x, unlist(sites_bypop), function(x) kurtosis(x, na.rm=TRUE))",
"tapply(x, unlist(sites_bypop), function(x)	max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.withIV <- c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE) )",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.withIV <- ComIndex(traits = traits.finch, index = funct.withIV,
sp = sp.finch, nullmodels = rep("2", times=4), ind.plot = ind.plot.finch, nperm = 9
, print = FALSE)
res.finch.withoutIV <- ComIndex(traits = traits.finch,
index = funct.withoutIV, sp = sp.finch, nullmodels = rep("2sp", times=4),
ind.plot = ind.plot.finch, nperm = 9, print = FALSE)
res.finch.withIV <- ComIndex(traits=traits.finch, index=funct.withIV,
sp=sp.finch, nullmodels = rep("2", times=4), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.withoutIV <- ComIndex(traits=traits.finch,
index=funct.withoutIV, sp=sp.finch, nullmodels = c("2sp","2sp","2sp","2sp"),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
##Plot T-statistics and custom metrics thanks to
#the plot.listofindex function.
list.ind <- list(res.finch.withIV, res.finch.withoutIV, res.finch)
index.list <- as.listofindex(list.ind,
namesindex=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list)
plot(index.list, plot.ask = FALSE)
plot(index.list, plot.ask = FALSE, bysite = FALSE)
ses.list <- ses.listofindex(index.list)
ses.list
attributes(ses.list)
#### An other way to see "ses values"
# Custom theme (from rasterVis package)
require(rasterVis)
my.theme <- BuRdTheme()
# Customize the colorkey
my.ckey <- list(col = my.theme$regions$col)
levelplot(t(rbind(ses.list[[1]]$ses, ses.list[[2]]$ses,
ses.list[[3]]$ses,  ses.list[[4]]$ses)), colorkey = my.ckey,
par.settings = my.theme,border = "black")
levelplot(t(rbind(ses.list[[1]]$ses>ses.list[[1]]$ses.sup,
ses.list[[2]]$ses>ses.list[[2]]$ses.sup,
ses.list[[3]]$ses>ses.list[[3]]$ses.sup,
ses.list[[4]]$ses>ses.list[[4]]$ses.sup)),
colorkey = my.ckey, par.settings = my.theme,border = "black")
#For all metrics of the list of index
ses.list.levelplot <- c()
for(i in 1: length(ses.list)){
ses.list.levelplot <- rbind(ses.list.levelplot, ses.list[[i]]$ses)
}
levelplot(t(ses.list.levelplot), colorkey = my.ckey,
par.settings = my.theme,border = "black")
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, nperm = 9)
res.finch <- Tstats(traits.finch, ind.plot=ind.plot.finch,
sp=sp.finch, nperm=9)
ses(res.finch$T_IP.IC, res.finch$T_IP.IC_nm)
ses(t(res.finch$T_IP.IC), res.finch$T_IP.IC_nm)
data(finch.ind)
res.finch <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, nperm = 9, print = FALSE)
attributes(res.finch)
#Tstats class is associated to S3 methods plot, barplot and summary
plot(res.finch)
plot(res.finch, type = "color_cond")
plot(res.finch, type = "simple")
plot(res.finch, type = "simple_sd")
plot(res.finch, type = "barplot")
attributes(summary_Tstats(res.finch))
head(summary_Tstats(res.finch)$p.value, 10)
summary_Tstats(res.finch, type = "binary")
summary_Tstats(res.finch, type = "percent")
summary_Tstats(res.finch, type = "site")
summary_Tstats(res.finch, type = "p.value")
summary_Tstats(res.finch, type = "all")
barplot(res.finch)
attributes(summary_Tstats(res.finch))
head(summary_Tstats(res.finch)$p.value, 10)
#### An other way to see "ses values" of T-statistics
# Custom theme (from rasterVis package)
require(rasterVis)
my.theme <- BuRdTheme()
# Customize the colorkey
my.ckey <- list(col = my.theme$regions$col)
levelplot(t(ses(res.finch$T_IP.IC,res.finch$T_IP.IC_nm)$ses),
colorkey = my.ckey, par.settings = my.theme,border = "black")
#### Use a different regional pool than the binding of studied communities
#create a random regional pool for the example
reg.p <- rbind(traits.finch, traits.finch[sample(1:2000,300), ])
res.finch2 <- Tstats(traits.finch, ind.plot = ind.plot.finch,
sp = sp.finch, nperm = 9, print = FALSE)
reg.p <- rbind(traits.finch, traits.finch[sample(1:2000,300),])
res.finch2 <- Tstats(traits.finch, ind.plot=ind.plot.finch,
sp=sp.finch, nperm=9, print=FALSE)
paste(c,2,3)
paste("c",2,3)
paste("as.numeric (try(hypervolume(na.omit(x), warnings = FALSE,",
"bandwidth=0.2, verbose=FALSE)@Volume))")
Sys.getenv("R_USER")
repos = c(CRAN='http://cran.r-project.org'))"
repos = c(CRAN='http://cran.r-project.org')"
option(repos = c(CRAN='http://cran.r-project.org'))"
)
option(repos = c(CRAN='http://cran.r-project.org'))
options(repos = c(CRAN='http://cran.r-project.org'))
options(repos = c(CRAN='http://cran.r-project.org'))
library(cati)
R_WIN_NO_JUNCTIONS
options(repos = c(CRAN='http://cran.r-project.org'))
options(repos = CRAN='http://cran.r-project.org')
?*$options
?options
getOption(repos)
getOption("repos")
library(cati)
getOption("repos")
library(cati)
environment(R_WIN_NO_JUNCTIONS=NULL)
environment(R_WIN_NO_JUNCTIONS=1)
environment()
.GlobalEnv
globalenv()
.BaseNamespaceEnv
.GlobalEnv
ls
ls()
emptyenv()
baseenv()
options("width"=160)                # wide display with multiple monitors
options("digits.secs"=3)            # show sub-second time stamps
r <- getOption("repos")             # hard code the US repo for CRAN
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
## put something this is your .Rprofile to customize the defaults
setHook(packageEvent("grDevices", "onLoad"),
function(...) grDevices::X11.options(width=8, height=8,
xpos=0, pointsize=10,
#type="nbcairo"))  # Cairo device
#type="cairo"))    # other Cairo dev
type="xlib"))      # old default
## from the AER book by Zeileis and Kleiber
options(prompt="R> ", digits=4, show.signif.stars=FALSE)
options("pdfviewer"="okular")
dsq
options("width"=160)                # wide display with multiple monitors
options("digits.secs"=3)            # show sub-second time stamps
r <- getOption("repos")             # hard code the US repo for CRAN
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = r)
rm(r)
## put something this is your .Rprofile to customize the defaults
setHook(packageEvent("grDevices", "onLoad"),
function(...) grDevices::X11.options(width=8, height=8,
xpos=0, pointsize=10,
#type="nbcairo"))  # Cairo device
#type="cairo"))    # other Cairo dev
type="xlib"))      # old default
getOption("repos")
.Rprofile
options(repos="http://cran.fhcrc.org/ ")
r["CRAN"] <- "http://cran.us.r-project.org"
options(repos = c(CRAN='http://cran.r-project.org'))
get.options(repos)
getoptions(repos)
getOptions(repos)
getOption(repos)
??getotpion
getOption("repos")
