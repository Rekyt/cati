sp=sp.sp
com=w2
#If data are from species or population traits, this function transform this data in a suitable format for cati
if(!ind.value){
if(is.null(com)) {stop("if ind.value=FALSE, you need to replace arguments ind_plot by a community matrix 'com' ")}
rownames(traits)<-sp
res.interm<-ab_to_ind(traits, com, type=type)
traits<-res.interm$traits
sp<-res.interm$sp
ind.plot<-res.interm$ind.plot
}
if(!is.null(ind.plot) & !is.null(com)){
warnings("If ind.plot and com are provide and ind.value=F, the function use only the argument com")
}
traits<-traits[order(ind.plot),]
traits
order(ind.plot)
traits<-Ttraits_by_pop
nullmodels=2
ind.value=FALSE
index=funct
sp=sp.sp
com=w2
#If data are from species or population traits, this function transform this data in a suitable format for cati
if(!ind.value){
if(is.null(com)) {stop("if ind.value=FALSE, you need to replace arguments ind_plot by a community matrix 'com' ")}
rownames(traits)<-sp
res.interm<-ab_to_ind(traits, com, type=type)
traits<-as.data.frame(res.interm$traits)
sp<-res.interm$sp
ind.plot<-res.interm$ind.plot
}
if(!is.null(ind.plot) & !is.null(com)){
warnings("If ind.plot and com are provide and ind.value=F, the function use only the argument com")
}
nindex<-length(index)
if(length(nullmodels)==1){
nullmodels<-rep(nullmodels,times=nindex)
}
if(is.null(namesindex)) {  namesindex<-index }
ntr<-dim(traits)[2]
namestraits<-colnames(traits)
traits<-traits[order(ind.plot),]
ind.plot<-ind.plot[order(ind.plot)]
sp<-sp[order(ind.plot)]
classs(traits)
class(traits)
#If data are from species or population traits, this function transform this data in a suitable format for cati
if(!ind.value){
if(is.null(com)) {stop("if ind.value=FALSE, you need to replace arguments ind_plot by a community matrix 'com' ")}
rownames(traits)<-sp
res.interm<-ab_to_ind(traits, com, type=type)
traits<-as.data.frame(res.interm$traits)
sp<-res.interm$sp
ind.plot<-res.interm$ind.plot
}
if(!is.null(ind.plot) & !is.null(com)){
warnings("If ind.plot and com are provide and ind.value=F, the function use only the argument com")
}
nindex<-length(index)
if(length(nullmodels)==1){
nullmodels<-rep(nullmodels,times=nindex)
}
if(is.null(namesindex)) {  namesindex<-index }
ntr<-dim(traits)[2]
namestraits<-colnames(traits)
traits<-Ttraits_by_pop
nullmodels=2
ind.value=FALSE
index=funct
sp=sp.sp
com=w2
#If data are from species or population traits, this function transform this data in a suitable format for cati
if(!ind.value){
if(is.null(com)) {stop("if ind.value=FALSE, you need to replace arguments ind_plot by a community matrix 'com' ")}
rownames(traits)<-sp
res.interm<-ab_to_ind(traits, com, type=type)
traits<-as.data.frame(res.interm$traits)
sp<-res.interm$sp
ind.plot<-res.interm$ind.plot
}
if(!is.null(ind.plot) & !is.null(com)){
warnings("If ind.plot and com are provide and ind.value=F, the function use only the argument com")
}
nindex<-length(index)
if(length(nullmodels)==1){
nullmodels<-rep(nullmodels,times=nindex)
}
if(is.null(namesindex)) {  namesindex<-index }
ntr<-dim(traits)[2]
namestraits<-colnames(traits)
class(res.interm$traits)
class(traits)
dim(traits)
res<-ab_to_ind(Ttraits_by_pop, w2)
library(cati)
res$traits
dim(res$traits)
traits<-Ttraits_by_pop
com=w2
if(nrow(traits) != nrow(com)){
stop("number of rows of traits and com need to be equal")
}
#type is either count data or abundance
#transform abundance data to number of individual
if(type=="abundance"){
if(min(com)<1){
com<-apply(com,2, function(x) x/min(x[x>0], na.rm=T))
}
}
ntr<-ncol(traits)
#number of individual to individual traits data
x2<-c()
x4<-c()
x6<-c()
for(i in 1 : nrow(com)){
x1<-matrix(rep(traits[i,], rowSums(com)[i]), nrow=ntr, ncol=rowSums(com)[i])
x2<-cbind(x2,x1)
x3<-rep(rownames(com)[i], rowSums(com)[i])
x4<-c(x4,x3)
for(co in 1:ncol(com)){
x5<-rep(colnames(com)[co], com[i,co])
x6<-c(x5,x6)
}
}
res<-list()
res$traits<-t(x2)
res$sp<-as.factor(x4)
res$ind.plot<-as.factor(x6)
res$traits
class(res$traits)
library(cati)
allfunctions_cati <- read.csv("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunctions_cati.r")
View(allfunctions_cati)
source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunctions_cati.r")
res<-ab_to_ind(Ttraits_by_pop, w2)
source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunctions_cati.r")
res<-ab_to_ind(Ttraits_by_pop, w2)
res$traits
dim(res$traits)
clas(res$traits)
class(res$traits)
com.index(Ttraits_by_pop, nullmodels=2, ind.value=FALSE, index=funct, sp=sp.sp, com=w2)
require(e1071)
com.index(Ttraits_by_pop, nullmodels=2, ind.value=FALSE, index=funct, sp=sp.sp, com=w2)
source('C:/Users/taudiere/Desktop/qsd.R')
com.index(Ttraits_by_sp, nullmodels=2, ind.value=FALSE, index=funct, sp=sp.sp, com=w1)
Ttraits_by_sp
rownames(Ttraits_by_sp)
Ttraits_by_sp<-apply(traits.finch,2,function(x) tapply(x,sp.finch,function(x) mean(x, na.rm=T)))
names_sp_ind_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="@"))
Ttraits_by_pop<-apply(traits.finch,2,function(x) tapply(x,names_sp_ind_plot, function(x) mean(x, na.rm=T) ))
com.index(Ttraits_by_sp, nullmodels=2, ind.value=FALSE, index=funct, sp=rownames(Ttraits_by_sp), com=w1)
com.index(Ttraits_by_sp, nullmodels=2, ind.value=FALSE, index=funct, sp=rownames(Ttraits_by_sp), com=w1, nperm=9)
plot(1:100, col=num2col(1:100, col.pal=bluepal), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=wasp), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=spectral), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=flame), pch=20, cex=4)
## factor as colors using fac2col
dat <- cbind(c(rnorm(50,8), rnorm(100), rnorm(150,3),
rnorm(50,10)),c(rnorm(50,1),rnorm(100),rnorm(150,3), rnorm(50,5)))
fac <- rep(letters[1:4], c(50,100,150,50))
plot(dat, col=fac2col(fac), pch=19, cex=4)
plot(dat, col=transp(fac2col(fac)), pch=19, cex=4)
plot(dat, col=transp(fac2col(fac,seed=2)), pch=19, cex=4)
## use of any2col
x <- factor(1:10)
col.info <- any2col(x, col.pal=funky)
plot(x, col=col.info$col, main="Use of any2col on a factor")
legend("bottomleft", fill=col.info$leg.col, legend=col.info$leg.txt, bg="white")
x <- 100:1
col.info <- any2col(x, col.pal=wasp)
barplot(x, col=col.info$col, main="Use of any2col on a numeric")
legend("bottomleft", fill=col.info$leg.col, legend=col.info$leg.txt, bg="white")
## transparent colors using "transp"
plot(rnorm(1000), rnorm(1000), col=transp("blue",.3), pch=20, cex=4)
## numeric values to color using num2col
plot(1:100, col=num2col(1:100), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=bluepal), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=flame), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=wasp), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=azur,rev=TRUE), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=spectral), pch=20, cex=4)
## numeric values to color using num2col
plot(1:100, col=num2col(1:100), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=bluepal), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=flame), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=wasp), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=azur,rev=TRUE), pch=20, cex=4)
plot(1:100, col=num2col(1:100, col.pal=spectral), pch=20, cex=4)
?parse
cat("x <- c(1, 4)\n  x ^ 3 -10 ; outer(1:7, 5:9)\n", file = "xyz.Rdmped")
# parse 3 statements from the file "xyz.Rdmped"
parse(file = "xyz.Rdmped", n = 3)
unlink("xyz.Rdmped")
txt <- "
x <- 1
an error
""
txt <- "
x <- 1
an error
"
sf <- srcfile("txt")
try(parse(text = txt, srcfile = sf))
getParseData(sf)
parse(file = "xyz.Rdmped", n = 3)
cat("x <- c(1, 4)\n  x ^ 3 -10 ; outer(1:7, 5:9)\n", file = "xyz.Rdmped")
# parse 3 statements from the file "xyz.Rdmped"
parse(file = "xyz.Rdmped", n = 3)
cat("x <- c(1, 4)\n  x ^ 3 -10 ; outer(1:7, 5:9)\n", file = "xyz.Rdmped")
# parse 3 statements from the file "xyz.Rdmped"
eval(parse(file = "xyz.Rdmped", n = 3))
partvar<-function(traits, factors, printprogress=TRUE){
traits<-as.matrix(traits)
factors<-as.matrix(factors)
nfactors <- ncol(factors)
ntraits  <- ncol(traits)
res<-matrix(0, nrow=nfactors+1, ncol=ntraits)
colnames(res)<-colnames(traits)
if(!is.null(colnames(factors)))
{rownames(res)<-c(colnames(factors), "within")
}
else {
rownames(res)<-c(paste("factor",1:(nfactors),sep=""),  "within") ; colnames(factors)<-c(paste("factor", 1:(nfactors),sep=""))
}
factors<-as.data.frame(factors)
for (t in 1 : ntraits) {
trait<-traits[,t]
functionlme= paste('varcomp(lme(trait~1, random=~1|', paste(colnames(factors), collapse='/'), ",na.action=na.omit),1)", sep="")
res[,t]<-as.vector(eval(parse(text=functionlme), envir=factors))
if(printprogress==TRUE)
{print(paste(round(t/ntraits*100, 2), "%", sep=" ")) }
else{}
}
class(res)<-"partvar"
print(res)
}
?partvar
require(cati)
?partvar
data(finch.ind)
genus<-as.vector(unlist(strsplit(as.vector(sp.finch),"_"))
[seq(1,length(sp.finch)*2, by=2)])
res.partvar.finch<-partvar(traits=traits.finch,
factors=cbind(sites=as.factor(as.vector(ind.plot.finch)),
species=as.factor(as.vector(sp.finch)), genus=as.factor(genus)))
partvar<-function(traits, factors, printprogress=TRUE){
traits<-as.matrix(traits)
factors<-as.matrix(factors)
nfactors <- ncol(factors)
ntraits  <- ncol(traits)
res<-matrix(0, nrow=nfactors+1, ncol=ntraits)
colnames(res)<-colnames(traits)
if(!is.null(colnames(factors)))
{rownames(res)<-c(colnames(factors), "within")
}
else {
rownames(res)<-c(paste("factor",1:(nfactors),sep=""),  "within") ; colnames(factors)<-c(paste("factor", 1:(nfactors),sep=""))
}
factors<-as.data.frame(factors)
for (t in 1 : ntraits) {
trait<-traits[,t]
functionlme= paste('varcomp(lme(trait~1, random=~1|', paste(colnames(factors), collapse='/'), ",na.action=na.omit),1)", sep="")
res[,t]<-as.vector(eval(parse(text=functionlme)))
if(printprogress==TRUE)
{print(paste(round(t/ntraits*100, 2), "%", sep=" ")) }
else{}
}
class(res)<-"partvar"
print(res)
}
data(finch.ind)
genus<-as.vector(unlist(strsplit(as.vector(sp.finch),"_"))
[seq(1,length(sp.finch)*2, by=2)])
res.partvar.finch<-partvar(traits=traits.finch,
factors=cbind(sites=as.factor(as.vector(ind.plot.finch)),
species=as.factor(as.vector(sp.finch)), genus=as.factor(genus)))
x<-c(1,2,5,3,9,54,4,5,454,12,12,546,5,489,4)
CVNND(x)
times(CVNND(x))
??time
timing(CVNND(x))
proc.time(CVNND(x))
CVNND(x)
proc.time()
CVNND(x)
proc.time()
CVNND(x)
proc.time()
CVNND(c(x,x,x,x,x)
)
proc.time()
#SDND
sdnd <- function (com.dist,trait){
com.mat <- as.matrix(com.dist)
trait <- trait[colnames(com.mat)]
trait <- sort(trait)
return(sd2(diff(trait)))
}
sdnd*(dist(x), x)
sdnd(dist(x), x)
Function for sample variance
var2 <- function(x){
x <- na.omit(x)
res <- (length(x)-1)/length(x)*var(x)
return(res)
}
#Function for sample standard deviation
sd2 <- function(x){
res <- sqrt(var2(x))
return(res)
}
sdnd(dist(x), x)
dist(x)
sdnd(dist(x), x)
MNND<-function(trait, div_range=FALSE){
r=sort(trait)
if(length(r)<1){
nnd=NA}
else{nnd=vector(length=length(r)-1)
for(j in 2:length(r)){
nnd[j-1]=r[j]-r[j-1]
}
}
MNND<-mean(nnd, na.rm=T)
if (div_range==T) {MNND<-MNND/range(trait)}
else {}
return(MNND)
}
MNND(c(x,x,x,x,x)
)
proc.time()
mnnd <- function (com.dist){
com.mat <- as.matrix(com.dist)
fun3 <- function(x) as.numeric(sub("^0$",NA,x))
com.mat <- apply(com.mat,1,fun3)
return(mean(apply(com.mat,1,min,na.rm=T)))
}
mnnd(c(x,x,x,x,x))
mnnd(dist(c(x,x,x,x,x)))
proc.time()
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.8.zip", repos=NULL)
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
# T IC/IR
T_ic.ir<-function(traits, ind_plot, sp){
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IC<-tapply(traits, Tind_plot, var, na.rm=T)
var_IR<-var(traits, na.rm=T)
T_IC.IR<-var_IC/rep(var_IR,length(var_IC))
return(T_IC.IR)
}
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
T_ip.ic<-function(traits, ind_plot, sp){
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-tapply(traits, names_sp_ind_plot, var, na.rm=T)
var_IC<-tapply(traits, Tind_plot, var, na.rm=T)
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot))[s],Tplotsp)], na.rm=T)/var_IC
return(T_IP.IC)
}
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
data.finch
data(finch.ind)
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
dim(traits.finch)
T_ip.ic(t(traits.finch), ind.plot.finch, sp.finch)
length(ind.plot.finch)
length( sp.finch)
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
names_sp_ind_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="@"))
names_sp_ind_plot
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-tapply(traits, names_sp_ind_plot, var, na.rm=T)
var_IC<-tapply(traits, Tind_plot, var, na.rm=T)
traits
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-tapply(traits.finch, names_sp_ind_plot, var, na.rm=T)
var_IC<-tapply(traits.finch, Tind_plot, var, na.rm=T)
var_IP<-tapply(traits.finch, names_sp_ind_plot, var, na.rm=T)
traits.finch
var_IP<-apply(traits.finch, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T)
)
var_IP
T_ip.ic<-function(traits, ind_plot, sp){
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-apply(traits, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot))[s],Tplotsp)], na.rm=T)/var_IC
return(T_IP.IC)
}
T_ip.ic(t(traits.finch), ind.plot.finch, sp.finch)
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
names_sp_ind_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-apply(traits.finch, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits.finch, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IP
var_IC
var_IC<-apply(traits, 1, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IC<-apply(traits.finch, 1, function(x) tapply(x, Tind_plot, var, na.rm=T))
Tind_plot
ind_plot=ind.plot.finch
sp<-sp.finch
traits<-traits.finch
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
Tplotsp
Tind_plot
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IR<-var(traits, na.rm=T)
T_IC.IR<-var_IC/rep(var_IR,length(var_IC))
return(T_IC.IR)
Tind_plot
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
Tind_plo
Tind_plot
unlist(strsplit(levels(names_sp_ind_plot),split="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[2*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
Tind_plot
Tplotsp
unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))
unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[2*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IR<-var(traits, na.rm=T)
T_IC.IR<-var_IC/rep(var_IR,length(var_IC))
Tind_plot
var_IC
var_IP
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-apply(traits, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)/var_IC
var_IC
var_IC
mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)
rowMeans(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)
var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)]
levels(as.factor(Tind_plot)3
levels(as.factor(Tind_plot)
=
levels(as.factor(Tind_plot))
Tind_plot
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[2*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
var_IP<-apply(traits, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)/var_IC
mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)
var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)]
grepl(levels(as.factor(Tind_plot)),Tplotsp)
levels(as.factor(Tind_plot))
,Tplotsp
var_IP
var_IC
library(cati)
remove.packages("cati", lib="~/R/win-library/3.0")
install.packages("cati")
install.packages("cati")
install.packages("cati")
install.packages("cati")
install.packages("C:/Users/taudiere/Downloads/cati_0.8.tar.gz", repos = NULL, type = "source")
install.packages(c("adegenet", "ape", "caTools", "devtools", "evaluate", "fields", "ggplot2", "Hmisc", "httpuv", "igraph", "knitr", "lattice", "LearnBayes", "lme4", "maps", "markdown", "Matrix", "memoise", "mice", "pROC", "Rcpp", "RcppEigen", "reshape2", "RJSONIO", "roxygen2", "scales", "shiny", "sp", "spdep", "stargazer"))
?round
round(x2, 3)
x2 <- pi * 100^(-1:3)
round(x2, 3)
x2 <- pi * 100^(-1:3)
round(x2, 0)
