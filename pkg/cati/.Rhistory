se<-1/(1+exp(-predict.glm(lm1,  se.fit = T, dispersion=0.1)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T, dispersion=0.01)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
se<-1/(1+exp(-predict.glm(lm1,  se.fit = T, dispersion=1)$se.fit))
lines(1/(1+exp(-predict.glm(lm1))) - se)
plot(m[,4] ~ m[,3])
lines(1/(1+exp(-predict.glm(lm1) ) ))
exp(-predict.glm(lm1)
?residuals.lrm
?lrm
??lrm
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*30, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*30, col="red")
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
plot(m[,4] ~ m[,3])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
se
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))])
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
plot(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
plot(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y, col="red")
plot(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y, col="red")
?density
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*20, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*20, col="red")
m[,3]
table(m[,4])
plot(density(m[,3][m[,4]==0])$x, density(m[,3][m[,4]==0])$y*123, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33, col="red")
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33, col="red")
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123/5, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33/5, col="red")
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123/5, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33/5, col="red")
summary(lm1)
chisq.test(x, simulate.p.value=T, B=9999)
summary(lm1)
new.matrix.2012 <- read.table("C:/Users/taudiere/Dropbox/Analyses en cours/Analyse Mas glm distance spatiale_OTU/new-matrix-2012.csv", sep=";", dec=",", quote="\"")
View(new.matrix.2012)
m2012 <- read.table("C:/Users/taudiere/Dropbox/Analyses en cours/Analyse Mas glm distance spatiale_OTU/new-matrix-2012.csv", sep=";", dec=",", quote="\"")
m2013 <- read.table("C:/Users/taudiere/Dropbox/Analyses en cours/Analyse Mas glm distance spatiale_OTU/new-matrix.csv", sep=";", dec=",", quote="\"")
m<-cbind(m2012,m2013)
m<-rbind(m2012,m2013)
lm1<-glm(m[,4] ~ m[,3], family=binomial)
anova(lm1)
summary(lm1)
plot(m[,4] ~ m[,3])
lines(sort(predict(lm1, type="response"))~ m[,3][order(predict(lm1, type="response"))])
se<-sort(predict(lm1, type="response", se.fit=T)$se.fit)
lines(sort(predict(lm1, type="response"))-se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(sort(predict(lm1, type="response"))+se~ m[,3][order(predict(lm1, type="response"))], lty=2)
lines(density(m[,3][m[,4]==0])$x, 1-density(m[,3][m[,4]==0])$y*123/5, col="grey")
lines(density(m[,3][m[,4]==1])$x, density(m[,3][m[,4]==1])$y*33/5, col="red")
194*195
194*195/2
<<<<<<< HEAD
library(cati)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.7.zip", repos=NULL)
#install.packages("cati", repos="http://R-Forge.R-project.org")
@
<<results='hide', message=FALSE, warning=FALSE>>=
library(cati, warn.conflicts = FALSE)
data(finch.ind)
#Save default parameters
oldpar<-par(no.readonly = TRUE)
@
\newpage
%%%%%%%%%%%%%%%%
\section{Description of distribution}
%%%%%%%%%%%%%%%%
\subsection{Plot the density of traits}
Plot the distribution of traits values for populations, species, sites and regional scales. First, let try the distribution for all populations of Darwin finches.
<<dev='pdf'>>=
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch,
ind.plot.finch, ylim.cex=3, plot.ask=F,
multipanel=F, leg=F)
@
\newpage
Then we can inverse the second and the third arguments to plot the distribution for all finches species.
<<dev='pdf'>>=
par(mfrow=c(5,5), cex=0.5)
plot_dens(traits.finch, ind.plot.finch,
sp.finch, ylim.cex=8, plot.ask=F, multipanel=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("region", times=dim(traits.finch)[1]),
sp.finch, ylim.cex=6, plot.ask=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("toutes_sp", times=dim(traits.finch)[1]),
ind.plot.finch, ylim.cex=3, plot.ask=F)
@
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.7.zip", repos=NULL)
#install.packages("cati", repos="http://R-Forge.R-project.org")
@
<<results='hide', message=FALSE, warning=FALSE>>=
library(cati, warn.conflicts = FALSE)
data(finch.ind)
#Save default parameters
oldpar<-par(no.readonly = TRUE)
@
\newpage
%%%%%%%%%%%%%%%%
\section{Description of distribution}
%%%%%%%%%%%%%%%%
\subsection{Plot the density of traits}
Plot the distribution of traits values for populations, species, sites and regional scales. First, let try the distribution for all populations of Darwin finches.
<<dev='pdf'>>=
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch,
ind.plot.finch, ylim.cex=3, plot.ask=F,
multipanel=F, leg=F)
@
\newpage
Then we can inverse the second and the third arguments to plot the distribution for all finches species.
<<dev='pdf'>>=
par(mfrow=c(5,5), cex=0.5)
plot_dens(traits.finch, ind.plot.finch,
sp.finch, ylim.cex=8, plot.ask=F, multipanel=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("region", times=dim(traits.finch)[1]),
sp.finch, ylim.cex=6, plot.ask=F, leg=F)
@
<<dev='pdf'>>=
plot_dens(traits.finch, rep("toutes_sp", times=dim(traits.finch)[1]),
ind.plot.finch, ylim.cex=3, plot.ask=F)
@
ind.plot.finch
CVNND
?convhulln
??convhulln
install.packages("geometry")
install.packages("geometry")
require("geometry")
?convhulln
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,"FA")$vol,6))")
as.text
?as.text
??as.text
??text
?""
?"
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
?eval
?expression
parse(FA)
parse("FA")
eval("FA")
eval(FA)
parse(FA)
deparse(FA)
deparse("FA")
FA
deparse("FA")
as.character(FA)
as.character("FA")
FA,as.character("FA")
FA<-as.character("FA")
FA
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
require(mice)
traits=traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
install.packages("geometry")
require("geometry")
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
##Null model 1 is trivial for this function
##because randomisation is within community only
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
install.packages("geometry")
install.packages("geometry")
require("geometry")
FA<-as.character("FA")
funct<-c("tapply(x, ind.plot.finch, function(x) round(convhulln(x,FA)$vol,6))")
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
n_sp_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="_"))
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
funct<-c("round(convhulln(x,FA)$vol,6)")
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
Fdis.finch
plot(Fdis.finch)
plot(as.listofindex(Fdis.finch))
class(Fdis.finch)
list.ind.multi2<-as.listofindex(list(hv.2, hv.3, hv.4, Fdis.finch))
hv.2<-com.index.multi(traits.finch.mice,
index=c("as.numeric(try(hypervolume(na.omit(x), reps=100,
bandwidth=0.2, verbose=F, warnings=F)@Volume))"),
by.factor=n_sp_plot, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
list.ind.multi2<-as.listofindex(list(hv.2, Fdis.finch))
ses.list.multi2<-ses.listofindex(list.ind.multi2)
list.ind.multi2
plot(list.ind.multi2)
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=n_sp_plot, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
hv.1<-com.index.multi(traits.finch.mice,
index=c("as.numeric(try(hypervolume(na.omit(x), reps=100,
bandwidth=0.2, verbose=F, warnings=F)@Volume))"),
by.factor=rep(1,length(n_sp_plot)), nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
list.ind.multi2<-as.listofindex(list(hv.1, Fdis.finch))
ses.list.multi2<-ses.listofindex(list.ind.multi2)
plot(list.ind.multi2)
list.ind.multi2
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=n_sp_plot, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
Fdis.finch<-com.index.multi(traits.finch.mice,
index=funct,
by.factor=ind.plot.finch, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
hv.3<-com.index.multi(traits.finch.mice,
index=c("as.numeric(try(hypervolume(na.omit(x), reps=100,
bandwidth=0.2, verbose=F, warnings=F)@Volume))"),
by.factor=ind.plot.finch, nullmodels=c(2,2),
ind.plot=ind.plot.finch, nperm=9, sp=sp.finch)
list.ind.multi2<-as.listofindex(list(hv.3, Fdis.finch))
ses.list.multi2<-ses.listofindex(list.ind.multi2)
plot(list.ind.multi2)
plot(list.ind.multi2)
plot(list.ind.multi2)
ses.list.multi2
ses.list.multi2
list.ind.multi2
ses.list.multi2
list.ind.multi2
=======
>>>>>>> 912c11c54430fbe19c3c2c4d3e663c7adb1a53ff
mpd
require(picante)
mpd
?dis
??dis
require(spacodiR)
install.packages("spacodiR")
require(spacodiR)
install.packages("spacodiR")
library("spacodiR", lib.loc="C:/Users/taudiere/Documents/R/win-library/3.0")
data(sp.example)
attach(sp.example)
phy.dotplot(sp.plot=spl[,1:9], phy=phy, tips.adj=c(0.50,0.55), lab.adj=c(0,1))
# load a species-by-plots matrix, along with a tree
data(sp.example)
attributes(sp.example)
attach(sp.example)
spl
phy
# generate a plot of observed and expected Bst
sp.permut<-spacodi.by.nodes(sp.plot=spl, phy=phy, n.rep=35)
sp.permut$randomization.test
# plot observed and expected Bst
spacodi.permutplot(spacodi.permutations=sp.permut, envelope=FALSE)
spacodi.permutplot(spacodi.permutations=sp.permut, envelope=FALSE)
# load a species-by-plots matrix, along with a tree
data(sp.example)
attributes(sp.example)
attach(sp.example)
spl
phy
# community diversity statistics of Hardy and Senterre (2007): tree-based
spacodi.calc(sp.plot = spl, phy = phy)
# community diversity statistics: trait-based with pairwise comparisons
spacodi.calc(sp.plot = spl, phy = phy, pairwise=TRUE)
# community diversity for a pair of traits
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=TRUE)
data(sp.example)
attach(sp.example)
spl->d.spacodi
class(spl)
data(sp.example)
class(sp.example)
attach(sp.example)
class(sp.example)
d.spacodi
class(d.spacodi)
#community diversity for a pair of traits, each singly
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
# Ist: using abundance data only
spacodi.calc(sp.plot = spl)
# calculations with missing taxa between tree and sp.plot
# excluding the last five species in sp.plot,
spacodi.calc(sp.plot = spl[1:15,], phy = phy, prune=TRUE)
# as before but with ’manual’ pruning of the datasets
match.spacodi.data(sp.plot=spl[1:15,],phy=phy) -> prn.data
spacodi.calc(sp.plot=prn.data$sp.plot, phy=prn.data$sp.tree)
prn.data$sp.plot
prn.data$sp.tree
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
attributes(x)
x$sp.traits
trt
x$trt1
x$trt.1
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=FALSE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1])
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=TRUE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[1,], all.together=TRUE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[1,], all.together=FALSE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=TRUE)
x<-spacodi.calc(sp.plot = spl, sp.traits = trt)$trt.1
x
spacodi.calc(sp.plot = spl, sp.traits = trt)$trt.1
x<-spacodi.calc(sp.plot = spl, sp.traits = trt)
x$trt.1
x<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
x
x$trt.1
x$trt.1$Ist
x$trt.1$Tst
x<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=TRUE)
x
x2<-spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
x$trt.1
x2$trt.1
ind.plot.finch
x2<-spacodi.calc(sp.plot = spl, sp.traits = trt[,1], all.together=FALSE)
spacodi.calc
ncol(trt[,1])
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,1]))
x2
as.matrix(trt[,1])
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,1]))
x2
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,2]))
x2
spl
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.matrix(trt[,2]))
x2
class(trt)
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.dataframe(as.matrix(trt[,2])))
x2<-spacodi.calc(sp.plot = spl, sp.traits = as.data.frame(as.matrix(trt[,2])))
x2
y<-as.data.frame(as.matrix(trt[,2]))
y
rownames(y)
x2<-spacodi.calc(sp.plot = spl, sp.traits = y)
x2
spl
x2<-spacodi.calc(sp.plot = spl, sp.traits = y, allspacodi.calc(sp.plot = spl))
spacodi.calc(sp.plot = spl)
x2<-spacodi.calc(sp.plot = spl, sp.traits = y)
x2
spacodi.calc(sp.plot = spl, sp.traits = y)
class(y)
y<-as.matrix(trt[,2])
y
y<-as.vector(as.matrix(trt[,2]))
spacodi.calc(sp.plot = spl, sp.traits = y)
y<-as.matrix(trt[,2])
y<-as.matrix(trt)[,1]
y<-as.matrix(trt[,2])
y<-as.matrix(trt)[,1]
spacodi.calc(sp.plot = spl, sp.traits = y)
y
spacodi.calc(sp.plot = spl, sp.traits = as.matrix(y))
x
attributes(x)
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.7.zip", repos=NULL)
library(cati, warn.conflicts = FALSE)
data(finch.ind)
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3
.finch.sp_mn2
res.finch.sp_mn2
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
require(mice)
traits=traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn
res.finch.sp_mn2
attributes(res.finch.sp_mn2)
res.finch.sp_mn2$obs
res.finch.sp_mn2$Null
res.finch.sp_mn2$obs
attributes(res.finch.sp_mn2)
res.finch.sp_mn2$namestraits
warnings()
res.finch.sp_mn3
res.finch.sp_mn3$obs
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3$obs
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn2$obs
funct<-c("spacodi.calc(sp.plot = table(ind.plot), sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
funct<-c("spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Ist",
"spacodi.calc(sp.plot = comm, sp.traits = as.matrix(x) )$Tst"  )
res.finch.sp_mn2<-com.index(traits=traits.finch.mice, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
c(2,1,3,2,5,2,6,2,4,2,5)
x<-c(2,1,3,2,5,2,6,2,4,2,5)
dist(x)
data(phylocom)
mpd(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=TRUE)
data(phylocom)
mntd(phylocom$sample, cophenetic(phylocom$phylo), abundance.weighted=TRUE)
phylocom$sample
