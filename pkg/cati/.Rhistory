namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#Define the limit for the plot
xli <- c()
yli<- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = T)
yli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = T)
}
}
xli = max(xli, na.rm = TRUE)
yli = max(yli, na.rm = TRUE)
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = c(min(density(traits[,t], na.rm = T)$y), max(density(traits[,t], na.rm = T)$y, na.rm = T))*1.5, xlim = c(min(density(traits[,t], na.rm = T)$x), max(density(traits[,t], na.rm = T)$x, na.rm = T)), col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri <- function(traits = NULL, var.1 = NULL, var.2 = NULL, col.dens = NULL, plot.ask = TRUE, ylim.cex = 1, cex.leg = 0.8, polyg = TRUE, multipanel = TRUE, leg = TRUE) {
var.1 <- as.factor(as.vector(var.1))
var.2 <- as.factor(as.vector(var.2))
namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#Define the limit for the plot
xli <- c()
yli<- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
xli = max(xli, na.rm = TRUE)
yli = max(yli, na.rm = TRUE)
xlimin = min(xlimin, na.rm = TRUE)
ylimin = min(ylimin, na.rm = TRUE)
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), yli)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), ylimin))*1.1), ylim = c(min(c(min(density(traits[,t], na.rm = T)$x), xli)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xlimin))), col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F)
plotDistri <- function(traits = NULL, var.1 = NULL, var.2 = NULL, col.dens = NULL, plot.ask = TRUE, ylim.cex = 1, cex.leg = 0.8, polyg = TRUE, multipanel = TRUE, leg = TRUE) {
var.1 <- as.factor(as.vector(var.1))
var.2 <- as.factor(as.vector(var.2))
namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#Define the limit for the plot
xli <- c()
yli <- c()
xlimin <- c()
ylimin <- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
xli = max(xli, na.rm = TRUE)
yli = max(yli, na.rm = TRUE)
xlimin = min(xlimin, na.rm = TRUE)
ylimin = min(ylimin, na.rm = TRUE)
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), yli)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), ylimin))*1.1), ylim = c(min(c(min(density(traits[,t], na.rm = T)$x), xli)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xlimin))), col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F)
plotDistri <- function(traits = NULL, var.1 = NULL, var.2 = NULL, col.dens = NULL, plot.ask = TRUE, ylim.cex = 1, cex.leg = 0.8, polyg = TRUE, multipanel = TRUE, leg = TRUE) {
var.1 <- as.factor(as.vector(var.1))
var.2 <- as.factor(as.vector(var.2))
namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#Define the limit for the plot
xli <- c()
yli <- c()
xlimin <- c()
ylimin <- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
xli = max(xli, na.rm = TRUE)
yli = max(yli, na.rm = TRUE)
xlimin = min(xlimin, na.rm = TRUE)
ylimin = min(ylimin, na.rm = TRUE)
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), ylimin)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), yli))*1.1), xlim = c(min(c(min(density(traits[,t], na.rm = T)$x), xlimin)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xli))), col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F)
plotDistri <- function(traits = NULL, var.1 = NULL, var.2 = NULL, col.dens = NULL, plot.ask = TRUE, ylim.cex = 1, cex.leg = 0.8, polyg = TRUE, multipanel = TRUE, leg = TRUE, xlim = NULL, ylim = NULL) {
var.1 <- as.factor(as.vector(var.1))
var.2 <- as.factor(as.vector(var.2))
namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#Define the limit for the plot
xli.interm <- c()
yli.interm <- c()
xlimin.interm <- c()
ylimin.interm <- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
if(is.null(xlim)){
xli <- max(xli.interm, na.rm = TRUE)
xlimin <- min(xlimin.interm, na.rm = TRUE)
xlim = c(min(c(min(density(traits[,t], na.rm = T)$x), xlimin)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xli)))
}
if(is.null(ylim)){
yli <- max(yli.interm, na.rm = TRUE)
ylimin <- min(ylimin.interm, na.rm = TRUE)
ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), ylimin)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), yli))*1.05)
}
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = ylim, xlim = xlim, col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, xlim=c(0,0.2))
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, xlim=c(0,0.02))
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim=c(0,0.02))
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim=c(0,0.04))
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim=c(0,0.04))
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri <- function(traits = NULL, var.1 = NULL, var.2 = NULL, col.dens = NULL, plot.ask = TRUE, ylim.cex = 1, cex.leg = 0.8, polyg = TRUE, multipanel = TRUE, leg = TRUE, xlim = NULL, ylim = NULL) {
var.1 <- as.factor(as.vector(var.1))
var.2 <- as.factor(as.vector(var.2))
namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#______
#Define the limit for the plot
xli.interm <- c()
yli.interm <- c()
xlimin.interm <- c()
ylimin.interm <- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
if(is.null(xlim)){
xli <- max(xli.interm, na.rm = TRUE)
xlimin <- min(xlimin.interm, na.rm = TRUE)
xlim = c(min(c(min(density(traits[,t], na.rm = T)$x), xlimin)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xli)))
}
if(is.null(ylim)){
yli <- max(yli.interm, na.rm = TRUE)
ylimin <- min(ylimin.interm, na.rm = TRUE)
ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), ylimin)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), yli))*1.08)
}
#______
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = ylim, xlim = xlim, col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#______
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#______
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri <- function(traits = NULL, var.1 = NULL, var.2 = NULL, col.dens = NULL, plot.ask = TRUE, ylim.cex = 1, cex.leg = 0.8, polyg = TRUE, multipanel = TRUE, leg = TRUE, xlim = NULL, ylim = NULL) {
var.1 <- as.factor(as.vector(var.1))
var.2 <- as.factor(as.vector(var.2))
namestraits <- colnames(traits)
namescommunity <- unique(var.1)
ncom <- length(namescommunity)
ntr <- dim(as.matrix(traits))[2]
if (is.null(col.dens)) {col.dens <- funky.col(nlevels(as.factor(var.2)))}
#Graphical parameters
if(plot.ask | multipanel) {
oldpar <- par(no.readonly = TRUE)
}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#______
#Define the limit for the plot
xli.interm <- c()
yli.interm <- c()
xlimin.interm <- c()
ylimin.interm <- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
if(is.null(xlim)){
xli <- max(xli.interm, na.rm = TRUE)
xlimin <- min(xlimin.interm, na.rm = TRUE)
xlim = c(min(c(min(density(traits[,t], na.rm = T)$x), xlimin)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xli)))
}
if(is.null(ylim)){
yli <- max(yli.interm, na.rm = TRUE)
ylimin <- min(ylimin.interm, na.rm = TRUE)
ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), ylimin)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), yli))*1.05)
}
#______
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = ylim, xlim = xlim, col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#______
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#______
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim=c(0,0.04))
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.2)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.4)
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F, cex.leg = 0.6)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.35)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.6)
cor.test(param_range, modeled_param_norm)
cor.test(param_range, modeled_param_norm)[1]
cor.test(param_range, modeled_param_norm)[2]
cor.test(param_range, modeled_param_norm)[3]
cor.test(param_range, modeled_param_norm)[4]
