}
par(ask = plot.ask)
if (multipanel) {
par(mfrow = c(2,2))
}
for(co in 1:ncom){
for(t in 1:ntr){
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t]))>1){
#______
#Define the limit for the plot
xli.interm <- c()
yli.interm <- c()
xlimin.interm <- c()
ylimin.interm <- c()
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1) {
xli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
yli.interm[s] <- max(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
xlimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$x, na.rm = TRUE)
ylimin.interm[s] <- min(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T)$y, na.rm = TRUE)
}
}
if(is.null(xlim)){
xli <- max(xli.interm, na.rm = TRUE)
xlimin <- min(xlimin.interm, na.rm = TRUE)
xlim = c(min(c(min(density(traits[,t], na.rm = T)$x), xlimin)), max(c(max(density(traits[,t], na.rm = T)$x, na.rm = T), xli)))
}
if(is.null(ylim)){
yli <- max(yli.interm, na.rm = TRUE)
ylimin <- min(ylimin.interm, na.rm = TRUE)
ylim = c(min(c(min(density(traits[,t], na.rm = T)$y), ylimin)), max(c(max(density(traits[,t], na.rm = T)$y, na.rm = T), yli))*1.05)
}
#______
#Plot the regional distribution
plot(main = paste(namestraits[t],levels(as.factor(var.1))[co], " "), density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T), ylim = ylim, xlim = xlim, col = "black")
lines(density(traits[,t], na.rm = T), lty = 2, col = "grey")
if (polyg == T) {
x <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$x
y <- density(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T)$y
polygon(c(x,rev(x)), c(rep(0,length(x)),rev(y)), border = NA, col = rgb(0.5,0.5,0.5,0.7))
}
#______
#Add a legend
if (leg){
if (mean(traits[as.factor(var.1) == levels(as.factor(var.1))[co],t], na.rm = T) <  mean(traits[,t], na.rm = T) ) {pos = "topright"}
else{pos = "topleft"}
legend(pos, inset = 0.05, levels(as.factor(var.2)), fill = col.dens, cex = cex.leg, bty = "n", ncol = round(sqrt(nlevels(as.factor((var.2))))-1))
}
#______
#Plot the distribution by the factor 2
for(s in 1:nlevels(as.factor(var.2))) {
if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]))>1)
{lines(density(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t], na.rm = T), col = col.dens[s])}
else if (length(na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t])) == 1)
{points(0,na.omit(traits[as.factor(var.1) == levels(as.factor(var.1))[co] & as.factor(var.2) == levels(as.factor(var.2))[s],t]), col = col.dens[s])}
}
}
}
}
if(plot.ask | multipanel) {
par(oldpar)
}
}
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim=c(0,0.04))
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.2)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.4)
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F)
plotDistri(ex.traits2, rep("toutes_sp", times = dim(ex.traits2)[1]), ex.indplot2,
plot.ask = F, multipanel = F, cex.leg = 0.6)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.35)
plotDistri(ex.traits2, rep("region", times = dim(ex.traits2)[1]), ex.sp2, plot.ask = F,
multipanel = F, ylim = c(0,0.04), cex.leg = 0.6)
cor.test(param_range, modeled_param_norm)
cor.test(param_range, modeled_param_norm)[1]
cor.test(param_range, modeled_param_norm)[2]
cor.test(param_range, modeled_param_norm)[3]
cor.test(param_range, modeled_param_norm)[4]
install.packages("~/Desktop/cati/pkg/cati_0.94.tar.gz", repos = NULL, type = "source")
round(cor.test(param_range, modeled_param_norm)[4], 3)
cor.test(param_range, modeled_param_norm)[4]
cor.test(param_range, modeled_param_norm)[[4]]
install.packages("~/Desktop/cati/pkg/cati_0.94.tar.gz", repos = NULL, type = "source")
R
R.version
par(mfrow=c(2, 1))
plot(res.simu2[[1]])
plot(res.simu2[[nperm]])
par(mfrow=c(1, 1))
library(cati)
library(cati)
data(finch.ind)
traits=traits.finch
div_range = FALSE; na.rm = FALSE; scale.tr = TRUE; method.dist = "euclidian"
#Uni-traits vector transforme to a matrix
if(!is.matrix(traits)){
traits <- na.omit(traits)
traits <- as.matrix(traits, ncol = 1)
}
#Calcul of nearest neighbourhood distance
if(scale.tr) {
traits <- apply(traits, 2, scale)
}
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x))
ptm <- proc.time()
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
#Metric calculation
CVNND <- sd(nnd[is.finite(nnd)], na.rm = T)/mean(nnd[is.finite(nnd)], na.rm = T)
if (div_range) {
CVNND <- CVNND/(max(traits, na.rm = na.rm) - min(traits, na.rm = na.rm) )
}
else {}
proc.time1 <- proc.time() - ptm
ptm <- proc.time()
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x))
#Metric calculation
CVNND <- sd(nnd[is.finite(nnd)], na.rm = T)/mean(nnd[is.finite(nnd)], na.rm = T)
if (div_range) {
CVNND <- CVNND/(max(traits, na.rm = na.rm) - min(traits, na.rm = na.rm) )
}
else {}
proc.time2 <- proc.time() - ptm
proc.time1
proc.time2
traits<-traits.finch[1,]
traits
traits<-traits.finch[,1]
#Uni-traits vector transforme to a matrix
if(!is.matrix(traits)){
traits <- na.omit(traits)
traits <- as.matrix(traits, ncol = 1)
}
#Calcul of nearest neighbourhood distance
if(scale.tr) {
traits <- apply(traits, 2, scale)
}
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
#Metric calculation
CVNND <- sd(nnd[is.finite(nnd)], na.rm = T)/mean(nnd[is.finite(nnd)], na.rm = T)
if (div_range) {
CVNND <- CVNND/(max(traits, na.rm = na.rm) - min(traits, na.rm = na.rm) )
}
CVNND <- function(traits, div_range = FALSE, na.rm = FALSE, scale.tr = TRUE, method.dist = "euclidian"){
#Uni-traits vector transforme to a matrix
if(!is.matrix(traits)){
traits <- na.omit(traits)
traits <- as.matrix(traits, ncol = 1)
}
#Calcul of nearest neighbourhood distance
if(scale.tr) {
traits <- apply(traits, 2, scale)
}
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
#Metric calculation
CVNND <- sd(nnd[is.finite(nnd)], na.rm = T)/mean(nnd[is.finite(nnd)], na.rm = T)
if (div_range) {
CVNND <- CVNND/(max(traits, na.rm = na.rm) - min(traits, na.rm = na.rm) )
}
else {}
return(CVNND)
}
ptm <- proc.time()
CVNND (traits.finch[,1])
proc.time1 <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch)
proc.time1.multi <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch[,1], scale.tr = F)
proc.time2 <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch, scale.tr = F)
proc.time2.multi <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch[,1], div_range=T)
proc.time3 <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch, div_range=T)
proc.time3.multi <- proc.time() - ptm
proc.time1
proc.time1
proc.time1.multi
proc.time1
proc.time1.multi
proc.time2
proc.time2.multi
proc.time3
proc.time3.multi
CVNND <- function(traits, div_range = FALSE, na.rm = FALSE, scale.tr = TRUE, method.dist = "euclidian"){
#Uni-traits vector transforme to a matrix
if(!is.matrix(traits)){
traits <- na.omit(traits)
traits <- as.matrix(traits, ncol = 1)
}
#Calcul of nearest neighbourhood distance
if(scale.tr) {
traits <- apply(traits, 2, scale)
}
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
#Metric calculation
CVNND <- sd(nnd[is.finite(nnd)], na.rm = T)/mean(nnd[is.finite(nnd)], na.rm = T)
if (div_range) {
CVNND <- CVNND/(max(traits, na.rm = na.rm) - min(traits, na.rm = na.rm) )
}
else {}
return(CVNND)
}
proc.time1
proc.time1.multi
proc.time2
proc.time2.multi
proc.time3
proc.time3.multi
proc.time1/proc.time1.multi
traits <- na.omit(traits)
traits<-traits.finch[,1]
traits <- na.omit(traits)
if(!is.matrix(traits)){
traits <- na.omit(traits)
traits <- as.matrix(traits, ncol = 1)
}
traits
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
nnd
mat.dist <- dist(traits.finch, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
!is.matrix(traits)
system.time{CVNND (traits.finch[,1])}
system.time(CVNND (traits.finch[,1]))
system.time(for(i in 1:100) mad(runif(1000)))
exT <- function(n = 10000) {
# Purpose: Test if system.time works ok;   n: loop size
system.time(for(i in 1:n) x <- mean(rt(1000, df = 4)))
}
exT()
system.time(exT())
mat.dist <- dist(traits, method = method.dist)
traits<-traits.finch
ptm <- proc.time()
mat.dist <- dist(traits[,1], method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
proc.time1 <- proc.time() - ptm
ptm <- proc.time()
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
proc.time1.multi <- proc.time() - ptm
proc.time1
proc.time1.multi
proc.time2.multi
CVNND (traits.finch, scale.tr = F)
CVNND (traits.finch[,1], scale.tr = F)
nnd
data(finch.ind)
ptm <- proc.time()
mat.dist <- dist(traits[,1], method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
proc.time1 <- proc.time() - ptm
div_range = FALSE; na.rm = FALSE; scale.tr = TRUE; method.dist = "euclidian"
ptm <- proc.time()
mat.dist <- dist(traits[,1], method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
proc.time1 <- proc.time() - ptm
traits<-traits.finch
div_range = FALSE; na.rm = FALSE; scale.tr = TRUE; method.dist = "euclidian"
ptm <- proc.time()
mat.dist <- dist(traits[,1], method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
proc.time1 <- proc.time() - ptm
ptm <- proc.time()
mat.dist <- dist(traits, method = method.dist)
nnd <- apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
proc.time1.multi <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch[,1], scale.tr = F)
proc.time2 <- proc.time() - ptm
require(cati)
ptm <- proc.time()
CVNND (traits.finch[,1], scale.tr = F)
proc.time2 <- proc.time() - ptm
ptm <- proc.time()
CVNND (traits.finch, scale.tr = F)
proc.time2.multi <- proc.time() - ptm
proc.time2.multi
proc.time1.multi
apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
apply(as.matrix(mat.dist), 1, function(x) min(x)[min(x)!=0])
apply(as.matrix(mat.dist), 1, function(x) min (x))
apply(as.matrix(mat.dist), 1, function(x) min(x)[min(x)!=0])
apply(as.matrix(mat.dist), 1, function(x) min (x[x>0]))
?dist
mat.dist <- dist(traits, method = method.dist)
mat.dist
diag = FALSE
mat.dist <- as.matrix(dist(traits, method = method.dist))
head(mat.dist)
(mat.dist)[1:3,1:3]
diag(mat.dist )
diag(mat.dist )<-Na
diag(mat.dist )<- 5
(mat.dist)[1:3,1:3]
diag(mat.dist )
diag(mat.dist )<- "NA"
mat.dist[1:3,1:3]
diag(mat.dist )<- NA
mat.dist[1:3,1:3]
mat.dist <- as.matrix(dist(traits, method = method.dist))
diag(mat.dist )<- NA
mat.dist[1:3,1:3]
mat.dist <- as.matrix(dist(traits, method = method.dist))
diag(mat.dist )<- NA
nnd <- apply(mat.dist, 1, function(x) min (x))
CVNND2 <- function(traits, div_range = FALSE, na.rm = FALSE, scale.tr = TRUE, method.dist = "euclidian"){
#Uni-traits vector transforme to a matrix
if(!is.matrix(traits)){
traits <- na.omit(traits)
traits <- as.matrix(traits, ncol = 1)
}
#Calcul of nearest neighbourhood distance
if(scale.tr) {
traits <- apply(traits, 2, scale)
}
mat.dist <- as.matrix(dist(traits, method = method.dist))
diag(mat.dist )<- NA
nnd <- apply(mat.dist, 1, function(x) min (x))
#Metric calculation
CVNND <- sd(nnd[is.finite(nnd)], na.rm = T)/mean(nnd[is.finite(nnd)], na.rm = T)
if (div_range) {
CVNND <- CVNND/(max(traits, na.rm = na.rm) - min(traits, na.rm = na.rm) )
}
else {}
return(CVNND)
}
system.time(CVNND (traits.finch[,1]))
system.time(CVNND (traits.finch[,1]))
system.time(CVNND2 (traits.finch))
system.time(CVNND2 (traits.finch))
8.5*2
3
10
5.5
8.5*2+3+10+15.5
8.5*2+13
>>>>>>> da4a64abb7861c211f4b13b00d2566b05cc7c20b
library(cati)
library(cati)
library(cati)
library(cati)
library(cati)
r
devtools::load_all("~/cati")
library(cati)
install.packages("entropart")
install.packages("fBasics")
require(cati)
data(finch.ind)
res.decomp <- decompCTRE(traits = traits.finch, sp = sp.finch,
ind.plot = ind.plot.finch, print = FALSE)
decompCTRE <- function(traits = NULL , formula = ~ 1, ind.plot = NULL, sp = NULL, printprogress = TRUE, ...) {
form.string <- deparse(substitute(formula))
ntr <- dim(traits)[2]
namestraits <- colnames(traits)
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom = length(S)
decomp <- list()
moy_pop <- apply(traits, 2, function(x) tapply(x, paste(ind.plot, sp, sep = "."), mean, na.rm = T))
moy_sp <- apply(traits, 2, function(x) tapply(x, sp, mean, na.rm = T))
for(t in 1:ntr){
if(sum(is.na(traits[,t])) > 0){
trait <- as.vector(na.omit(traits[,t]))
warning(paste("All individuals with one NA are excluded for the trait", t, ":", namestraits[t], sep = " "))
ind.plot.interm <-  as.factor(ind.plot[!is.na(traits[,t])])
sp.interm<-  as.factor(sp[!is.na(traits[,t])])
}
else{
trait <- traits[,t]
}
interm <- apply(comm, 2, function(x) tapply(x, paste(ind.plot.interm, sp.interm, sep = ".") , sum, na.rm = T ) )[!is.na(moy_pop[,t]), 1:ncom]
interm2 <- apply(comm, 2, function(x) tapply(x, sp.interm, sum, na.rm = T ) )[!is.na(moy_sp[,t]), 1:ncom]
specif.avg <- t(moy_pop[,t][!is.na(moy_pop[,t])] %*% interm )/colSums(interm)
const.avg <- t(moy_sp[,t][!is.na(moy_sp[,t])] %*% interm2 )/colSums(interm2)
flex = paste("traitflex.anova(", form.string , ", specif.avg, const.avg, ...)", sep = "")
decomp[[eval(namestraits[t])]] <- as.vector(eval(parse(text = flex)))
if (printprogress == T){print(paste(round(t/ntr*100, 2),"%"))} else {}
}
decomp$traits <- namestraits
class(decomp) <- "decompCTRE"
return(decomp)
}
barplot.decompCTRE <- function(height, resume = TRUE, ...) {
x <- height
oldpar <- par(no.readonly = TRUE)
if (resume == TRUE){
res <- matrix(ncol = dim(as.matrix(x))[1]-1, nrow = dim(x[[1]]$SumSq)[2]-1)
for(i in 1: (dim(as.matrix(x))[1]-1)) {
res[,i] <- plot.traitflex(x[[i]], plot.res = FALSE, cumul = TRUE, beside = T, ...)
}
colnames(res) <- x$traits
barplot(res, beside = T)
legend("topright", c("Turnover", "Intraspec.", "Covariation"), fill = c(gray.colors(3)) )
}
else if (resume == FALSE){
par(cex = 2/length(x$traits))
for(i in 1:dim(x[[1]]$SumSq)[2]){
plot.traitflex(x[[i]], main = x$traits[i], ...)
abline(v = 0, lty = 2)
}
}
par(oldpar)
}
data(finch.ind)
res.decomp <- decompCTRE(traits = traits.finch, sp = sp.finch,
ind.plot = ind.plot.finch, print = FALSE)
data(finch.ind)
res.decomp <- decompCTRE(traits = traits.finch, sp = sp.finch,
ind.plot = ind.plot.finch, print = FALSE)
ind.plot.interm
ind.plot
ind.plot.finch
traits = traits.finch;sp = sp.finch;ind.plot = ind.plot.finch
form.string <- deparse(substitute(formula))
ntr <- dim(traits)[2]
namestraits <- colnames(traits)
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom = length(S)
decomp <- list()
moy_pop <- apply(traits, 2, function(x) tapply(x, paste(ind.plot, sp, sep = "."), mean, na.rm = T))
moy_sp <- apply(traits, 2, function(x) tapply(x, sp, mean, na.rm = T))
t=1
if(sum(is.na(traits[,t])) > 0){
trait <- as.vector(na.omit(traits[,t]))
warning(paste("All individuals with one NA are excluded for the trait", t, ":", namestraits[t], sep = " "))
ind.plot.interm <-  as.factor(ind.plot[!is.na(traits[,t])])
sp.interm<-  as.factor(sp[!is.na(traits[,t])])
}
else{
trait <- traits[,t]
}
if(sum(is.na(traits[,t])) > 0){
trait <- as.vector(na.omit(traits[,t]))
warning(paste("All individuals with one NA are excluded for the trait", t, ":", namestraits[t], sep = " "))
ind.plot.interm <-  as.factor(ind.plot[!is.na(traits[,t])])
sp.interm<-  as.factor(sp[!is.na(traits[,t])])
}
interm <- apply(comm, 2, function(x) tapply(x, paste(ind.plot.interm, sp.interm, sep = ".") , sum, na.rm = T ) )[!is.na(moy_pop[,t]), 1:ncom]
interm2 <- apply(comm, 2, function(x) tapply(x, sp.interm, sum, na.rm = T ) )[!is.na(moy_sp[,t]), 1:ncom]
interm <- apply(comm, 2, function(x) tapply(x, paste(ind.plot.interm, sp.interm, sep = ".") , sum, na.rm = T ) )[!is.na(moy_pop[,t]), 1:ncom]
interm <- apply(comm, 2, function(x) tapply(x, paste(ind.plot.interm, sp.interm, sep = ".") , sum, na.rm = T ) )
dim(comm)
decompCTRE <- function(traits = NULL , formula = ~ 1, ind.plot = NULL, sp = NULL, printprogress = TRUE, ...) {
form.string <- deparse(substitute(formula))
ntr <- dim(traits)[2]
namestraits <- colnames(traits)
comm <- t(table(ind.plot,1:length(ind.plot)))
S = colSums(comm>0)
ncom = length(S)
decomp <- list()
moy_pop <- apply(traits, 2, function(x) tapply(x, paste(ind.plot, sp, sep = "."), mean, na.rm = T))
moy_sp <- apply(traits, 2, function(x) tapply(x, sp, mean, na.rm = T))
for(t in 1:ntr){
if(sum(is.na(traits[,t])) > 0){
warning(paste("All individuals with one NA are excluded for the trait", t, ":", namestraits[t], sep = " "))
}
interm <- apply(comm, 2, function(x) tapply(x, paste(ind.plot, sp, sep = ".") , sum, na.rm = T ) )[!is.na(moy_pop[,t]), 1:ncom]
interm2 <- apply(comm, 2, function(x) tapply(x, sp, sum, na.rm = T ) )[!is.na(moy_sp[,t]), 1:ncom]
specif.avg <- t(moy_pop[,t][!is.na(moy_pop[,t])] %*% interm )/colSums(interm)
const.avg <- t(moy_sp[,t][!is.na(moy_sp[,t])] %*% interm2 )/colSums(interm2)
flex = paste("traitflex.anova(", form.string , ", specif.avg, const.avg, ...)", sep = "")
decomp[[eval(namestraits[t])]] <- as.vector(eval(parse(text = flex)))
if (printprogress == T){print(paste(round(t/ntr*100, 2),"%"))} else {}
}
decomp$traits <- namestraits
class(decomp) <- "decompCTRE"
return(decomp)
}
data(finch.ind)
res.decomp <- decompCTRE(traits = traits.finch, sp = sp.finch,
ind.plot = ind.plot.finch, print = FALSE)
library(cati)
library(cati)
library(cati)
library(cati)
library(cati)
?barplot
?print
library(cati)
install.packages(c("knitr", "spacodiR", "entropart", "fBasics", "picante"))
install.packages("devtools")
library(cati)
library(cati)
devtools::load_all(".")
library(cati)
?plotDistri
??plotDistri
??plotDistr
GlobalEnv
