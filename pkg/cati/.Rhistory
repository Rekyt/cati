CVNND(c(x,x,x,x,x)
)
proc.time()
#SDND
sdnd <- function (com.dist,trait){
com.mat <- as.matrix(com.dist)
trait <- trait[colnames(com.mat)]
trait <- sort(trait)
return(sd2(diff(trait)))
}
sdnd*(dist(x), x)
sdnd(dist(x), x)
Function for sample variance
var2 <- function(x){
x <- na.omit(x)
res <- (length(x)-1)/length(x)*var(x)
return(res)
}
#Function for sample standard deviation
sd2 <- function(x){
res <- sqrt(var2(x))
return(res)
}
sdnd(dist(x), x)
dist(x)
sdnd(dist(x), x)
MNND<-function(trait, div_range=FALSE){
r=sort(trait)
if(length(r)<1){
nnd=NA}
else{nnd=vector(length=length(r)-1)
for(j in 2:length(r)){
nnd[j-1]=r[j]-r[j-1]
}
}
MNND<-mean(nnd, na.rm=T)
if (div_range==T) {MNND<-MNND/range(trait)}
else {}
return(MNND)
}
MNND(c(x,x,x,x,x)
)
proc.time()
mnnd <- function (com.dist){
com.mat <- as.matrix(com.dist)
fun3 <- function(x) as.numeric(sub("^0$",NA,x))
com.mat <- apply(com.mat,1,fun3)
return(mean(apply(com.mat,1,min,na.rm=T)))
}
mnnd(c(x,x,x,x,x))
mnnd(dist(c(x,x,x,x,x)))
proc.time()
install.packages("C:/Users/taudiere/Desktop/cati/pkg/cati_0.8.zip", repos=NULL)
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
# T IC/IR
T_ic.ir<-function(traits, ind_plot, sp){
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IC<-tapply(traits, Tind_plot, var, na.rm=T)
var_IR<-var(traits, na.rm=T)
T_IC.IR<-var_IC/rep(var_IR,length(var_IC))
return(T_IC.IR)
}
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
T_ip.ic<-function(traits, ind_plot, sp){
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-tapply(traits, names_sp_ind_plot, var, na.rm=T)
var_IC<-tapply(traits, Tind_plot, var, na.rm=T)
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot))[s],Tplotsp)], na.rm=T)/var_IC
return(T_IP.IC)
}
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
data.finch
data(finch.ind)
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
dim(traits.finch)
T_ip.ic(t(traits.finch), ind.plot.finch, sp.finch)
length(ind.plot.finch)
length( sp.finch)
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
names_sp_ind_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="@"))
names_sp_ind_plot
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-tapply(traits, names_sp_ind_plot, var, na.rm=T)
var_IC<-tapply(traits, Tind_plot, var, na.rm=T)
traits
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-tapply(traits.finch, names_sp_ind_plot, var, na.rm=T)
var_IC<-tapply(traits.finch, Tind_plot, var, na.rm=T)
var_IP<-tapply(traits.finch, names_sp_ind_plot, var, na.rm=T)
traits.finch
var_IP<-apply(traits.finch, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T)
)
var_IP
T_ip.ic<-function(traits, ind_plot, sp){
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-apply(traits, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot))[s],Tplotsp)], na.rm=T)/var_IC
return(T_IP.IC)
}
T_ip.ic(t(traits.finch), ind.plot.finch, sp.finch)
T_ip.ic(traits.finch, ind.plot.finch, sp.finch)
names_sp_ind_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-apply(traits.finch, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits.finch, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IP
var_IC
var_IC<-apply(traits, 1, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IC<-apply(traits.finch, 1, function(x) tapply(x, Tind_plot, var, na.rm=T))
Tind_plot
ind_plot=ind.plot.finch
sp<-sp.finch
traits<-traits.finch
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
Tplotsp
Tind_plot
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IR<-var(traits, na.rm=T)
T_IC.IR<-var_IC/rep(var_IR,length(var_IC))
return(T_IC.IR)
Tind_plot
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
Tind_plo
Tind_plot
unlist(strsplit(levels(names_sp_ind_plot),split="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[2*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
Tind_plot
Tplotsp
unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))
unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[2*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
var_IR<-var(traits, na.rm=T)
T_IC.IR<-var_IC/rep(var_IR,length(var_IC))
Tind_plot
var_IC
var_IP
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="_"))[3*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="_"))[3*(1:length(names_sp_ind_plot))]
names(Tind_plot)=levels(names_sp_ind_plot)
var_IP<-apply(traits, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)/var_IC
var_IC
var_IC
mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)
rowMeans(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)
var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)]
levels(as.factor(Tind_plot)3
levels(as.factor(Tind_plot)
=
levels(as.factor(Tind_plot))
Tind_plot
names_sp_ind_plot<-as.factor(paste(sp, ind_plot, sep="@"))
Tplotsp<-unlist(strsplit(levels(names_sp_ind_plot),split="@"))[2*(1:nlevels(names_sp_ind_plot))]
names(Tplotsp)=levels(names_sp_ind_plot)
Tind_plot<-unlist(strsplit(as.vector(names_sp_ind_plot),split="@"))[2*(1:length(names_sp_ind_plot))]
var_IP<-apply(traits, 2, function(x) tapply(x, names_sp_ind_plot, var, na.rm=T))
var_IC<-apply(traits, 2, function(x) tapply(x, Tind_plot, var, na.rm=T))
T_IP.IC<-mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)/var_IC
mean(var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)], na.rm=T)
var_IP[grepl(levels(as.factor(Tind_plot)),Tplotsp)]
grepl(levels(as.factor(Tind_plot)),Tplotsp)
levels(as.factor(Tind_plot))
,Tplotsp
var_IP
var_IC
library(cati)
remove.packages("cati", lib="~/R/win-library/3.0")
install.packages("cati")
install.packages("cati")
install.packages("cati")
install.packages("cati")
install.packages("C:/Users/taudiere/Downloads/cati_0.8.tar.gz", repos = NULL, type = "source")
install.packages(c("adegenet", "ape", "caTools", "devtools", "evaluate", "fields", "ggplot2", "Hmisc", "httpuv", "igraph", "knitr", "lattice", "LearnBayes", "lme4", "maps", "markdown", "Matrix", "memoise", "mice", "pROC", "Rcpp", "RcppEigen", "reshape2", "RJSONIO", "roxygen2", "scales", "shiny", "sp", "spdep", "stargazer"))
?round
round(x2, 3)
x2 <- pi * 100^(-1:3)
round(x2, 3)
x2 <- pi * 100^(-1:3)
round(x2, 0)
?permatswap
??permatswap
library("cati", lib.loc="~/R/win-library/3.0")
data(finch.ind)
oldpar<-par()
####
#The function com.index allow to choose your own function
#(like mean, range, variance...) to calculate customize index.
require(e1071)
funct<-c("mean(x, na.rm=TRUE)", "kurtosis(x, na.rm=TRUE)",
"max(x, na.rm=TRUE) - min(x, na.rm=TRUE)", "CVNND(x)"  )
## Not run:
res.finch.sp_mn2<-com.index(traits=traits.finch, index=funct,
sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.sp_mn3<-com.index(traits=traits.finch, index=funct,
sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
####
#We can represent Standardized Effect Size (ses)
#using the function plot(as.listofindex(list1, list2, list3))
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn3)
index.list2<-as.listofindex(list.ind2)
plot(index.list2, type="bytraits")
plot(index.list2)
####
#This allows to calcul index per site
#for example using "tapply(x, sites, mean)".
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=TRUE))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=TRUE))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm=TRUE) -
min(x, na.rm=TRUE) )", "tapply(x, ind.plot.finch, function(x)
CVNND(x))"  )
##Null model 1 is trivial for this function
#because randomisation is within community only
res.finch.ind_mn1<-com.index(traits=traits.finch, index=funct,
sp=sp.finch, nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.ind_mn2<-com.index(traits=traits.finch, index=funct,
sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
####
#We can calcul metrics with or without intraspecific variance.
#Calculation of trait averages per population
#(name_sp_site is a name of a population)
#like in the function com.index
#and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch, sep="_")
traits.by.pop<-apply(traits.finch, 2 , function (x)
tapply(x, name_sp_sites, mean , na.rm=TRUE))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"),
split="_"), function(x) x[3])
funct.withoutIV<-c("tapply(x, unlist(sites_bypop), function(x)
mean(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x)
kurtosis(x, na.rm=TRUE))", "tapply(x, unlist(sites_bypop), function(x)
max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )",
"tapply(x, unlist(sites_bypop), function(x) CVNND(x))"  )
funct.withIV<-c("tapply(x, ind.plot.finch, function(x)
mean(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x)
kurtosis(x, na.rm=TRUE))", "tapply(x, ind.plot.finch, function(x)
max(x, na.rm=TRUE) - min(x, na.rm=TRUE) )",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.withIV<-com.index(traits=traits.finch, index=funct.withIV,
sp=sp.finch, nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.withoutIV<-com.index(traits=traits.finch, index=funct.withoutIV,
sp=sp.finch, nullmodels=c(3,3,3,3), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
####
#We can also represent T-statistics and custom index thanks to
#the plot.listofindex function.
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
list.ind<-list(res.finch.withIV, res.finch.withoutIV ,res.finch)
index.list1<-as.listofindex(list.ind, namesindex=c("mean", "kurtosis",
"range", "CVNND", "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR"))
class(index.list1)
par(mfrow=c(2,3))
plot(index.list1,type="bytraits", bysite=TRUE)
par(mfrow=c(2,2))
plot(index.list1,type="bytraits")
par(mfrow=c(1,1))
plot(index.list1,type="simple")
plot(index.list1,type="simple_range")
plot(index.list1,type="normal")
plot(index.list1,type="barplot")
data(finch.ind)
#Plot the distribution of trait values for populations,
#species, sites and regional scales.
#First, let try the distribution for all populations
#of Darwin finches.
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, sp.finch, ind.plot.finch, ylim.cex=3,
plot.ask=FALSE, multipanel=FALSE, leg=FALSE)
par(mfrow=c(1,1), cex=1)
#Then we can inverse the second and the third arguments
#to plot the distribution for all finches species.
par(mfrow=c(4,4), cex=0.5)
plot_dens(traits.finch, ind.plot.finch, sp.finch, ylim.cex=8,
plot.ask=FALSE, multipanel=FALSE, leg=FALSE)
par(mfrow=c(1,1), cex=1)
#You can also plot trait distribution for all species in the region
plot_dens(traits.finch, rep("region", times=dim(traits.finch)[1]),
sp.finch, ylim.cex=6, plot.ask=FALSE, leg=FALSE)
#You can also plot trait distribution for all sites
#without taking into account species identity
plot_dens(traits.finch, rep("toutes_sp", times=dim(traits.finch)[1]),
ind.plot.finch, ylim.cex=3, plot.ask=FALSE)
par(mfrow=c(4,4), cex=0.5)
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch,
sp=sp.finch, nperm=9, print=FALSE)
par(mfrow=c(3,4))
plot_randtest(res.finch)
plot_randtest(res.finch, alter="two-sided")
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch,
sp=sp.finch, nperm=9, print=FALSE)
par(mfrow=c(3,2))
plot_randtest(res.finch)
plot_randtest(res.finch, alter="two-sided")
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch, sp=sp.finch,
nperm=9)
par(mfrow=c(2,2))
species.richness<-table(ind.plot.finch)
plot_ses.var(as.listofindex(list(res.finch)), species.richness,
multipanel=FALSE)
#Same plot with resume=TRUE.
par(mfrow=c(2,2))
plot_ses.var(as.listofindex(list(res.finch)), species.richness,
resume=TRUE, multipanel=FALSE)
par(mfrow=c(1,1))
data(finch.ind)
plot_sp_pop(traits.finch, ind.plot.finch, sp.finch, silent=TRUE)
#If we change the value of the threshold
#(alpha=10% instead of 5%
#and the minimum individual to represent significativity
#fixed to 3 instead of 10 by default)
#we can see some significant relationships.
plot_sp_pop(traits.finch, ind.plot.finch, sp.finch, p.val=0.1,
min.ind.signif=3, silent=TRUE)
#For a more simple figure, add the option resume=TRUE.
#Again if we change the value of the threshold
#(alpha=10% instead of 5%
#and the minimum individual to represent significativity
# fixed to 3 instead of 10 by default)
#we can see some significant relationships.
plot_sp_pop(traits.finch, ind.plot.finch, sp.finch, silent=TRUE,
resume=TRUE, col.pop="grey")
plot_sp_pop(traits.finch, ind.plot.finch, sp.finch, silent=TRUE,
resume=TRUE, col.pop="grey", col.sp="black")
plot_sp_pop(traits.finch, ind.plot.finch, sp.finch, silent=TRUE,
resume=TRUE, col.pop="grey", col.sp="black",
p.val=0.1,  min.ind.signif=3)
data(finch.ind)
res.partvar.finch<-partvar( traits=traits.finch,
factors=cbind(as.factor(as.vector(ind.plot.finch)),
as.factor(as.vector(sp.finch)),
as.factor(as.vector(unlist(strsplit(as.vector(sp.finch),"_"))
[seq(1,length(sp.finch)*2, by=2)])) ) )
pie_partvar(res.partvar.finch, col=c("red", "green", "blue"))
bar_partvar(res.partvar.finch, col=c("red", "green", "blue"))
par(mfrow=c(2,2))
\documentclass[12pt]{article}
data(finch.ind)
res.partvar.finch<-partvar( traits=traits.finch,
factors=cbind(as.factor(as.vector(ind.plot.finch)),
as.factor(as.vector(sp.finch)),
as.factor(as.vector(unlist(strsplit(as.vector(sp.finch),"_"))
[seq(1,length(sp.finch)*2, by=2)])) ) )
pie_partvar(res.partvar.finch, col=c("red", "green", "blue"))
bar_partvar(res.partvar.finch, col=c("red", "green", "blue"))
data(finch.ind)
res.decomp<-decomp_within(traits=traits.finch, sp=sp.finch,
ind.plot=ind.plot.finch, print=FALSE)
barplot.decomp_within(res.decomp)
par(mfrow=c(2,2))
barplot.decomp_within(res.decomp, resume=FALSE)
par(mfrow=c(1,1))
data(finch.ind)
res.finch<-Tstats(traits.finch, ind_plot=ind.plot.finch,
sp=sp.finch, nperm=9, print=FALSE)
attributes(res.finch)
#Tstats class is associated to S3 methods plot, barplot and summary
plot(res.finch)
plot(res.finch, type="color_cond")
plot(res.finch, type="simple")
plot(res.finch, type="simple_sd")
plot(res.finch, type="barplot")
attributes(summary_Tstats(res.finch))
head(summary_Tstats(res.finch)$p.value, 10)
summary_Tstats(res.finch, type="binary")
summary_Tstats(res.finch, type="percent")
summary_Tstats(res.finch, type="site")
summary_Tstats(res.finch, type="p.value")
summary_Tstats(res.finch, type="all")
barplot(res.finch)
attributes(summary_Tstats(res.finch))
head(summary_Tstats(res.finch)$p.value, 10)
#### An other way to see "ses values" of T-statistics
# Custom theme (from rasterVis package)
require(rasterVis)
my.theme <- BuRdTheme()
# Customize the colorkey
my.ckey <- list(col=my.theme$regions$col)
levelplot(t(ses(res.finch$T_IP.IC,res.finch$T_IP.IC_nm)$ses),
colorkey=my.ckey, par.settings=my.theme,border="black")
#### Use a different regional pool than the binding of studied communities
#create a random regional pool for the example
reg.p<-rbind(traits.finch, traits.finch[sample(1:2000,300),])
res.finch2<-Tstats(traits.finch, ind_plot=ind.plot.finch,
sp=sp.finch, nperm=9, print=FALSE)
library(shiny)
runExample("01_hello")
runExample("01_hello")
runExample("02")
runExample("runExample("02_text") # tables and data frames")
runExample("02_text")
runExample("03_reactivity")
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
05_sliders
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("11_timer")
library(cati)
library(cati)
?tidy.dir
??tidy.dir
library(formatR)
tidy.dir()
tidy.dir(recursive = TRUE)
cati.package <- read.table("C:/Users/taudiere/Desktop/cati/pkg/cati/man/cati-package.Rd", header=TRUE, quote="\"")
View(cati.package)
tidy.dir("C:/Users/taudiere/Desktop/cati/pkg/cati/man/", recursive = TRUE)
tidy.dir("C:/Users/taudiere/Desktop/cati/pkg/cati/R/", recursive = TRUE)
tidy.dir("C:/Users/taudiere/Desktop/cati/pkg/cati/man", recursive = TRUE)
tidy.dir("C:/Users/taudiere/Desktop/cati/pkg/cati/R/", recursive = TRUE)
tidy.dir("C:/Users/taudiere/Desktop/cati/pkg/cati/R/")
ibrary(formatR)
path = tempdir()
file.copy(system.file("demo", package = "base"), path, recursive = TRUE)
tidy.dir(path, recursive = TRUE)
tidy.source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/")
xx<-system.file("C:/Users/taudiere/Desktop/cati/pkg/cati/R/")
xxx<-tidy.source(xx)
xx<-system.file("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunction_cati.R")
xxx<-tidy.source(xx)
messy = system.file("format", "C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunction_cati.R", package = "formatR")
xxx<-tidy.source(messy)
library(formatR)
## a messy R script
messy = system.file("format", "messy.R", package = "formatR")
tidy.source(messy)
messy = system.file("format", "messy.R", package = "formatR")
messy
xx
messy = system.file("format", "C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunction_cati.R", package = "formatR")
messy
xx<-tidy.source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunction_cati.R")
xx<-tidy.source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunction_cati")
xx<-tidy.source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunctions_cati.R")
traceback()
xx<-tidy.source("C:/Users/taudiere/Desktop/cati/pkg/cati/R/allfunctions_cati.R")
messy = system.file("format", "messy.R", package = "formatR")
tidy.source(messy)
messy = system.file("format", "messy.R", package = "formatR")
tidy.source(messy)
messy = system.file("format", "messy.R", package = "formatR")
tidy.source(messy)
messy
messy = system.file("format", "messy.R", package = "formatR")
tidy.source(messy)
library(gWidgetsRGtk2)
library(formatR)
tidy.gui()
install.package(gWidgetsRGtk2)
install.packages(gWidgetsRGtk2)
install.packages("gWidgetsRGtk2")
library(gWidgetsRGtk2)
library(formatR)
tidy.gui()
messy = system.file("format", "messy.R", package = "formatR")
tidy.source(messy)
