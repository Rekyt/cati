\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{color}
\definecolor{blue1}{RGB}{0,102,204}
\usepackage[colorlinks = true,linkcolor = blue,citecolor = blue,urlcolor = blue]{hyperref}
\usepackage{array}
\usepackage[english]{babel}
\usepackage{amsfonts}
\usepackage{url}
\usepackage{bm}
\usepackage[margin = 1.5cm]{geometry}
\usepackage[affil-it]{authblk}
\usepackage{hyperref}

\newcommand{\R}{\mathbb{R}}
\newcommand{\code}[1]{{{\tt #1}}}


\title{Illustrating package cati (Community Assembly by Traits: Individuals and beyond) using Darwin finches data}
\author{Adrien Taudiere\thanks{\texttt{adrien.taudiere@cefe.cnrs.fr}} and Cyrille Violle}

\affil{{\footnotesize CEFE - Centre d'Ecologie Fonctionnelle et Evolutive, Montpellier: France}}

\date{\today}

\sloppy
\hyphenpenalty 10000

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\selectlanguage{english}

<<include = FALSE>>=
library(knitr)
opts_chunk$set(fig.keep = 'high', dev = 'pdf', fig.width = 7, fig.height = 7, tidy = FALSE, warning = FALSE, fig.show = "asis")
@

\maketitle


\textbf{Abstract:}

Community ecologists are actively describing species by their functional traits, quantifying the functional structure of plant and animal assemblages, and inferring community assembly processes with null model analyses of trait distributions and functional diversity indices. Intraspecific variation in traits and effects of spatial scale are potentially important in these analyses.

  We introduce the R package cati, available on CRAN, for the analysis of community assembly with functional traits. The cati package (i) calculates a variety of single-trait and multi-trait indices from interspecific and intraspecific trait measures; (ii) partitions functional trait variation among spatial and taxonomic levels; (iii) implements a palette of flexible null models for detecting non-random patterns of functional traits. These patterns can be used to draw inferences about hypotheses of community assembly such as environmental filtering and negative species interactions.

The basic input for cati is a data frame in which columns are traits, rows are species or individuals, and entries are the measured trait values. The cati package can also incorporate into analyses a square distance matrix, which could include phylogenetic or genetic distances among individuals or species. Users select from a variety of functional trait metrics and analyze them relative to a null model that specifies trait distributions in a regional source pool.

\textbf{Key words:}
Functional space, functional structure, community assembly, ecological niche, environmental filter, individual differences, intraspecific variation, null model, trait, variance decomposition

\vfill
\begin{center}
\textbf{The up to date version of this tutorial is available \href{https://github.com/adrientaudiere/cati/blob/Package-cati/Documentation/vignette_Darwin_finches/vignette.pdf}{here}.}
\end{center}

\newpage
\tableofcontents

\newpage


\section{Introduction}
This vignette present the \texttt{cati} package for R (Community Assembly by Traits: Individuals and beyond) using Darwin finches data.

\section{Getting started}
\subsection{Installing the package \texttt{cati}}

Before going further, we shall make sure that \texttt{cati} is well installed
on the computer.
The current version of the package is \Sexpr{packageDescription("cati", fields = "Version")}.
Make sure you have a recent version of R ($\geq 3.0.2$) by typing:

<<>>=
R.version.string
@

Then, install \texttt{cati} with dependencies using:
<<results = 'hide'>>=
#install.packages("cati", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library("cati")
@

We can now load the package alongside other useful packages:
<<results = "hide">>=
library("mice")
library("hypervolume")
library("e1071")
@

You can make sure that the right version of the package is installed using:
<<>>=
packageDescription("cati", fields = "Version")
@
\texttt{cati} version should read \Sexpr{packageDescription("cati", fields = "Version")}.

\subsection{Getting help}

To get help for a given function, use \texttt{?foo} where \texttt{foo} is the
function of interest.
For instance:

 <<eval = FALSE>>=
?Tstats
@

will open up the manpage of T-statistics function (\texttt{Tstats}).
An 'example' section will shows how to use a function at the end of the manpage. 

Note that you can also browse help pages as html pages, using:
<<eval = FALSE>>=
help.start()
@

To go to the \texttt{cati} man page on Rstudio, click 'packages' in the lower right windows, then clik 'cati', and 'cati-package'.

\subsection{Data presentation: Darwin finches in Galapagos Island}

First we need to load the data.
<<results = 'hide', message = FALSE, warning = FALSE>>=
data(finch.ind)

#Save default parameters
old.par<-par(no.readonly = TRUE)
@

Now we can see 3 objects: a traits matrix \texttt{traits.finch}, a vector of species names \texttt{sp.finch} and a vector of sites names \texttt{ind.plot}. 
<<results = 'hide', message = FALSE, warning = FALSE>>=
dim(traits.finch) 
#the trait matrix contains 2513 individuals values for 4 traits
table(sp.finch) 
#the species names vector contains 2513 individuals belonging to 12 species
table(ind.plot.finch)
#the sites names vector contains 2513 individuals belonging to 6 sites (Islands)
@

The four traits correspond to three beak traits and one wing trait.

\begin{center}
\includegraphics[width = 10cm]{figs/darwinfinch.pdf}
\end{center}

\newpage


%%%%%%%%%%%%%%%%
\section{Description of traits distributions}
%%%%%%%%%%%%%%%%

\subsection{Plot the kernel density of traits}

Plot the distribution of traits values for populations, species, sites and regional scales. First, let try the distribution for all populations of Darwin finches. In R, FALSE and TRUE can be written respectively \texttt{F} and \texttt{T}.

<<dev = 'pdf'>>=
par(mfrow = c(4,4), cex = 0.5)
plotDistri(traits.finch, sp.finch, ind.plot.finch, 
           ylim.cex = 3, plot.ask = F, multipanel = F, leg = F)
@
The argument \texttt{ylim.cex} define the magnification to be used for range of y axe. To understand the other argument, type \texttt{?plotDistri}.

\newpage

Then we can inverse the second and the third arguments to plot the distribution for all finches species. 

<<dev = 'pdf'>>=
par(mfrow = c(4,4), cex = 0.5)
plotDistri(traits.finch, ind.plot.finch, sp.finch, 
           ylim.cex = 8, plot.ask = F, multipanel = F, leg = F)
@

Now, see the result for only one trait with the legend (\texttt{leg = TRUE}). \texttt{cex.leg} specify the magnification of legend. 

 <<dev = 'pdf', fig.height = 5>>=
par(mfrow = c(2,3))
plotDistri(as.matrix(traits.finch[,1]), ind.plot.finch, sp.finch, 
           ylim.cex = 8, plot.ask = F, multipanel = F, leg = T, cex.leg = 0.5)
 
@

If we want to plot all the sites (regional distribution) or all the species: we can use the following code:
<<dev = 'pdf', fig.width = 7>>=
par(mfrow = c(4,4), cex = 0.5)
plotDistri(traits.finch, rep("region", times = dim(traits.finch)[1]),
           sp.finch, ylim.cex = 6, plot.ask = F, leg = F)
@

<<dev = 'pdf', fig.width = 7>>=
plotDistri(traits.finch, rep("all_sp", times = dim(traits.finch)[1]),
           ind.plot.finch, ylim.cex = 3, plot.ask = F, cex.leg = 0.5)
@

Now we can reset the default graphical parameter:
<<>>=
par(old.par)
@
\newpage

%%%%%%%%%%%%%%%%
\section{Decomposition of variances}
%%%%%%%%%%%%%%%%

\subsection{Decomposition of within/among species variances using rao diversity}

The Rao function computes $\alpha$, $\beta$ and $\gamma$ -components for taxonomic, functional and/or phylogenetic diversity with:

$$ \gamma = mean (\alpha) + \beta $$

Where: $\gamma$ is the diversity of the regional pool, $\alpha$ is the diversity of the local community and $\beta$ is the turn over between local communities; diversity is estimated using the Rao quadratic entropy indices. Note that this method uses the additive framework of diversity. See the paper of Jost in 2010 (partitioning diversity into independent alpha and beta components) for more details on the differences between additive and multiplicative partitioning of diversity.


~\\

\textbf{Reference}: de Bello, F., Lavorel, S., Albert, C.H., Thuiller, W., Grigulis, K., Dolezal, J., Janecek, S. and Leps, J. (2011) Quantifying the relevance of intraspecific trait variability for functional diversity. Methods in Ecology and Evolution, 2, 163-174.


\subsubsection{Multitraits analysis}
First, rao diversity can be calculated on the functional  space (i.e. considering all traits together).

<<echo = c(-6, -8)>>=
#create individuals community matrix
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
#create species community matrix
comm.sp<-table(sp.finch, ind.plot.finch)
class(comm.sp)<-"matrix"

traits.finch.sp<-apply( apply(traits.finch, 2, scale ), 2, 
            function(x) tapply(x, sp.finch, mean, na.rm = T))

mat.dist<-as.matrix(dist(traits.finch.sp))^2

ptm <- proc.time() 

res.rao<-RaoRel(sample = as.matrix(comm.sp), 
        dfunc = mat.dist, dphyl = NULL, 
        weight = F, Jost = F, structure = NULL)
proc.time_RaoRel <- proc.time() - ptm

witRao<-res.rao$FD$Mean_Alpha #overall within species variance
betRao<-res.rao$FD$Beta_add  #between species variance
totRao<-res.rao$FD$Gamma    #the total variance

#Check that the total variance is equal
#to between species + within species variances
witRao+betRao
totRao
@

Now let's take the abundance into account to calculate Rao diversity.

<<>>=
res.rao.w<-RaoRel(sample = as.matrix(comm.sp), 
         dfunc = mat.dist, dphyl = NULL, 
         weight = T, Jost = F, structure = NULL)

witRao.w<-res.rao.w$FD$Mean_Alpha #overall within species variance
betRao.w<-res.rao.w$FD$Beta_add  #between species variance
totRao.w<-res.rao.w$FD$Gamma    #the total variance

witRao.w
betRao.w
@

Plot the results.

<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align = 'center'>>=
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)), 
    names.arg = c("abundance" ,"presence"), 
    legend.text = c("within species", "between species"), 
    ylab = "Rao", ylim = c(0,10))
@


\subsubsection{Unitraits analysis}
We can also do this analysis for each trait separately. We need to replace (or exclude) NA values. For this example, we use the package \texttt{mice} to complete the data.

<<results = 'hide'>>=
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))

require(mice)
traits = traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
@


<<>>=
#Calculate the mean traits value by population using the mice dataset
traits.finch.mice.sp<-apply(apply(traits.finch.mice, 2, scale ), 2, 
              function(x) tapply(x, sp.finch, mean, na.rm = T))

trait.rao.w<-list()
witRao.w.bytrait<-c()
betRao.w.bytrait<-c()
for(t in 1 : 4){
 trait.rao.w[[t]]<-RaoRel(sample = as.matrix(comm.sp), 
              dfunc = dist(traits.finch.mice.sp[,t]), 
              dphyl = NULL, weight = T, Jost = F, structure = NULL)
 witRao.w.bytrait<-c(witRao.w.bytrait, trait.rao.w[[t]]$FD$Mean_Alpha)
 betRao.w.bytrait<-c(betRao.w.bytrait, trait.rao.w[[t]]$FD$Beta_add)
}

@

Plot the results by traits.

<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align = 'center'>>=
barplot(t(cbind( witRao.w.bytrait, betRao.w.bytrait)), 
    names.arg = colnames(traits.finch),
    legend.text = c("within species", "between species"), 
    ylab = "Rao", ylim = c(0,1.5))
@


\subsection{Decomposition of community trait response to environment into intraspecific trait variability, variability due to species turnover and their covariation.}

\textbf{Reference}: Leps, J., de Bello, F., Smilauer, P. and Dolezal, J. (2011) Community trait response to environment: disentangling species turnover vs intraspecific trait variability effects. Ecography, 34, 856-863.

<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align = 'center', echo = c(-1, -2) >>=
ptm <- proc.time() 
res.decomp<-decompCTRE(traits = traits.finch, sp = sp.finch, 
              ind.plot = ind.plot.finch, print = FALSE)
proc.time_decompCTRE <- proc.time() - ptm
barplot(res.decomp)
@

<<dev = 'pdf', fig.width = 6, fig.height = 6, fig.align = 'center'>>=
par(mfrow = c(2,2))
barplot(res.decomp, resume = F)
par(mfrow = c(1,1))
@

\newpage

\subsection{Decomposition of traits variances using nested factors}

Variance partitioning across nested scales using the decomposition of variance on restricted maximum likelihood (REML) method (lme function).
~\\

\textbf{Reference}: Messier, J., McGill, B. and Lechowicz, M. (2010) How do traits vary across ecological scales? A case for trait-based ecology. Ecology Letters, 13, 838-848.

<<results = 'hide'>>=
vec<- seq(1,length(sp.finch)*2, by = 2)
genus<-as.vector(unlist(strsplit(as.vector(sp.finch),"_"))[vec])
fact<-cbind(genus = as.factor(genus), 
      species = as.factor(as.vector(sp.finch)),
      sites = as.factor(as.vector(ind.plot.finch)))

ptm <- proc.time() 
res.partvar.finch<-partvar(traits = traits.finch, factors = fact)
proc.time_partvar <- proc.time() - ptm
 
res.partvar.finch
@


<<dev = 'pdf', fig.width = 4, fig.height = 4, fig.align = 'center'>>=
par(mfrow = c(2,2), mai = c(0.2,0.2,0.2,0.2)) #save graphical parameters
colors<-c(rgb(102,167,0, maxColorValue = 255), 
     rgb(185,210,0, maxColorValue = 255), 
     rgb(98,174,255, maxColorValue = 255),
     rgb(158,30,240, maxColorValue = 255))
 
piePartvar(res.partvar.finch, col = colors)
par(old.par) #reset old graphical parameters
@

<<dev = 'pdf', fig.width = 6, fig.height = 6, fig.align = 'center'>>=
barPartvar(res.partvar.finch, col = colors, leg = TRUE)
@


\newpage

\subsection{Plot the relation between populational trait means and sites traits means.}

For an example of utilisation see: Cornwell, W.K. and Ackerly, D.D., 2009. Community assembly and shifts in plant trait distributions across an environmental gradient in coastal California. Ecological Monographs, 79, 109-126.

<<dev = 'pdf'>>=
plotSpPop(traits.finch, ind.plot.finch, sp.finch, silent = TRUE)
@

If we change the value of two arguments we can see some significant relationships. Here let's try a more permissive threshold: alpha = 10\% instead of 5\% (\texttt{p.val}) and define a lower minimum of values to represent significance  fixed to 3 instead of 10 by default (\texttt{min.ind.signif}). 

\newpage

<<dev = 'pdf'>>=
plotSpPop(traits.finch, ind.plot.finch, sp.finch, 
      p.val = 0.1, min.ind.signif = 3, silent = TRUE)
@

\newpage

For a more simple figure, add the option resume = TRUE. 
<<dev = 'pdf'>>=
plotSpPop(traits.finch, ind.plot.finch, sp.finch,
      silent = TRUE, resume = TRUE, col.pop = "grey")
@

If you are fed up with colors, try this:
<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align = 'center'>>=
plotSpPop(traits.finch, ind.plot.finch, sp.finch, 
      silent = TRUE, resume = TRUE, col.pop = "grey", col.sp = "black")
@

Again if we change the value of the threshold (\texttt{p.val} = 0.1 and \texttt{min.ind.signif} = 3) we can see some significant relationships.

<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align = 'center'>>=
plotSpPop(traits.finch, ind.plot.finch, sp.finch, 
      silent = TRUE, resume = TRUE, col.pop = "grey", col.sp = "black", 
      p.val = 0.1, min.ind.signif = 3)
@


\newpage

%%%%%%%%%%%%%%%%
\section{Test of community assembly}
%%%%%%%%%%%%%%%%

\subsection{Ratio of variances: T-statistics}

The function \texttt{Tstat} computes observed T-statistics (T for Traits; Violle et al (2012)) as three ratios of variance, namely $T_{IP/IC}$, $T_{IC/IR}$ and $T_{PC/PR}$. This function can also return the distribution of these three statistics under the three associated null models (respectively \textbf{local}, \textbf{regional.ind} and \textbf{regional.pop}).
~\\

\textbf{Reference}: Violle, C., Enquist, B.J., McGill, B.J., Jiang, L., Albert, C., Hulshof, C., Jung, V. and Messier, J. (2012) The return of the variance: intraspecific variability in community ecology. Trends in Ecology and Evolution, 27, 244-252.

<<echo = c(2, 4) >>=
ptm <- proc.time()
res.finch<-Tstats(traits.finch, ind.plot = ind.plot.finch, sp = sp.finch,
         nperm = 99, print = FALSE)
proc.time_Tstats <- proc.time() - ptm
res.finch
@



\subsubsection{S3 methods for class Tstats}
Tstats class is associated to S3 methods plot, barplot, print and summary. We have already used the print function in the above script line. Now, how to plot the result of the function \texttt{Tstats}?

We can represent observed values thanks to the \texttt{barplot} function.
<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align = 'center'>>=
barplot(res.finch, ylim = c(0,3.5))
@

One can be more interested in the significance  and the effect size available thanks to null model. In that case, the standardized effect size can be easily plot. Note that the function \texttt{ses} can be use directly to calculate standardized effect size without plotting. The Standardized Effect Size (ses) is define as : 

\begin{center}
$$ SES = (I_{obs} – I{_sim}) / \delta_{sim} $$
\end{center}

where $I_{obs}$ is the observed value, $I_{sim}$ the mean of values calculated from the null model and $\delta_{sim}$ the standard deviation of these simulated values.


<<dev = 'pdf', fig.width = 6, fig.height = 6, fig.align = 'center'>>=
plot(res.finch)
@

There is multiple kind of representation avaible.
<<dev = 'pdf', fig.width = 4.5, fig.height = 3.5, fig.align = 'center'>>=
plot(res.finch, type = "simple")
plot(res.finch, type = "simple_range")
plot(res.finch, type = "barplot")
@

If you want to specifically look at traits or sites statistics, use the argument \texttt{type = "bytraits"} or \texttt{"bysites"}.
<<dev = 'pdf', fig.align = 'center'>>=
par(mfrow=c(2,2))

plot(res.finch, type = "bytraits")
plot(res.finch, type = "bysites")

par(old.par) # reset default graphical parameters
@

\newpage

<<>>=
summary(res.finch) #S3 summary method for class Tstats
@


<<>>=
attributes(sum_Tstats(res.finch)) #Another mean to summarize Tstatistics
head(sum_Tstats(res.finch)$p.value, 10)
@

\newpage

\subsubsection{Plot T-statistics correlations}

We can also see T-statistics correlations and theirs correlation with others variables (e.g. a gradient variable, or the species richness).

<<dev = 'pdf'>>=
par(mfrow = c(2,3))
plotCorTstats(res.finch, plot.ask = FALSE, multipanel = F)
@

Here we plot T-statistics (in the standardized effect size SES form) in function of species richness by sites.

<<dev = 'pdf'>>=
par(mfrow = c(2,2))
species.richness<-table(ind.plot.finch)
plotSESvar(as.listofindex(list(res.finch)), species.richness, 
       multipanel = F)
@

Same plot with \texttt{resume = TRUE}.

<<dev = 'pdf'>>=
par(mfrow = c(2,2))
plotSESvar(as.listofindex(list(res.finch)), species.richness, 
       resume = T, multipanel = F)
par(mfrow = c(1,1))
@


\newpage
\subsection{Others univariates or multivariates metrics: function \texttt{ComIndex} and \texttt{ComIndexMulti}}

The function \texttt{ComIndex} allow choosing your own function (like mean, range, variance, ...) to calculate customize metrics. Here \texttt{CVNND} refers to the Coefficient of Variation of the Nearest Neighborhood Distance. \texttt{ComIndexMulti} do the same things for multivariate metrics. 

<<>>=
#Define the functions you want to calculate
funct<-c("mean(x, na.rm = T)", "kurtosis(x, na.rm = T)",
     "max(x, na.rm = T) - min(x, na.rm = T)", "CVNND(x)" )

#Test against the null model regional.ind
res.finch.sp_regional.ind<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
                           nullmodels = "regional.ind", ind.plot = ind.plot.finch,
                            nperm = 99, print = FALSE)
 
#Test against the null model regional.pop
#Individuals values are transformed in populational values
res.finch.sp_regional.pop<-ComIndex(traits = traits.finch, index = funct, sp = sp.finch,
               nullmodels = "regional.pop", ind.plot = ind.plot.finch, 
               nperm = 99, print = FALSE)
@

These two functions allows to calculate  index by sites for example using \code{"tapply(x, sites, mean)"}.

<<echo = -c(3, 6)>>=
funct.1<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm = T))",
     "tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm = T))",
     "tapply(x, ind.plot.finch, function(x) max(x, na.rm = T)-min(x, na.rm = T))", 
     "tapply(x, ind.plot.finch, function(x) CVNND(x))" )

#The function IndexByGroups permit to easily obtain the above lines 
IndexByGroups(funct, "ind.plot.finch")

##Null model local is trivial for these functions
##because randomization is within community only

ptm <- proc.time()
res.finch.ind_loc<-ComIndex(traits = traits.finch, index = funct.1, 
                            sp = sp.finch, nullmodels = "local", 
                            ind.plot = ind.plot.finch, nperm = 99, 
                            print = FALSE)
res.finch.ind_reg<-ComIndex(traits = traits.finch, index = funct.1, 
                            sp = sp.finch, nullmodels = "regional.ind", 
                            ind.plot = ind.plot.finch, nperm = 99, 
                            print = FALSE)
proc.time_ComIndex1 <- proc.time() - ptm
@


We can calculate index with or without intraspecific variance.

<<>>=
#calculate  of means by population (name_sp_site is a name of a population) 
#determine the site for each population (sites_bypop)
 
name_sp_sites = paste(sp.finch, ind.plot.finch, sep = "_")
traits.by.pop<-apply(traits.finch, 2 , 
           function (x) tapply(x, name_sp_sites, mean , na.rm = T))

sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep = "_"), split = "_"), 
          function(x) x[3])

fact<-unlist(sites_bypop)

funct.2<-c("tapply(x, fact, function(x) mean(x, na.rm = T))",
          "tapply(x, fact, function(x) kurtosis(x, na.rm = T))",
          "tapply(x, fact, function(x) max(x, na.rm = T)-min(x, na.rm = T))", 
          "tapply(x, fact, function(x) CVNND(x))")
@

Now calculate index with or without intraspecific variance thanks to function \texttt{ComIndex}.
<<echo = 2:3>>=
ptm <- proc.time()
res.finch.withIV<-ComIndex(traits = traits.finch, index = funct.1,
               sp = sp.finch, nullmodels = "regional.ind",
               ind.plot = ind.plot.finch, nperm = 99, print = FALSE)

res.finch.withoutIV<-ComIndex(traits = traits.finch, index = funct.2, 
               sp = sp.finch, nullmodels = "regional.pop", 
               ind.plot = ind.plot.finch, nperm = 99, print = FALSE)
proc.time_ComIndex.with_without <- proc.time() - ptm
@


\subsubsection{S3 methods for class ComIndex and ComIndexMulti}
ComIndex and ComIndexMulti class are associated to S3 methods plot, print and summary.

<<dev='pdf', fig.width = 7, fig.height = 4, fig.align='center'>>=
res.finch.withIV
summary(res.finch.withIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
@
Now plot the two analysis together.

<<dev='pdf'>>=
plot(as.listofindex(list(res.finch.withIV, res.finch.withoutIV)))
@

\subsubsection{Plot Tstats and other uni/multivariates metrics together}
The class listofindex permits to stock different metrics computed using \texttt{Tstats}, \texttt{ComIndex} and \texttt{ComIndexMulti} and compared to different null model. To do that we can use the Standardized Effect Size (ses) define as : 

\begin{center}
$SES = (I_obs – I_sim) / \delta_{sim}$
\end{center}

where $I_obs$ is the observed value, $I_sim$ the mean of values calculated from the null model and $\delta_{sim}$ the standard deviation of these simulated values.


<<dev = 'pdf', eval = FALSE>>=
list.ind1<-list(res.finch.withIV, res.finch.withoutIV)
index.list1<-as.listofindex(list.ind1)

plot(index.list1)
@

<<>>=
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1 = c("mean", "kurtosis", "range", "CVNND",
         "mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop", 
         "T_IP.IC", "T_IC.IR", "T_PC.PR")

i.l1<-as.listofindex(list.ind, namesindex = namesindex.i.l1)                 

class(i.l1)
@

The plot type \texttt{bytraits} allows plotting all SES traits values for all sites or all traits
<<dev = 'pdf'>>=
par(mfrow = c(2,3))
plot(i.l1,type = "bysites")

par(mfrow = c(2,2))
plot(i.l1,type = "bytraits")
par(mfrow = c(1,1))
@

The other plot types are the same as plot.Tstats.

<<dev = 'pdf', fig.width = 7, fig.height = 7>>=

par(mfrow = c(2,2))

plot(i.l1)
plot(i.l1,type = "simple_range")
plot(i.l1,type = "normal")
plot(i.l1,type = "barplot")

par(mfrow = c(1,1))
@



\newpage

\subsection{More information on multivariates index}

For most multivariate functions we need to replace (or exclude) NA values. For this example, we use the package \texttt{mice} to complete the data.

<<results = 'hide', eval = FALSE>>=
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))

require(mice)
traits = traits.finch
mice<-mice(traits.finch)
traits.finch.mice<-complete(mice)
@

A simple example to illustrate the concept of the function \texttt{ComIndexMulti}

<<>>=
n_sp_plot<-as.factor(paste(sp.finch, ind.plot.finch, sep = "_")) 
res.sum.1<-ComIndexMulti(traits.finch, 
              index = c("sum(scale(x), na.rm = T)", "sum(x, na.rm = T)"), 
              by.factor = n_sp_plot, nullmodels = "regional.ind", 
              ind.plot = ind.plot.finch, nperm = 99, sp = sp.finch)

res.sum.1
@

\newpage
A more interesting example using the function \texttt{hypervolume} from the package ... \texttt{hypervolume} (Blonder et al., 2014). We show here several results which differed in there factor that delimit the group to calculate different hypervolume (argument \texttt{byfactor}). 

First, let's try the \texttt{hypervolume} function one finch data.
<<dev = 'pdf'>>=
hv<-hypervolume(traits.finch.mice, reps = 100,
                bandwidth = 0.2, verbose = F, warnings = F)
plot(hv)
@

Now, we can do the same analysis for each species.

<<dev = 'pdf', results ='hide'>>=
hv.list<-new("HypervolumeList")
hv.list2<-list()

for(i in 1: length(table(sp.finch))) {
 hv.list2[[i]]<-hypervolume(traits.finch.mice[sp.finch == levels(sp.finch)[i], ], 
        reps = 1000,bandwidth = 0.2, verbose = F, warnings = F)
}

hv.list@HVList<-hv.list2
require(adegenet)
colorhv<-transp(funky(nlevels(sp.finch)), alpha = 0.8)

plot(hv.list, colors = colorhv, darkfactor = 0.8)
plot(hv.list, colors = colorhv, darkfactor = 0.8, showdata = F,  
     npmax_random = 200, cex.random = 1)
@

<<results='hide'>>=
summary(hv.list)
@

The standard example of the \texttt{hypervolume} package also use finch data but at the species level.

<<dev = 'pdf', eval = FALSE>>=
doHypervolumeFinchDemo=TRUE
demo('finch', package = 'hypervolume')
@


\texttt{ComIndexMulti} takes the same arguments as \texttt{ComIndex} and an argument by factor to apply the index on different factors.
\label{hv.3}
<<result = 'hide'>>=
#all individual are put in the same group: calculate the hypervolume without by.factor
hv.1<-ComIndexMulti(traits.finch.mice, 
             index = c("as.numeric(try(hypervolume(na.omit(x), reps = 100,
                       bandwidth = 0.2, verbose = F, warnings = F)@Volume))"),
             by.factor = rep(1,length(n_sp_plot)), nullmodels = "regional.ind",
             ind.plot = ind.plot.finch, nperm = 99, sp = sp.finch) 

hv.2<-ComIndexMulti(traits.finch.mice, 
             index = c("as.numeric(try(hypervolume(na.omit(x), reps = 100,
                       bandwidth = 0.2, verbose = F, warnings = F)@Volume))"), 
             by.factor = n_sp_plot, nullmodels = "regional.ind", 
             ind.plot = ind.plot.finch, nperm = 99, sp = sp.finch, print = FALSE)

ptm <- proc.time() 
hv.3<-ComIndexMulti(traits.finch.mice, 
             index = c("as.numeric(try(hypervolume(na.omit(x), reps = 100,
                       bandwidth = 0.2, verbose = F, warnings = F)@Volume))"), 
             by.factor = ind.plot.finch, nullmodels ="regional.ind", 
             ind.plot = ind.plot.finch, nperm = 99, sp = sp.finch, print = FALSE)
proc.time_ComIndexMulti <- proc.time() - ptm

hv.4<-ComIndexMulti(traits.finch.mice, 
             index = c("as.numeric(try(hypervolume(na.omit(x), reps = 100, 
                       bandwidth = 0.2, verbose = F, warnings = F)@Volume))"), 
             by.factor = sp.finch, nullmodels = "regional.ind", 
             ind.plot = ind.plot.finch, nperm = 99, sp = sp.finch, print = FALSE)

list.ind.multi<-as.listofindex(list(hv.2, hv.3, hv.4))

ses.list.multi<-ses.listofindex(list.ind.multi)
@

<<dev = 'pdf', fig.width = 5, fig.height = 5, fig.align='center'>>=
plot(list.ind.multi)
#Try a zoom on the area near zero
plot(list.ind.multi, xlim = c(-200,20))
@

Compare hypervolume to Villeger's metrics convex hull.

<<>>=
require("geometry")
 
FA<-as.character("FA")
funct<-c("round(convhulln(x,FA)$vol,6)")

##Null model local is trivial for this function
##because randomization is within community only
Fdis.finch<-ComIndexMulti(traits.finch.mice, 
             index = funct,
             by.factor = ind.plot.finch, nullmodels = "local",
             ind.plot = ind.plot.finch, nperm = 99, sp = sp.finch)

list.ind.multi2<-as.listofindex(list(hv.3, Fdis.finch))

ses.list.multi2<-ses.listofindex(list.ind.multi2)
@

<<dev = 'pdf', fig.width = 4, fig.height = 4>>=
plot(list.ind.multi2)
@

\section{Others graphical functions}

Use rasterVis to obtain more color schemes. 
<<echo = FALSE>>=
require(rasterVis)
# Custom theme (from rasterVis package)
my.theme <- BuRdTheme()
# Customize the colorkey
my.ckey <- list(col = my.theme$regions$col)
@

Plot the p-value or the ses values using the function \texttt{levelplot}.

<<dev = 'pdf', fig.height = 4>>=
levelplot(t(sum_Tstats(res.finch)$p.value), 
     colorkey = my.ckey, par.settings = my.theme,border = "black")
@


<<dev = 'pdf', fig.height = 4>>=
levelplot(t(ses(res.finch$Tstats$T_IP.IC, res.finch$Tstats$T_IP.IC_nm)$ses), 
     colorkey = my.ckey, par.settings = my.theme,border = "black")

levelplot(cbind(t(ses(res.finch$Tstats$T_IP.IC, res.finch$Tstats$T_IP.IC_nm)$ses), 
        t(ses(res.finch$Tstats$T_IC.IR, res.finch$Tstats$T_IP.IC_nm)$ses),
        t(ses(res.finch$Tstats$T_PC.PR, res.finch$Tstats$T_IP.IC_nm)$ses))
     , colorkey = my.ckey, par.settings = my.theme,border = "black")
@

Another example using \texttt{ses.listofindex}. The first plot represent "ses" values and the second one the result of a test with H0: observed index value are greater than what we can expect using the null model (alpha = 2.5\%).

<<dev = 'pdf', fig.height = 4>>=

ses.list<-ses.listofindex(i.l1)

levelplot(t(rbind(ses.list[[1]]$ses, ses.list[[2]]$ses, 
         ses.list[[3]]$ses, ses.list[[4]]$ses)),
     colorkey = my.ckey, par.settings = my.theme,border = "black")

levelplot(t(rbind(ses.list[[1]]$ses>ses.list[[1]]$ses.sup, 
         ses.list[[2]]$ses>ses.list[[2]]$ses.sup,
         ses.list[[3]]$ses>ses.list[[3]]$ses.sup,
         ses.list[[4]]$ses>ses.list[[4]]$ses.sup)),
     colorkey = my.ckey, par.settings = my.theme,border = "black")
 

@

Compare metrics calculate on individual against metrics calculate after populationnal meaning
<<dev = 'pdf', fig.height = 4>>=
ses.ind<-t(rbind(ses.list[[1]]$ses, 
      ses.list[[2]]$ses,
      ses.list[[3]]$ses,
      ses.list[[4]]$ses))

ses.sp<-t(rbind(ses.list[[5]]$ses, 
     ses.list[[6]]$ses,
     ses.list[[7]]$ses,
     ses.list[[8]]$ses))

levelplot(ses.ind, colorkey = my.ckey, 
     par.settings = my.theme,border = "black")
levelplot(ses.sp, colorkey = my.ckey, 
     par.settings = my.theme,border = "black")
@

\section{Multivariate analysis of metrics}
To finish, we can do a multivariate analysis of the metrics obtain during this tutorial using the package \texttt{ade4}. Analysis dudi 1 puts together all traits by meaning the SES values for each metrics in each sites whereas analysis dudi 2 analyses all combination of traits / sites / metrics.

<<dev = 'pdf'>>=
library(ade4)
 
 matfordudi<-matrix(nrow = length(colMeans(ses.list[[1]]$ses)), ncol = length(names(ses.list)))
 for(i in 1: length(names(ses.list))){
  matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
 }
 colnames(matfordudi)<-names(ses.list)
 rownames(matfordudi)<-colnames(traits.finch)
 
 matfordudi2<-matrix(nrow = length(as.vector(ses.list[[1]]$ses)), ncol = length(names(ses.list)))
 for(i in 1: length(names(ses.list))){
  matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
 }
 colnames(matfordudi2)<-names(ses.list)
@

<<results = 'hide'>>=
#Use mice for the purpose of this example
matfordudi<-complete(mice(matfordudi))
matfordudi2<-complete(mice(matfordudi2))
@


<<dev = 'pdf'>>= 
res.dudi<-dudi.pca(t(matfordudi), scan = F, nf = 2) 
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot = T, clabel = 0, pch = 16)
s.label(res.dudi$li+0.05, add.plot = T, boxes = F)
 
res.dudi2<-dudi.pca(matfordudi2, scan = F, nf = 2) 
scatter(res.dudi2)
s.corcircle(res.dudi2$co)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), 
                                  rep("UBeakL",6), rep("N.UBkL",6))), 
        col = funky(4))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr",
                                      "MrchBndl","SCruInde"),4 )), 
        col = funky(6))
@


\section{Speed of computation}

Speed of computation are saved throughout the vignette. For the specific system and R session describe above, we can determine the time of computation on darwin finch data with 99 permutations.

\begin{itemize}
\item \texttt{RaoRel} $->$ \Sexpr{proc.time_RaoRel[3]} s.
\item \texttt{decompCTRE} $->$ \Sexpr{proc.time_decompCTRE[3]} s.
\item \texttt{partvar} $->$ \Sexpr{proc.time_partvar[3]} s.
\item \texttt{Tstats} $->$ \Sexpr{proc.time_Tstats[3]} s.
\item \texttt{ComIndex} \begin{itemize}
    \item using four metrics $->$ \Sexpr{proc.time_ComIndex1[3]} s.
    \item with/without intraspecific variation $->$ \Sexpr{proc.time_ComIndex.with_without[3]} s.
    \end{itemize}                    
\item \texttt{ComIndexMulti}: for the calcul of hv.3 see \pageref{hv.3} $->$ \Sexpr{proc.time_ComIndexMulti[3]} s.
\end{itemize}

<<sessionInfo>>=
sessionInfo()
@

<<Speed_computation, results='hide'>>=
proc.time_RaoRel
proc.time_decompCTRE
proc.time_partvar
proc.time_Tstats
proc.time_ComIndex1
proc.time_ComIndex.with_without
proc.time_ComIndexMulti
@


\section*{Conclusion}
\addcontentsline{toc}{subsection}{Conclusion}
This is the end of the tutorial. The up to date version of this tutorial is available \href{https://github.com/adrientaudiere/cati/blob/Package-cati/Documentation/vignette_Darwin_finches/vignette.pdf}{here}.

\section*{References}
\addcontentsline{toc}{subsection}{References}

\section*{Acknowledgment}
Great thanks to Thibault Jombart for his help on building R packages and writing tutorial with \href{http://yihui.name/knitr/}{knitR}.


\end{document}




ptm <- proc.time() 
proc.time_RaoRel <- proc.time() - ptm
