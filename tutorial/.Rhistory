plotDistri(as.matrix(traits.finch[,1]), ind.plot.finch, sp.finch,
ylim.cex=8, plot.ask=F, multipanel=F, leg=T, cex.leg=0.5)
library("mcati")
library("cati")
packageDescription("cati", fields = "Version")
data(finch.ind)
par(mfrow=c(2,3))
plotDistri(as.matrix(traits.finch[,1]), ind.plot.finch, sp.finch,
ylim.cex=8, plot.ask=F, multipanel=F, leg=T, cex.leg=0.5)
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
comm<-t(table(ind.plot.finch,1:length(ind.plot.finch)))
#create species community matrix
comm.sp<-table(sp.finch, ind.plot.finch)
class(comm.sp)<-"matrix"
traits.finch.sp<-apply( apply(traits.finch, 2, scale ), 2,
function(x) tapply(x, sp.finch, mean, na.rm=T))
mat.dist<-as.matrix(dist(traits.finch.sp))^2
res.rao<-RaoRel(sample=as.matrix(comm.sp),
dfunc=mat.dist, dphyl=NULL,
weight=F, Jost=F, structure=NULL)
witRao<-res.rao$FD$Mean_Alpha  #overall within species variance
betRao<-res.rao$FD$Beta_add    #between species variance
totRao<-res.rao$FD$Gamma       #the total variance
witRao+betRao
totRao
res.rao.w<-RaoRel(sample=as.matrix(comm.sp),
dfunc=mat.dist, dphyl=NULL,
weight=T, Jost=F, structure=NULL)
witRao.w<-res.rao.w$FD$Mean_Alpha  #overall within species variance
betRao.w<-res.rao.w$FD$Beta_add    #between species variance
totRao.w<-res.rao.w$FD$Gamma       #the total variance
witRao.w
betRao.w
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10))
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10), cex.leg=0.6)
?par
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10), cex=0.6)
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10), cex=0.6)
barplot(cbind(c(witRao.w, betRao.w), c(witRao, betRao)),
names.arg =c("abundance" ,"presence"),
legend.text=c("within species", "between species"),
ylab="Rao", ylim=c(0,10), cex.sub=0.6)
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn2sp)
index.list2<-as.listofindex(list.ind2)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.withIV<-funct
funct.withoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
fact<-unlist(sites_bypop)
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits=traits.finch, index=funct.withIV,
sp=sp.finch, nullmodels=c(2,2,2,2),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.withoutIV<-ComIndex(traits=traits.finch, index=funct.withoutIV,
sp=sp.finch, nullmodels=rep("2sp",4),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
funct.withIV<-funct
funct<-c("tapply(x, ind.plot.finch, function(x) mean(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) kurtosis(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, ind.plot.finch, function(x) CVNND(x))"  )
res.finch.ind_mn1<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(1,1,1,1), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
res.finch.ind_mn2<-ComIndex(traits=traits.finch, index=funct, sp=sp.finch,
nullmodels=c(2,2,2,2), ind.plot=ind.plot.finch,
nperm=9, print=FALSE)
#Calcul of means by population (name_sp_site is a name of a population)
#like in the function ComIndex and determine the site for each population (sites_bypop)
name_sp_sites=paste(sp.finch, ind.plot.finch,sep="_")
traits.by.pop<-apply(traits.finch, 2 ,
function (x) tapply(x, name_sp_sites, mean , na.rm=T))
sites_bypop<-lapply(strsplit(paste(rownames(traits.by.pop), sep="_"), split="_"),
function(x) x[3])
#We use the precedent list of function "funct"
funct.withIV<-funct
fact<-unlist(sites_bypop)
funct.withoutIV<-c("tapply(x, fact, function(x) mean(x, na.rm=T))",
"tapply(x, fact, function(x) kurtosis(x, na.rm=T))",
"tapply(x, fact, function(x) max(x, na.rm=T)-min(x, na.rm=T))",
"tapply(x, fact, function(x) CVNND(x))")
res.finch.withIV<-ComIndex(traits=traits.finch, index=funct.withIV,
sp=sp.finch, nullmodels=c(2,2,2,2),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.withoutIV<-ComIndex(traits=traits.finch, index=funct.withoutIV,
sp=sp.finch, nullmodels=rep("2sp",4),
ind.plot=ind.plot.finch, nperm=9, print=FALSE)
res.finch.sp_mn2
summary(res.finch.sp_mn2)
plot(res.finch.sp_mn2)
res.finch.withIV
summary(res.finch.withIV)
summary(res.finch.withoutIV)
plot(res.finch.withIV)
plot(res.finch.withoutIV)
list.ind2<-list(res.finch.sp_mn2, res.finch.sp_mn2sp)
list.ind1<-list(res.finch.withIV, res.finch.withoutIV)
index.list1<-as.listofindex(list.ind1)
plot(index.list1)
plot(index.list1)
list.ind1<-list(res.finch.withIV, res.finch.withoutIV)
index.list1<-as.listofindex(list.ind1)
plot(index.list1)
list.ind1<-list(res.finch.withIV, res.finch.withoutIV)
index.list1<-as.listofindex(list.ind1)
plot(index.list1)
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
res.finch<-Tstats(traits.finch, ind.plot=ind.plot.finch, sp=sp.finch,
nperm=9, print=FALSE)
list.ind1<-list(res.finch.withIV, res.finch.withoutIV)
index.list1<-as.listofindex(list.ind1)
plot(index.list1)
list.ind<-list(res.finch.withIV, res.finch.withoutIV, res.finch)
namesindex.i.l1=c("mean", "kurtosis", "range", "CVNND",
"mean.pop", "kurtosis.pop", "range.pop", "CVNND.pop",
"T_IP.IC", "T_IC.IR", "T_PC.PR")
i.l1<-as.listofindex(list.ind, namesindex=namesindex.i.l1)
class(i.l1)
par(mfrow=c(2,3))
plot(i.l1,type="bytraits", bysite=TRUE)
par(mfrow=c(2,2))
plot(i.l1,type="bytraits")
par(mfrow=c(1,1))
install.packages("adegenet")
res.finch
res.finch$pval
str(res.finch)
sum_Tstats(res.finch)
sum_Tstats(res.finch)$pval
sum_Tstats(res.finch)$p.value
levelplot(sum_Tstats(res.finch)$p.value)
install.packages("rasterVis")
levelplot
??levelplot
install.packages("rasterVis")
levelplot(t(rbind(res.finch$pval$T_IP.IC.inf,
res.finch$pval$T_IC.IR.inf,
res.finch$pval$T_PC.PR.inf)),
colorkey=my.ckey, par.settings=my.theme,border="black")
require(rasterVis)
sum_Tstats(res.finch)$p.value
require(cati)
sum_Tstats(res.finch)$p.value
levelplot(sum_Tstats(res.finch)$p.value)
levelplot(t(sum_Tstats(res.finch)$p.value),
colorkey=my.ckey, par.settings=my.theme,border="black")
my.theme <- BuRdTheme()
my.ckey <- list(col=my.theme$regions$col)
levelplot(t(sum_Tstats(res.finch)$p.value),
colorkey=my.ckey, par.settings=my.theme,border="black")
levelplot(t(ses(res.finch$T_IP.IC,res.finch$T_IP.IC_nm)$ses),
colorkey=my.ckey, par.settings=my.theme,border="black")
res.finch$Tstats
levelplot(t(ses(res.finch$Tstats$T_IP.IC, res.finch$Tstats$T_IP.IC_nm)$ses),
colorkey=my.ckey, par.settings=my.theme,border="black")
levelplot(cbind(t(ses(res.finch$Tstats$T_IP.IC, res.finch$Tstats$T_IP.IC_nm)$ses),
t(ses(res.finch$Tstats$T_IC.IR, res.finch$Tstats$T_IP.IC_nm)$ses),
t(ses(res.finch$Tstats$T_PC.PR, res.finch$Tstats$T_IP.IC_nm)$ses))
, colorkey=my.ckey, par.settings=my.theme,border="black")
ses.list<-ses.listofindex(i.l1)
levelplot(t(rbind(ses.list[[1]]$ses, ses.list[[2]]$ses,
ses.list[[3]]$ses,  ses.list[[4]]$ses)),
colorkey=my.ckey, par.settings=my.theme,border="black")
levelplot(t(rbind(ses.list[[1]]$ses>ses.list[[1]]$ses.sup,
ses.list[[2]]$ses>ses.list[[2]]$ses.sup,
ses.list[[3]]$ses>ses.list[[3]]$ses.sup,
ses.list[[4]]$ses>ses.list[[4]]$ses.sup)),
colorkey=my.ckey, par.settings=my.theme,border="black")
obj1<-t(rbind(ses.list[[1]]$ses>ses.list[[1]]$ses.sup,
ses.list[[2]]$ses>ses.list[[2]]$ses.sup,
ses.list[[3]]$ses>ses.list[[3]]$ses.sup,
ses.list[[4]]$ses>ses.list[[4]]$ses.sup))
obj2<-t(rbind(ses.list[[5]]$ses>ses.list[[5]]$ses.sup,
ses.list[[6]]$ses>ses.list[[6]]$ses.sup,
ses.list[[7]]$ses>ses.list[[7]]$ses.sup,
ses.list[[8]]$ses>ses.list[[8]]$ses.sup))
levelplot(rbind(obj1, obj2),
colorkey=my.ckey, par.settings=my.theme,border="black")
obj1.ses<-t(rbind(ses.list[[1]]$ses,
ses.list[[2]]$ses,
ses.list[[3]]$ses,
ses.list[[4]]$ses))
obj2.ses<-t(rbind(ses.list[[5]]$ses,
ses.list[[6]]$ses,
ses.list[[7]]$ses,
ses.list[[8]]$ses))
levelplot(rbind(obj1.ses, obj2.ses),
colorkey=my.ckey, par.settings=my.theme,border="black")
ses.list
attributes(i.l1)
levelplot(ses.ind, colorkey=my.ckey,
par.settings=my.theme,border="black")
ses.ind<-t(rbind(ses.list[[1]]$ses,
ses.list[[2]]$ses,
ses.list[[4]]$ses))
ses.sp<-t(rbind(ses.list[[5]]$ses,
ses.list[[6]]$ses,
ses.list[[7]]$ses,
ses.list[[3]]$ses,
ses.list[[8]]$ses))
par(mfrow=c(1,2))
levelplot(ses.ind, colorkey=my.ckey,
par.settings=my.theme,border="black")
levelplot(ses.sp, colorkey=my.ckey,
par.settings=my.theme,border="black")
par(mfrow=c(1,2))
levelplot(ses.ind, colorkey=my.ckey,
par.settings=my.theme,border="black")
levelplot(ses.sp, colorkey=my.ckey,
par.settings=my.theme,border="black")
?levelplot
levelplot(ses.sp, colorkey=my.ckey, layers=2, par.settings=my.theme,border="black")
levelplot(ses.ind, colorkey=my.ckey,
par.settings=my.theme,border="black")
levelplot(ses.sp, colorkey=my.ckey,
par.settings=my.theme,border="black")
ses.list[[1]]$ses
ses.ind<-t(rbind(ses.list[[1]]$ses,
ses.list[[2]]$ses,
ses.list[[3]]$ses,
ses.list[[4]]$ses))
ses.ind
ses.sp
ses.sp<-t(rbind(ses.list[[5]]$ses,
ses.list[[6]]$ses,
ses.list[[7]]$ses,
ses.list[[8]]$ses))
dim(ses.ind)
dim(ses.sp)
levelplot(ses.ind, colorkey=my.ckey,
par.settings=my.theme,border="black")
levelplot(ses.sp, colorkey=my.ckey,
par.settings=my.theme,border="black")
ses.list.multi<-ses.listofindex(list.ind.multi)
ses.list.multi[[1]]<-lapply(ses.list.multi[[1]],
function(x) x[!is.na(ses.list.multi[[1]][[2]])] )
ses.list.multi[[2]]<-lapply(ses.list.multi[[2]],
function(x) x[!is.na(ses.list.multi[[2]][[2]])] )
ses.list.multi[[3]]<-lapply(ses.list.multi[[3]],
function(x) x[!is.na(ses.list.multi[[3]][[2]])] )
levelplot(t(as.matrix(ses.list.multi[[1]]$ses)),
colorkey=my.ckey, par.settings=my.theme,border="black")
levelplot(t(as.matrix(ses.list.multi[[2]]$ses)),
colorkey=my.ckey, par.settings=my.theme,border="black")
levelplot(t(as.matrix(ses.list.multi[[3]]$ses)),
colorkey=my.ckey, par.settings=my.theme,border="black")
require(ade4)
require(adegenet)
matfordudi<-matrix(nrow=length(colMeans(ses.list[[i]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
colnames(matfordudi)<-names(ses.list)
rownames(matfordudi)<-colnames(traits.finch)
matfordudi<-matrix(nrow=length(colMeans(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
colnames(matfordudi)<-names(ses.list)
rownames(matfordudi)<-colnames(traits.finch)
matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
colnames(matfordudi2)<-names(ses.list)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=t)
-dudi.pca(t(matfordudi), scan=F, nf=2)
matfordudi
?dudi.pca
matfordudi<-matrix(nrow=length(colMeans(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
colnames(matfordudi)<-names(ses.list)
rownames(matfordudi)<-colnames(traits.finch)
matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
colnames(matfordudi2)<-names(ses.list)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
matfordudi2
ses.list
mice(matfordudi)
require(mice)
mice(matfordudi)
matfordudi<-mice(matfordudi)
matfordudi
matfordudi<-complete(matfordudi)
matfordudi
matfordudi<-complete(matfordudi)
matfordudi2<-complete(matfordudi2)
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
rownames(matfordudi)<-colnames(traits.finch)
matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
colnames(matfordudi)<-names(ses.list)
matfordudi<-matrix(nrow=length(colMeans(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi[,i]<-colMeans(ses.list[[i]]$ses)
}
colnames(matfordudi)<-names(ses.list)
rownames(matfordudi)<-colnames(traits.finch)
matfordudi2<-matrix(nrow=length(as.vector(ses.list[[1]]$ses)), ncol=length(names(ses.list)))
for(i in 1: length(names(ses.list))){
matfordudi2[,i]<-as.vector(ses.list[[i]]$ses)
}
colnames(matfordudi2)<-names(ses.list)
#Use mice for the purpose of this example
matfordudi<-complete(mice(matfordudi))
matfordudi2<-complete(mice(matfordudi2))
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=t)
s.label(res.dudi$li, add.plot=T)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T)
s.label(res.dudi$li, add.plot=T, col="red")
?s.label
s.label(res.dudi$li, add.plot=T, boxes=F)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, boxes=F)
s.points(res.dudi$li, add.plot=T)
s.value(res.dudi$li, add.plot=T)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, boxes=F)
s.label(res.dudi$li, add.plot=T, clabel == 0)
s.label(res.dudi$li, add.plot=T, clabel == 0, pch=16)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, clabel == 0, pch=16)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, clabel == 0, pch=16)
s.label(res.dudi$li, add.plot=T, clabel == 0)
s.label(res.dudi$li, add.plot=T, clabel == 0)
s.label(res.dudi$li, add.plot=T, boxes=F)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, clabel == 0)
s.label(res.dudi$li, add.plot=T, clabel = 0, pch=16)
s.label(res.dudi$li, add.plot=T, boxes=F)
res.dudi<-dudi.pca(t(matfordudi), scan=F, nf=2)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, clabel = 0, pch=16)
s.label(res.dudi$li, add.plot=T, boxes=F)
s.label(res.dudi$li+0.1, add.plot=T, boxes=F)
s.corcircle(res.dudi$co)
s.label(res.dudi$li, add.plot=T, clabel = 0, pch=16)
s.label(res.dudi$li+0.05, add.plot=T, boxes=F)
res.dudi2<-dudi.pca(matfordudi2, scan=F, nf=2)
scatter(res.dudi2)
s.corcircle(res.dudi2$co)
s.class(res.dudi2$li, as.factor(c(rep("WingL",6), rep("BeakH",6), rep("UBeakL",6), rep("N.UBkL",6))), col=funky(4))
s.class(res.dudi2$li, as.factor(rep(c("DMaj","EspHd","FlorChrl","GnovTwr","MrchBndl","SCruInde"),4 )), col=funky(6))
matfordudi
matfordudi2
